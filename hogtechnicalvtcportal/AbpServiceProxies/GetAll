/* This file is automatically generated by ABP framework to use MVC Controllers from JavaScript. */

var abp = abp || {};
abp.services = abp.services || {};

// module 'app'
(function(){

  abp.services.app = abp.services.app || {};

  // controller 'webhookEvent'
  (function(){

    abp.services.app.webhookEvent = abp.services.app.webhookEvent || {};

    // action 'get'
    abp.services.app.webhookEvent.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebhookEvent/Get' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'webhookSendAttempt'
  (function(){

    abp.services.app.webhookSendAttempt = abp.services.app.webhookSendAttempt || {};

    // action 'getAllSendAttempts'
    abp.services.app.webhookSendAttempt.getAllSendAttempts = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebhookSendAttempt/GetAllSendAttempts' + abp.utils.buildQueryString([{ name: 'subscriptionId', value: input.subscriptionId }, { name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllSendAttemptsOfWebhookEvent'
    abp.services.app.webhookSendAttempt.getAllSendAttemptsOfWebhookEvent = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebhookSendAttempt/GetAllSendAttemptsOfWebhookEvent' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'resend'
    abp.services.app.webhookSendAttempt.resend = function(sendAttemptId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebhookSendAttempt/Resend' + abp.utils.buildQueryString([{ name: 'sendAttemptId', value: sendAttemptId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'webhookSubscription'
  (function(){

    abp.services.app.webhookSubscription = abp.services.app.webhookSubscription || {};

    // action 'publishTestWebhook'
    abp.services.app.webhookSubscription.publishTestWebhook = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebhookSubscription/PublishTestWebhook',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getAllSubscriptions'
    abp.services.app.webhookSubscription.getAllSubscriptions = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebhookSubscription/GetAllSubscriptions',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSubscription'
    abp.services.app.webhookSubscription.getSubscription = function(subscriptionId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebhookSubscription/GetSubscription' + abp.utils.buildQueryString([{ name: 'subscriptionId', value: subscriptionId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'addSubscription'
    abp.services.app.webhookSubscription.addSubscription = function(subscription, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebhookSubscription/AddSubscription',
        type: 'POST',
        data: JSON.stringify(subscription)
      }, ajaxParams));;
    };

    // action 'updateSubscription'
    abp.services.app.webhookSubscription.updateSubscription = function(subscription, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebhookSubscription/UpdateSubscription',
        type: 'PUT',
        data: JSON.stringify(subscription)
      }, ajaxParams));;
    };

    // action 'activateWebhookSubscription'
    abp.services.app.webhookSubscription.activateWebhookSubscription = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebhookSubscription/ActivateWebhookSubscription',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'isSubscribed'
    abp.services.app.webhookSubscription.isSubscribed = function(webhookName, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebhookSubscription/IsSubscribed' + abp.utils.buildQueryString([{ name: 'webhookName', value: webhookName }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getAllSubscriptionsIfFeaturesGranted'
    abp.services.app.webhookSubscription.getAllSubscriptionsIfFeaturesGranted = function(webhookName, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebhookSubscription/GetAllSubscriptionsIfFeaturesGranted' + abp.utils.buildQueryString([{ name: 'webhookName', value: webhookName }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllAvailableWebhooks'
    abp.services.app.webhookSubscription.getAllAvailableWebhooks = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebhookSubscription/GetAllAvailableWebhooks',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'timing'
  (function(){

    abp.services.app.timing = abp.services.app.timing || {};

    // action 'getTimezones'
    abp.services.app.timing.getTimezones = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timing/GetTimezones' + abp.utils.buildQueryString([{ name: 'defaultTimezoneScope', value: input.defaultTimezoneScope }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTimezoneComboboxItems'
    abp.services.app.timing.getTimezoneComboboxItems = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timing/GetTimezoneComboboxItems' + abp.utils.buildQueryString([{ name: 'selectedTimezoneId', value: input.selectedTimezoneId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'timeTable_Slot'
  (function(){

    abp.services.app.timeTable_Slot = abp.services.app.timeTable_Slot || {};

    // action 'getAll'
    abp.services.app.timeTable_Slot.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TimeTable_Slot/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'dayFilter', value: input.dayFilter }, { name: 'timetableNameFilter', value: input.timetableNameFilter }, { name: 'timetableEmployNoFilter', value: input.timetableEmployNoFilter }, { name: 'timetablePaperSize', value: input.timetablePaperSize }, { name: 'timetableRoomsNameFilter', value: input.timetableRoomsNameFilter }, { name: 'groupnamesFilter', value: input.groupnamesFilter }, { name: 'individualCheckFilter', value: input.individualCheckFilter }, { name: 'showDepartmentProgrammesOnly', value: input.showDepartmentProgrammesOnly }, { name: 'lessons_SlotsNameFilter', value: input.lessons_SlotsNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTimeTable_SlotForView'
    abp.services.app.timeTable_Slot.getTimeTable_SlotForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TimeTable_Slot/GetTimeTable_SlotForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTimeTable_SlotForEdit'
    abp.services.app.timeTable_Slot.getTimeTable_SlotForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TimeTable_Slot/GetTimeTable_SlotForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.timeTable_Slot.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TimeTable_Slot/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.timeTable_Slot['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TimeTable_Slot/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getTimeTable_SlotToExcel'
    abp.services.app.timeTable_Slot.getTimeTable_SlotToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TimeTable_Slot/GetTimeTable_SlotToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'dayFilter', value: input.dayFilter }, { name: 'timetableNameFilter', value: input.timetableNameFilter }, { name: 'timetableRoomsNameFilter', value: input.timetableRoomsNameFilter }, { name: 'groupnamesFilter', value: input.groupnamesFilter }, { name: 'lessons_SlotsNameFilter', value: input.lessons_SlotsNameFilter }, { name: 'timetableEmployNoFilter', value: input.timetableEmployNoFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllTimetableForLookupTable'
    abp.services.app.timeTable_Slot.getAllTimetableForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TimeTable_Slot/GetAllTimetableForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'advFilter', value: input.advFilter }, { name: 'timetable_id', value: input.timetable_id }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllTimetableRoomsForLookupTable'
    abp.services.app.timeTable_Slot.getAllTimetableRoomsForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TimeTable_Slot/GetAllTimetableRoomsForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'advFilter', value: input.advFilter }, { name: 'timetable_id', value: input.timetable_id }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllGroupForLookupTable'
    abp.services.app.timeTable_Slot.getAllGroupForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TimeTable_Slot/GetAllGroupForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'advFilter', value: input.advFilter }, { name: 'timetable_id', value: input.timetable_id }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllSubjectForLookupTable'
    abp.services.app.timeTable_Slot.getAllSubjectForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TimeTable_Slot/GetAllSubjectForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'advFilter', value: input.advFilter }, { name: 'timetable_id', value: input.timetable_id }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllLessons_SlotsForLookupTable'
    abp.services.app.timeTable_Slot.getAllLessons_SlotsForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TimeTable_Slot/GetAllLessons_SlotsForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'advFilter', value: input.advFilter }, { name: 'timetable_id', value: input.timetable_id }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByDepart'
    abp.services.app.timeTable_Slot.getAllByDepart = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TimeTable_Slot/GetAllByDepart' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'dayFilter', value: input.dayFilter }, { name: 'timetableNameFilter', value: input.timetableNameFilter }, { name: 'timetableEmployNoFilter', value: input.timetableEmployNoFilter }, { name: 'timetablePaperSize', value: input.timetablePaperSize }, { name: 'timetableRoomsNameFilter', value: input.timetableRoomsNameFilter }, { name: 'groupnamesFilter', value: input.groupnamesFilter }, { name: 'individualCheckFilter', value: input.individualCheckFilter }, { name: 'showDepartmentProgrammesOnly', value: input.showDepartmentProgrammesOnly }, { name: 'lessons_SlotsNameFilter', value: input.lessons_SlotsNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTimeTable_SlotForViewByDepart'
    abp.services.app.timeTable_Slot.getTimeTable_SlotForViewByDepart = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TimeTable_Slot/GetTimeTable_SlotForViewByDepart' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTimeTable_SlotForEditByDepart'
    abp.services.app.timeTable_Slot.getTimeTable_SlotForEditByDepart = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TimeTable_Slot/GetTimeTable_SlotForEditByDepart' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEditByDepart'
    abp.services.app.timeTable_Slot.createOrEditByDepart = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TimeTable_Slot/CreateOrEditByDepart',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'deleteByDepart'
    abp.services.app.timeTable_Slot.deleteByDepart = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TimeTable_Slot/DeleteByDepart' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getTimeTable_SlotToExcelByDepart'
    abp.services.app.timeTable_Slot.getTimeTable_SlotToExcelByDepart = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TimeTable_Slot/GetTimeTable_SlotToExcelByDepart' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'dayFilter', value: input.dayFilter }, { name: 'timetableNameFilter', value: input.timetableNameFilter }, { name: 'timetableRoomsNameFilter', value: input.timetableRoomsNameFilter }, { name: 'groupnamesFilter', value: input.groupnamesFilter }, { name: 'lessons_SlotsNameFilter', value: input.lessons_SlotsNameFilter }, { name: 'timetableEmployNoFilter', value: input.timetableEmployNoFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByUser'
    abp.services.app.timeTable_Slot.getAllByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TimeTable_Slot/GetAllByUser' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'dayFilter', value: input.dayFilter }, { name: 'timetableNameFilter', value: input.timetableNameFilter }, { name: 'timetableEmployNoFilter', value: input.timetableEmployNoFilter }, { name: 'timetablePaperSize', value: input.timetablePaperSize }, { name: 'timetableRoomsNameFilter', value: input.timetableRoomsNameFilter }, { name: 'groupnamesFilter', value: input.groupnamesFilter }, { name: 'individualCheckFilter', value: input.individualCheckFilter }, { name: 'showDepartmentProgrammesOnly', value: input.showDepartmentProgrammesOnly }, { name: 'lessons_SlotsNameFilter', value: input.lessons_SlotsNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'timetables'
  (function(){

    abp.services.app.timetables = abp.services.app.timetables || {};

    // action 'getAll'
    abp.services.app.timetables.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'termFilter', value: input.termFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTimetableForView'
    abp.services.app.timetables.getTimetableForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/GetTimetableForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTimetableForEdit'
    abp.services.app.timetables.getTimetableForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/GetTimetableForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.timetables.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.timetables['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getTimetablesToExcel'
    abp.services.app.timetables.getTimetablesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/GetTimetablesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByDepart'
    abp.services.app.timetables.getAllByDepart = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/GetAllByDepart' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'termFilter', value: input.termFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTimetableForViewByDepart'
    abp.services.app.timetables.getTimetableForViewByDepart = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/GetTimetableForViewByDepart' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTimetableSummaryReport'
    abp.services.app.timetables.getTimetableSummaryReport = function(timetableId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/GetTimetableSummaryReport' + abp.utils.buildQueryString([{ name: 'timetableId', value: timetableId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTimetableForEditByDepart'
    abp.services.app.timetables.getTimetableForEditByDepart = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/GetTimetableForEditByDepart' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEditByDepart'
    abp.services.app.timetables.createOrEditByDepart = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/CreateOrEditByDepart',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'deleteByDepart'
    abp.services.app.timetables.deleteByDepart = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/DeleteByDepart' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'submitTimetable'
    abp.services.app.timetables.submitTimetable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/SubmitTimetable',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getDepartmentTimetable'
    abp.services.app.timetables.getDepartmentTimetable = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/GetDepartmentTimetable' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getDepartmentByTimetable'
    abp.services.app.timetables.getDepartmentByTimetable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/GetDepartmentByTimetable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'dayFilter', value: input.dayFilter }, { name: 'timetableNameFilter', value: input.timetableNameFilter }, { name: 'timetableEmployNoFilter', value: input.timetableEmployNoFilter }, { name: 'timetablePaperSize', value: input.timetablePaperSize }, { name: 'timetableRoomsNameFilter', value: input.timetableRoomsNameFilter }, { name: 'groupnamesFilter', value: input.groupnamesFilter }, { name: 'individualCheckFilter', value: input.individualCheckFilter }, { name: 'showDepartmentProgrammesOnly', value: input.showDepartmentProgrammesOnly }, { name: 'lessons_SlotsNameFilter', value: input.lessons_SlotsNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getDepartmentTimetableForExport'
    abp.services.app.timetables.getDepartmentTimetableForExport = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/GetDepartmentTimetableForExport' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'dayFilter', value: input.dayFilter }, { name: 'timetableNameFilter', value: input.timetableNameFilter }, { name: 'timetableEmployNoFilter', value: input.timetableEmployNoFilter }, { name: 'timetablePaperSize', value: input.timetablePaperSize }, { name: 'timetableRoomsNameFilter', value: input.timetableRoomsNameFilter }, { name: 'groupnamesFilter', value: input.groupnamesFilter }, { name: 'individualCheckFilter', value: input.individualCheckFilter }, { name: 'showDepartmentProgrammesOnly', value: input.showDepartmentProgrammesOnly }, { name: 'lessons_SlotsNameFilter', value: input.lessons_SlotsNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getMasterTimetable'
    abp.services.app.timetables.getMasterTimetable = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/GetMasterTimetable',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getMasterTimetableAdvance'
    abp.services.app.timetables.getMasterTimetableAdvance = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/GetMasterTimetableAdvance' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'dayFilter', value: input.dayFilter }, { name: 'timetableNameFilter', value: input.timetableNameFilter }, { name: 'timetableEmployNoFilter', value: input.timetableEmployNoFilter }, { name: 'timetablePaperSize', value: input.timetablePaperSize }, { name: 'timetableRoomsNameFilter', value: input.timetableRoomsNameFilter }, { name: 'groupnamesFilter', value: input.groupnamesFilter }, { name: 'individualCheckFilter', value: input.individualCheckFilter }, { name: 'showDepartmentProgrammesOnly', value: input.showDepartmentProgrammesOnly }, { name: 'lessons_SlotsNameFilter', value: input.lessons_SlotsNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getUserTimetable'
    abp.services.app.timetables.getUserTimetable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/GetUserTimetable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'dayFilter', value: input.dayFilter }, { name: 'timetableNameFilter', value: input.timetableNameFilter }, { name: 'timetableEmployNoFilter', value: input.timetableEmployNoFilter }, { name: 'timetablePaperSize', value: input.timetablePaperSize }, { name: 'timetableRoomsNameFilter', value: input.timetableRoomsNameFilter }, { name: 'groupnamesFilter', value: input.groupnamesFilter }, { name: 'individualCheckFilter', value: input.individualCheckFilter }, { name: 'showDepartmentProgrammesOnly', value: input.showDepartmentProgrammesOnly }, { name: 'lessons_SlotsNameFilter', value: input.lessons_SlotsNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCourseTimetable'
    abp.services.app.timetables.getCourseTimetable = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/GetCourseTimetable' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getClassTimetable'
    abp.services.app.timetables.getClassTimetable = function(classId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/GetClassTimetable' + abp.utils.buildQueryString([{ name: 'classId', value: classId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'requestAmendTimetable'
    abp.services.app.timetables.requestAmendTimetable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/RequestAmendTimetable',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'approveTimetable'
    abp.services.app.timetables.approveTimetable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/ApproveTimetable',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'cancelTimetable'
    abp.services.app.timetables.cancelTimetable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/CancelTimetable',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'grantReviewTimetable'
    abp.services.app.timetables.grantReviewTimetable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/GrantReviewTimetable',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'regenerateTimetable'
    abp.services.app.timetables.regenerateTimetable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/RegenerateTimetable',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getTimetablesToExcelByDepart'
    abp.services.app.timetables.getTimetablesToExcelByDepart = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/GetTimetablesToExcelByDepart' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getDepartmentList'
    abp.services.app.timetables.getDepartmentList = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/GetDepartmentList',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGenerateTimetables'
    abp.services.app.timetables.getGenerateTimetables = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/GetGenerateTimetables',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'autoGenerateTimetables'
    abp.services.app.timetables.autoGenerateTimetables = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Timetables/AutoGenerateTimetables',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'timetableRooms'
  (function(){

    abp.services.app.timetableRooms = abp.services.app.timetableRooms || {};

    // action 'getAll'
    abp.services.app.timetableRooms.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TimetableRooms/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'locationFilter', value: input.locationFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTimetableRoomsForView'
    abp.services.app.timetableRooms.getTimetableRoomsForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TimetableRooms/GetTimetableRoomsForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTimetableRoomsForEdit'
    abp.services.app.timetableRooms.getTimetableRoomsForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TimetableRooms/GetTimetableRoomsForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.timetableRooms.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TimetableRooms/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.timetableRooms['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TimetableRooms/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getTimetableRoomsToExcel'
    abp.services.app.timetableRooms.getTimetableRoomsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TimetableRooms/GetTimetableRoomsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'locationFilter', value: input.locationFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllSubjectForLookupTable'
    abp.services.app.timetableRooms.getAllSubjectForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TimetableRooms/GetAllSubjectForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'lessons_Slots'
  (function(){

    abp.services.app.lessons_Slots = abp.services.app.lessons_Slots || {};

    // action 'getAll'
    abp.services.app.lessons_Slots.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Lessons_Slots/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLessons_SlotsForView'
    abp.services.app.lessons_Slots.getLessons_SlotsForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Lessons_Slots/GetLessons_SlotsForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLessons_SlotsForEdit'
    abp.services.app.lessons_Slots.getLessons_SlotsForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Lessons_Slots/GetLessons_SlotsForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.lessons_Slots.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Lessons_Slots/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.lessons_Slots['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Lessons_Slots/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getLessons_SlotsToExcel'
    abp.services.app.lessons_Slots.getLessons_SlotsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Lessons_Slots/GetLessons_SlotsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'test69s'
  (function(){

    abp.services.app.test69s = abp.services.app.test69s || {};

    // action 'getAll'
    abp.services.app.test69s.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Test69s/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'itemAwardListSupRefFilter', value: input.itemAwardListSupRefFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTest69ForEdit'
    abp.services.app.test69s.getTest69ForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Test69s/GetTest69ForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.test69s.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Test69s/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.test69s['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Test69s/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAllItemAwardListForLookupTable'
    abp.services.app.test69s.getAllItemAwardListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Test69s/GetAllItemAwardListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'guestDashboard'
  (function(){

    abp.services.app.guestDashboard = abp.services.app.guestDashboard || {};

    // action 'getMemberActivity'
    abp.services.app.guestDashboard.getMemberActivity = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GuestDashboard/GetMemberActivity',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getDashboardData'
    abp.services.app.guestDashboard.getDashboardData = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GuestDashboard/GetDashboardData' + abp.utils.buildQueryString([{ name: 'salesSummaryDatePeriod', value: input.salesSummaryDatePeriod }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTopStats'
    abp.services.app.guestDashboard.getTopStats = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GuestDashboard/GetTopStats',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getProfitShare'
    abp.services.app.guestDashboard.getProfitShare = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GuestDashboard/GetProfitShare',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getDailySales'
    abp.services.app.guestDashboard.getDailySales = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GuestDashboard/GetDailySales',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSalesSummary'
    abp.services.app.guestDashboard.getSalesSummary = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GuestDashboard/GetSalesSummary' + abp.utils.buildQueryString([{ name: 'salesSummaryDatePeriod', value: input.salesSummaryDatePeriod }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getRegionalStats'
    abp.services.app.guestDashboard.getRegionalStats = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GuestDashboard/GetRegionalStats',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGeneralStats'
    abp.services.app.guestDashboard.getGeneralStats = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GuestDashboard/GetGeneralStats',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'lecturerDashboard'
  (function(){

    abp.services.app.lecturerDashboard = abp.services.app.lecturerDashboard || {};

    // action 'getMemberActivity'
    abp.services.app.lecturerDashboard.getMemberActivity = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LecturerDashboard/GetMemberActivity',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getDashboardData'
    abp.services.app.lecturerDashboard.getDashboardData = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LecturerDashboard/GetDashboardData' + abp.utils.buildQueryString([{ name: 'salesSummaryDatePeriod', value: input.salesSummaryDatePeriod }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTopStats'
    abp.services.app.lecturerDashboard.getTopStats = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LecturerDashboard/GetTopStats',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFleetTopStats'
    abp.services.app.lecturerDashboard.getFleetTopStats = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LecturerDashboard/GetFleetTopStats',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getProfitShare'
    abp.services.app.lecturerDashboard.getProfitShare = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LecturerDashboard/GetProfitShare',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getDailySales'
    abp.services.app.lecturerDashboard.getDailySales = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LecturerDashboard/GetDailySales',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSalesSummary'
    abp.services.app.lecturerDashboard.getSalesSummary = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LecturerDashboard/GetSalesSummary' + abp.utils.buildQueryString([{ name: 'salesSummaryDatePeriod', value: input.salesSummaryDatePeriod }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getRegionalStats'
    abp.services.app.lecturerDashboard.getRegionalStats = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LecturerDashboard/GetRegionalStats',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGeneralStats'
    abp.services.app.lecturerDashboard.getGeneralStats = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LecturerDashboard/GetGeneralStats',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'studentDashboard'
  (function(){

    abp.services.app.studentDashboard = abp.services.app.studentDashboard || {};

    // action 'getMemberActivity'
    abp.services.app.studentDashboard.getMemberActivity = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDashboard/GetMemberActivity',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getDashboardData'
    abp.services.app.studentDashboard.getDashboardData = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDashboard/GetDashboardData' + abp.utils.buildQueryString([{ name: 'salesSummaryDatePeriod', value: input.salesSummaryDatePeriod }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTopStats'
    abp.services.app.studentDashboard.getTopStats = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDashboard/GetTopStats',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'canApplyGraduationOnline'
    abp.services.app.studentDashboard.canApplyGraduationOnline = function(currentUserNo, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDashboard/CanApplyGraduationOnline' + abp.utils.buildQueryString([{ name: 'currentUserNo', value: currentUserNo }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getFeePaymentsProgressStats'
    abp.services.app.studentDashboard.getFeePaymentsProgressStats = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDashboard/GetFeePaymentsProgressStats',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAcademicProgressStats'
    abp.services.app.studentDashboard.getAcademicProgressStats = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDashboard/GetAcademicProgressStats',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getProfitShare'
    abp.services.app.studentDashboard.getProfitShare = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDashboard/GetProfitShare',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getDailySales'
    abp.services.app.studentDashboard.getDailySales = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDashboard/GetDailySales',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSalesSummary'
    abp.services.app.studentDashboard.getSalesSummary = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDashboard/GetSalesSummary' + abp.utils.buildQueryString([{ name: 'salesSummaryDatePeriod', value: input.salesSummaryDatePeriod }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getRegionalStats'
    abp.services.app.studentDashboard.getRegionalStats = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDashboard/GetRegionalStats',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGeneralStats'
    abp.services.app.studentDashboard.getGeneralStats = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDashboard/GetGeneralStats',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'tenantDashboard'
  (function(){

    abp.services.app.tenantDashboard = abp.services.app.tenantDashboard || {};

    // action 'getMemberActivity'
    abp.services.app.tenantDashboard.getMemberActivity = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantDashboard/GetMemberActivity',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getDashboardData'
    abp.services.app.tenantDashboard.getDashboardData = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantDashboard/GetDashboardData' + abp.utils.buildQueryString([{ name: 'salesSummaryDatePeriod', value: input.salesSummaryDatePeriod }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTopStats'
    abp.services.app.tenantDashboard.getTopStats = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantDashboard/GetTopStats',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getProfitShare'
    abp.services.app.tenantDashboard.getProfitShare = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantDashboard/GetProfitShare',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getDailySales'
    abp.services.app.tenantDashboard.getDailySales = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantDashboard/GetDailySales',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSalesSummary'
    abp.services.app.tenantDashboard.getSalesSummary = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantDashboard/GetSalesSummary' + abp.utils.buildQueryString([{ name: 'salesSummaryDatePeriod', value: input.salesSummaryDatePeriod }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getRegionalStats'
    abp.services.app.tenantDashboard.getRegionalStats = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantDashboard/GetRegionalStats',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGeneralStats'
    abp.services.app.tenantDashboard.getGeneralStats = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantDashboard/GetGeneralStats',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'surveyLists'
  (function(){

    abp.services.app.surveyLists = abp.services.app.surveyLists || {};

    // action 'getAll'
    abp.services.app.surveyLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SurveyLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'isActiveFilter', value: input.isActiveFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSurveyListForView'
    abp.services.app.surveyLists.getSurveyListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SurveyLists/GetSurveyListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSurveyListForViewByUser'
    abp.services.app.surveyLists.getSurveyListForViewByUser = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SurveyLists/GetSurveyListForViewByUser',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSurveyListForEdit'
    abp.services.app.surveyLists.getSurveyListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SurveyLists/GetSurveyListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.surveyLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SurveyLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.surveyLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SurveyLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'studentSurveyLists'
  (function(){

    abp.services.app.studentSurveyLists = abp.services.app.studentSurveyLists || {};

    // action 'getAll'
    abp.services.app.studentSurveyLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentSurveyLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'termFilter', value: input.termFilter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'unitIdFilter', value: input.unitIdFilter }, { name: 'admNoFilter', value: input.admNoFilter }, { name: 'surveyListnameFilter', value: input.surveyListnameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentSurveyListForView'
    abp.services.app.studentSurveyLists.getStudentSurveyListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentSurveyLists/GetStudentSurveyListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentSurveyListForEdit'
    abp.services.app.studentSurveyLists.getStudentSurveyListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentSurveyLists/GetStudentSurveyListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.studentSurveyLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentSurveyLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'createByUser'
    abp.services.app.studentSurveyLists.createByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentSurveyLists/CreateByUser',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.studentSurveyLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentSurveyLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAllSurveyListForLookupTable'
    abp.services.app.studentSurveyLists.getAllSurveyListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentSurveyLists/GetAllSurveyListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'studentReportingLists'
  (function(){

    abp.services.app.studentReportingLists = abp.services.app.studentReportingLists || {};

    // action 'getAll'
    abp.services.app.studentReportingLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentReportingLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'termFilter', value: input.termFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByStudentByTerm'
    abp.services.app.studentReportingLists.getAllByStudentByTerm = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentReportingLists/GetAllByStudentByTerm' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'termFilter', value: input.termFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentReportingListForView'
    abp.services.app.studentReportingLists.getStudentReportingListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentReportingLists/GetStudentReportingListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentReportingListForViewByStudent'
    abp.services.app.studentReportingLists.getStudentReportingListForViewByStudent = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentReportingLists/GetStudentReportingListForViewByStudent' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentReportingListForEdit'
    abp.services.app.studentReportingLists.getStudentReportingListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentReportingLists/GetStudentReportingListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentReportingListForEditByStudent'
    abp.services.app.studentReportingLists.getStudentReportingListForEditByStudent = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentReportingLists/GetStudentReportingListForEditByStudent' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'studentReport'
    abp.services.app.studentReportingLists.studentReport = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentReportingLists/studentReport',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.studentReportingLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentReportingLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'reportingApproval'
    abp.services.app.studentReportingLists.reportingApproval = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentReportingLists/ReportingApproval',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.studentReportingLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentReportingLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getStudentReportingListsToExcel'
    abp.services.app.studentReportingLists.getStudentReportingListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentReportingLists/GetStudentReportingListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'termFilter', value: input.termFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllStudentReportingListForLookupTable'
    abp.services.app.studentReportingLists.getAllStudentReportingListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentReportingLists/GetAllStudentReportingListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'studentFormLists'
  (function(){

    abp.services.app.studentFormLists = abp.services.app.studentFormLists || {};

    // action 'getAll'
    abp.services.app.studentFormLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentFormLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'userNameFilter', value: input.userNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByUser'
    abp.services.app.studentFormLists.getAllByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentFormLists/GetAllByUser' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'userNameFilter', value: input.userNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentFormListForViewByUser'
    abp.services.app.studentFormLists.getStudentFormListForViewByUser = function(formName, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentFormLists/GetStudentFormListForViewByUser' + abp.utils.buildQueryString([{ name: 'formName', value: formName }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentFormListForView'
    abp.services.app.studentFormLists.getStudentFormListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentFormLists/GetStudentFormListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentFormListForEdit'
    abp.services.app.studentFormLists.getStudentFormListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentFormLists/GetStudentFormListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.studentFormLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentFormLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.studentFormLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentFormLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAllUserForTableDropdown'
    abp.services.app.studentFormLists.getAllUserForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentFormLists/GetAllUserForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'studentEvaluationLists'
  (function(){

    abp.services.app.studentEvaluationLists = abp.services.app.studentEvaluationLists || {};

    // action 'getAll'
    abp.services.app.studentEvaluationLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentEvaluationLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'userNameFilter', value: input.userNameFilter }, { name: 'surveyListnameFilter', value: input.surveyListnameFilter }, { name: 'studentSubjectDetailSubjectFilter', value: input.studentSubjectDetailSubjectFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentEvaluationListForView'
    abp.services.app.studentEvaluationLists.getStudentEvaluationListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentEvaluationLists/GetStudentEvaluationListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentEvaluationListForEdit'
    abp.services.app.studentEvaluationLists.getStudentEvaluationListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentEvaluationLists/GetStudentEvaluationListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.studentEvaluationLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentEvaluationLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.studentEvaluationLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentEvaluationLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getStudentEvaluationListsToExcel'
    abp.services.app.studentEvaluationLists.getStudentEvaluationListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentEvaluationLists/GetStudentEvaluationListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'userNameFilter', value: input.userNameFilter }, { name: 'surveyListnameFilter', value: input.surveyListnameFilter }, { name: 'studentSubjectDetailSubjectFilter', value: input.studentSubjectDetailSubjectFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllUserForTableDropdown'
    abp.services.app.studentEvaluationLists.getAllUserForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentEvaluationLists/GetAllUserForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllSurveyListForTableDropdown'
    abp.services.app.studentEvaluationLists.getAllSurveyListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentEvaluationLists/GetAllSurveyListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllStudentSubjectDetailForTableDropdown'
    abp.services.app.studentEvaluationLists.getAllStudentSubjectDetailForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentEvaluationLists/GetAllStudentSubjectDetailForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'studentDepartmentClearanceLists'
  (function(){

    abp.services.app.studentDepartmentClearanceLists = abp.services.app.studentDepartmentClearanceLists || {};

    // action 'getAll'
    abp.services.app.studentDepartmentClearanceLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDepartmentClearanceLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'studentClearanceListNotesFilter', value: input.studentClearanceListNotesFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentDepartmentClearanceListForView'
    abp.services.app.studentDepartmentClearanceLists.getStudentDepartmentClearanceListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDepartmentClearanceLists/GetStudentDepartmentClearanceListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentDepartmentClearanceListForEdit'
    abp.services.app.studentDepartmentClearanceLists.getStudentDepartmentClearanceListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDepartmentClearanceLists/GetStudentDepartmentClearanceListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.studentDepartmentClearanceLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDepartmentClearanceLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.studentDepartmentClearanceLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDepartmentClearanceLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAllStudentClearanceListForTableDropdown'
    abp.services.app.studentDepartmentClearanceLists.getAllStudentClearanceListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDepartmentClearanceLists/GetAllStudentClearanceListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'studentClearanceLists'
  (function(){

    abp.services.app.studentClearanceLists = abp.services.app.studentClearanceLists || {};

    // action 'getAll'
    abp.services.app.studentClearanceLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentClearanceLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'userNameFilter', value: input.userNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentClearanceListForView'
    abp.services.app.studentClearanceLists.getStudentClearanceListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentClearanceLists/GetStudentClearanceListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentClearanceListForEdit'
    abp.services.app.studentClearanceLists.getStudentClearanceListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentClearanceLists/GetStudentClearanceListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.studentClearanceLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentClearanceLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.studentClearanceLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentClearanceLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getStudentClearanceListsToExcel'
    abp.services.app.studentClearanceLists.getStudentClearanceListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentClearanceLists/GetStudentClearanceListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'userNameFilter', value: input.userNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllUserForLookupTable'
    abp.services.app.studentClearanceLists.getAllUserForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentClearanceLists/GetAllUserForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByUser'
    abp.services.app.studentClearanceLists.getAllByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentClearanceLists/GetAllByUser' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'userNameFilter', value: input.userNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentClearanceListForViewByUser'
    abp.services.app.studentClearanceLists.getStudentClearanceListForViewByUser = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentClearanceLists/GetStudentClearanceListForViewByUser' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentClearanceListForEditByUser'
    abp.services.app.studentClearanceLists.getStudentClearanceListForEditByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentClearanceLists/GetStudentClearanceListForEditByUser' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEditByUser'
    abp.services.app.studentClearanceLists.createOrEditByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentClearanceLists/CreateOrEditByUser',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'deleteByUser'
    abp.services.app.studentClearanceLists.deleteByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentClearanceLists/DeleteByUser' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAllByDepartment'
    abp.services.app.studentClearanceLists.getAllByDepartment = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentClearanceLists/GetAllByDepartment' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'userNameFilter', value: input.userNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentClearanceListForViewByDepartment'
    abp.services.app.studentClearanceLists.getStudentClearanceListForViewByDepartment = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentClearanceLists/GetStudentClearanceListForViewByDepartment' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentClearanceListForEditByDepartment'
    abp.services.app.studentClearanceLists.getStudentClearanceListForEditByDepartment = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentClearanceLists/GetStudentClearanceListForEditByDepartment' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEditByDepartment'
    abp.services.app.studentClearanceLists.createOrEditByDepartment = function(data, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentClearanceLists/CreateOrEditByDepartment',
        type: 'POST',
        data: JSON.stringify(data)
      }, ajaxParams));;
    };

  })();

  // controller 'userSupplementaryClearanceLists'
  (function(){

    abp.services.app.userSupplementaryClearanceLists = abp.services.app.userSupplementaryClearanceLists || {};

    // action 'getAll'
    abp.services.app.userSupplementaryClearanceLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserSupplementaryClearanceLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'studentClearanceListNotesFilter', value: input.studentClearanceListNotesFilter }, { name: 'supplementaryClearanceListNameFilter', value: input.supplementaryClearanceListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getUserSupplementaryClearanceListForEdit'
    abp.services.app.userSupplementaryClearanceLists.getUserSupplementaryClearanceListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserSupplementaryClearanceLists/GetUserSupplementaryClearanceListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.userSupplementaryClearanceLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserSupplementaryClearanceLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.userSupplementaryClearanceLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserSupplementaryClearanceLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAllStudentClearanceListForLookupTable'
    abp.services.app.userSupplementaryClearanceLists.getAllStudentClearanceListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserSupplementaryClearanceLists/GetAllStudentClearanceListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllSupplementaryClearanceListForLookupTable'
    abp.services.app.userSupplementaryClearanceLists.getAllSupplementaryClearanceListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserSupplementaryClearanceLists/GetAllSupplementaryClearanceListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'supplementaryClearanceLists'
  (function(){

    abp.services.app.supplementaryClearanceLists = abp.services.app.supplementaryClearanceLists || {};

    // action 'getAll'
    abp.services.app.supplementaryClearanceLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SupplementaryClearanceLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'categoryFilter', value: input.categoryFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSupplementaryClearanceListForView'
    abp.services.app.supplementaryClearanceLists.getSupplementaryClearanceListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SupplementaryClearanceLists/GetSupplementaryClearanceListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSupplementaryClearanceListForEdit'
    abp.services.app.supplementaryClearanceLists.getSupplementaryClearanceListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SupplementaryClearanceLists/GetSupplementaryClearanceListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.supplementaryClearanceLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SupplementaryClearanceLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.supplementaryClearanceLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SupplementaryClearanceLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'studentAssignmentLists'
  (function(){

    abp.services.app.studentAssignmentLists = abp.services.app.studentAssignmentLists || {};

    // action 'getAll'
    abp.services.app.studentAssignmentLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAssignmentLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'assignmentListTitleFilter', value: input.assignmentListTitleFilter }, { name: 'userNameFilter', value: input.userNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentAssignmentListForView'
    abp.services.app.studentAssignmentLists.getStudentAssignmentListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAssignmentLists/GetStudentAssignmentListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentAssignmentListForEdit'
    abp.services.app.studentAssignmentLists.getStudentAssignmentListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAssignmentLists/GetStudentAssignmentListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentAssignmentListForEditByStudent'
    abp.services.app.studentAssignmentLists.getStudentAssignmentListForEditByStudent = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAssignmentLists/GetStudentAssignmentListForEditByStudent' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentAssignmentForStudentByAssignment'
    abp.services.app.studentAssignmentLists.getStudentAssignmentForStudentByAssignment = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAssignmentLists/GetStudentAssignmentForStudentByAssignment' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.studentAssignmentLists.createOrEdit = function(input, if_new, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAssignmentLists/CreateOrEdit' + abp.utils.buildQueryString([{ name: 'if_new', value: if_new }]) + '',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'activateResubmit'
    abp.services.app.studentAssignmentLists.activateResubmit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAssignmentLists/ActivateResubmit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'submitByUser'
    abp.services.app.studentAssignmentLists.submitByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAssignmentLists/SubmitByUser',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.studentAssignmentLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAssignmentLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getStudentAssignmentListsToExcelByAdmin'
    abp.services.app.studentAssignmentLists.getStudentAssignmentListsToExcelByAdmin = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAssignmentLists/GetStudentAssignmentListsToExcelByAdmin' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'assignmentListTitleFilter', value: input.assignmentListTitleFilter }, { name: 'userNameFilter', value: input.userNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentAssignmentListsToExcel'
    abp.services.app.studentAssignmentLists.getStudentAssignmentListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAssignmentLists/GetStudentAssignmentListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'assignmentListTitleFilter', value: input.assignmentListTitleFilter }, { name: 'userNameFilter', value: input.userNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllAssignmentListForTableDropdown'
    abp.services.app.studentAssignmentLists.getAllAssignmentListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAssignmentLists/GetAllAssignmentListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllUserForTableDropdown'
    abp.services.app.studentAssignmentLists.getAllUserForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAssignmentLists/GetAllUserForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByLecturer'
    abp.services.app.studentAssignmentLists.getAllByLecturer = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAssignmentLists/GetAllByLecturer' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'assignmentListTitleFilter', value: input.assignmentListTitleFilter }, { name: 'userNameFilter', value: input.userNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllNotSubmittedByLecturer'
    abp.services.app.studentAssignmentLists.getAllNotSubmittedByLecturer = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAssignmentLists/GetAllNotSubmittedByLecturer' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'maxCreationTimeFilter', value: input.maxCreationTimeFilter }, { name: 'minCreationTimeFilter', value: input.minCreationTimeFilter }, { name: 'groupChatListNameFilter', value: input.groupChatListNameFilter }, { name: 'userNameFilter', value: input.userNameFilter }, { name: 'groupChatListIdFilter', value: input.groupChatListIdFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentAssignmentListForViewByLecturer'
    abp.services.app.studentAssignmentLists.getStudentAssignmentListForViewByLecturer = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAssignmentLists/GetStudentAssignmentListForViewByLecturer' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentAssignmentListForViewByLecturerByUserId'
    abp.services.app.studentAssignmentLists.getStudentAssignmentListForViewByLecturerByUserId = function(userId, assignedId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAssignmentLists/GetStudentAssignmentListForViewByLecturerByUserId' + abp.utils.buildQueryString([{ name: 'userId', value: userId }, { name: 'assignedId', value: assignedId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEditByUser'
    abp.services.app.studentAssignmentLists.createOrEditByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAssignmentLists/CreateOrEditByUser',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

  })();

  // controller 'applicationFileLists'
  (function(){

    abp.services.app.applicationFileLists = abp.services.app.applicationFileLists || {};

    // action 'getAll'
    abp.services.app.applicationFileLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicationFileLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'featureFilter', value: input.featureFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByUser'
    abp.services.app.applicationFileLists.getAllByUser = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicationFileLists/GetAllByUser',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getApplicationFileListForView'
    abp.services.app.applicationFileLists.getApplicationFileListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicationFileLists/GetApplicationFileListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getApplicationFileListForEdit'
    abp.services.app.applicationFileLists.getApplicationFileListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicationFileLists/GetApplicationFileListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.applicationFileLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicationFileLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.applicationFileLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicationFileLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'applicationLists'
  (function(){

    abp.services.app.applicationLists = abp.services.app.applicationLists || {};

    // action 'getAll'
    abp.services.app.applicationLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicationLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'namesFilter', value: input.namesFilter }, { name: 'nationalIDFilter', value: input.nationalIDFilter }, { name: 'ybirthFilter', value: input.ybirthFilter }, { name: 'genderFilter', value: input.genderFilter }, { name: 'countyFilter', value: input.countyFilter }, { name: 'studTypeFilter', value: input.studTypeFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'paymentFilter', value: input.paymentFilter }, { name: 'placementCategoryFilter', value: input.placementCategoryFilter }, { name: 'startDate', value: input.startDate }, { name: 'endDate', value: input.endDate }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByUser'
    abp.services.app.applicationLists.getAllByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicationLists/GetAllByUser' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'namesFilter', value: input.namesFilter }, { name: 'nationalIDFilter', value: input.nationalIDFilter }, { name: 'ybirthFilter', value: input.ybirthFilter }, { name: 'genderFilter', value: input.genderFilter }, { name: 'countyFilter', value: input.countyFilter }, { name: 'studTypeFilter', value: input.studTypeFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'paymentFilter', value: input.paymentFilter }, { name: 'placementCategoryFilter', value: input.placementCategoryFilter }, { name: 'startDate', value: input.startDate }, { name: 'endDate', value: input.endDate }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getApplicationListForView'
    abp.services.app.applicationLists.getApplicationListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicationLists/GetApplicationListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getApplicationListForViewByUser'
    abp.services.app.applicationLists.getApplicationListForViewByUser = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicationLists/GetApplicationListForViewByUser' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getApplicationListForEdit'
    abp.services.app.applicationLists.getApplicationListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicationLists/GetApplicationListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.applicationLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicationLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'checkApplicationIfPaid'
    abp.services.app.applicationLists.checkApplicationIfPaid = function(refCode, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicationLists/CheckApplicationIfPaid' + abp.utils.buildQueryString([{ name: 'refCode', value: refCode }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getApplicationListForViewByStudent'
    abp.services.app.applicationLists.getApplicationListForViewByStudent = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicationLists/GetApplicationListForViewByStudent' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getApplicationListForViewByRef'
    abp.services.app.applicationLists.getApplicationListForViewByRef = function(refCode, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicationLists/GetApplicationListForViewByRef' + abp.utils.buildQueryString([{ name: 'refCode', value: refCode }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'approve'
    abp.services.app.applicationLists.approve = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicationLists/Approve',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'cancel'
    abp.services.app.applicationLists.cancel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicationLists/Cancel',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'mailApplication'
    abp.services.app.applicationLists.mailApplication = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicationLists/MailApplication',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'completeApplicationByStudent'
    abp.services.app.applicationLists.completeApplicationByStudent = function(refID, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicationLists/CompleteApplicationByStudent' + abp.utils.buildQueryString([{ name: 'refID', value: refID }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getAllById'
    abp.services.app.applicationLists.getAllById = function(searchText, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicationLists/GetAllById' + abp.utils.buildQueryString([{ name: 'searchText', value: searchText }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'webCreate'
    abp.services.app.applicationLists.webCreate = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicationLists/WebCreate',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'processApplicationPayment'
    abp.services.app.applicationLists.processApplicationPayment = function(refCode, paymentId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicationLists/ProcessApplicationPayment' + abp.utils.buildQueryString([{ name: 'refCode', value: refCode }, { name: 'paymentId', value: paymentId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.applicationLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicationLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'deleteByUser'
    abp.services.app.applicationLists.deleteByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicationLists/DeleteByUser' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'sendMuiltipleApplicantEmail'
    abp.services.app.applicationLists.sendMuiltipleApplicantEmail = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicationLists/SendMuiltipleApplicantEmail',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getApplicationListsToExcel'
    abp.services.app.applicationLists.getApplicationListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicationLists/GetApplicationListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'namesFilter', value: input.namesFilter }, { name: 'nationalIDFilter', value: input.nationalIDFilter }, { name: 'ybirthFilter', value: input.ybirthFilter }, { name: 'genderFilter', value: input.genderFilter }, { name: 'countyFilter', value: input.countyFilter }, { name: 'studTypeFilter', value: input.studTypeFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'startDate', value: input.startDate }, { name: 'endDate', value: input.endDate }, { name: 'paymentFilter', value: input.paymentFilter }, { name: 'placementCategoryFilter', value: input.placementCategoryFilter }, { name: 'selectedItemsFilter', value: input.selectedItemsFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'randomGenerator'
  (function(){

    abp.services.app.randomGenerator = abp.services.app.randomGenerator || {};

    // action 'randomNumber'
    abp.services.app.randomGenerator.randomNumber = function(min, max, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/RandomGenerator/RandomNumber' + abp.utils.buildQueryString([{ name: 'min', value: min }, { name: 'max', value: max }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'randomString'
    abp.services.app.randomGenerator.randomString = function(size, lowerCase, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/RandomGenerator/RandomString' + abp.utils.buildQueryString([{ name: 'size', value: size }, { name: 'lowerCase', value: lowerCase }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'randomPassword'
    abp.services.app.randomGenerator.randomPassword = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/RandomGenerator/RandomPassword',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'randomAppointmentNumber'
    abp.services.app.randomGenerator.randomAppointmentNumber = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/RandomGenerator/RandomAppointmentNumber',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'generateUserName'
    abp.services.app.randomGenerator.generateUserName = function(len, prefixName, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/RandomGenerator/GenerateUserName' + abp.utils.buildQueryString([{ name: 'len', value: len }, { name: 'prefixName', value: prefixName }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'workHistoryLists'
  (function(){

    abp.services.app.workHistoryLists = abp.services.app.workHistoryLists || {};

    // action 'getAll'
    abp.services.app.workHistoryLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkHistoryLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'designationFilter', value: input.designationFilter }, { name: 'employerFilter', value: input.employerFilter }, { name: 'applicantProfileListFirstNameFilter', value: input.applicantProfileListFirstNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getWorkHistoryListForView'
    abp.services.app.workHistoryLists.getWorkHistoryListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkHistoryLists/GetWorkHistoryListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getWorkHistoryListForEdit'
    abp.services.app.workHistoryLists.getWorkHistoryListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkHistoryLists/GetWorkHistoryListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.workHistoryLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkHistoryLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.workHistoryLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkHistoryLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getWorkHistoryListsToExcel'
    abp.services.app.workHistoryLists.getWorkHistoryListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkHistoryLists/GetWorkHistoryListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'designationFilter', value: input.designationFilter }, { name: 'employerFilter', value: input.employerFilter }, { name: 'applicantProfileListFirstNameFilter', value: input.applicantProfileListFirstNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'templateLists'
  (function(){

    abp.services.app.templateLists = abp.services.app.templateLists || {};

    // action 'getAll'
    abp.services.app.templateLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TemplateLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTemplateListForView'
    abp.services.app.templateLists.getTemplateListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TemplateLists/GetTemplateListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTemplateListForViewByUser'
    abp.services.app.templateLists.getTemplateListForViewByUser = function(type, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TemplateLists/GetTemplateListForViewByUser' + abp.utils.buildQueryString([{ name: 'type', value: type }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTemplateListForEdit'
    abp.services.app.templateLists.getTemplateListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TemplateLists/GetTemplateListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.templateLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TemplateLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.templateLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TemplateLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'kuppcsLists'
  (function(){

    abp.services.app.kuppcsLists = abp.services.app.kuppcsLists || {};

    // action 'getAll'
    abp.services.app.kuppcsLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/KuppcsLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'indexNumberFilter', value: input.indexNumberFilter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'genderFilter', value: input.genderFilter }, { name: 'phoneNumberFilter', value: input.phoneNumberFilter }, { name: 'otherNumberFilter', value: input.otherNumberFilter }, { name: 'emailFilter', value: input.emailFilter }, { name: 'otherMailFilter', value: input.otherMailFilter }, { name: 'addressFilter', value: input.addressFilter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'townFilter', value: input.townFilter }, { name: 'programmeCodeFilter', value: input.programmeCodeFilter }, { name: 'programmeNameFilter', value: input.programmeNameFilter }, { name: 'maxDownloadsFilter', value: input.maxDownloadsFilter }, { name: 'minDownloadsFilter', value: input.minDownloadsFilter }, { name: 'maxSendMailFilter', value: input.maxSendMailFilter }, { name: 'minSendMailFilter', value: input.minSendMailFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getKuppcsListForView'
    abp.services.app.kuppcsLists.getKuppcsListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/KuppcsLists/GetKuppcsListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getKuppcsListForDownload'
    abp.services.app.kuppcsLists.getKuppcsListForDownload = function(indexNo, year, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/KuppcsLists/GetKuppcsListForDownload' + abp.utils.buildQueryString([{ name: 'indexNo', value: indexNo }, { name: 'year', value: year }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getKuppcsListForEdit'
    abp.services.app.kuppcsLists.getKuppcsListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/KuppcsLists/GetKuppcsListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.kuppcsLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/KuppcsLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'createByImport'
    abp.services.app.kuppcsLists.createByImport = function(inputs, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/KuppcsLists/CreateByImport',
        type: 'POST',
        data: JSON.stringify(inputs)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.kuppcsLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/KuppcsLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'sendKuppcsEmailConfirmation'
    abp.services.app.kuppcsLists.sendKuppcsEmailConfirmation = function(refCode, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/KuppcsLists/SendKuppcsEmailConfirmation' + abp.utils.buildQueryString([{ name: 'refCode', value: refCode }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'sendMuiltipleKuppcsEmail'
    abp.services.app.kuppcsLists.sendMuiltipleKuppcsEmail = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/KuppcsLists/SendMuiltipleKuppcsEmail',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getKuppcsListsToExcel'
    abp.services.app.kuppcsLists.getKuppcsListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/KuppcsLists/GetKuppcsListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'indexNumberFilter', value: input.indexNumberFilter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'genderFilter', value: input.genderFilter }, { name: 'phoneNumberFilter', value: input.phoneNumberFilter }, { name: 'otherNumberFilter', value: input.otherNumberFilter }, { name: 'emailFilter', value: input.emailFilter }, { name: 'otherMailFilter', value: input.otherMailFilter }, { name: 'addressFilter', value: input.addressFilter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'townFilter', value: input.townFilter }, { name: 'programmeCodeFilter', value: input.programmeCodeFilter }, { name: 'programmeNameFilter', value: input.programmeNameFilter }, { name: 'maxDownloadsFilter', value: input.maxDownloadsFilter }, { name: 'minDownloadsFilter', value: input.minDownloadsFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'eRPLookupLists'
  (function(){

    abp.services.app.eRPLookupLists = abp.services.app.eRPLookupLists || {};

    // action 'getAll'
    abp.services.app.eRPLookupLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ERPLookupLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'itemFilter', value: input.itemFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getERPLookupListForEdit'
    abp.services.app.eRPLookupLists.getERPLookupListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ERPLookupLists/GetERPLookupListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getERPLookupListForDisplay'
    abp.services.app.eRPLookupLists.getERPLookupListForDisplay = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ERPLookupLists/GetERPLookupListForDisplay',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLookupListForDisplay'
    abp.services.app.eRPLookupLists.getLookupListForDisplay = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ERPLookupLists/GetLookupListForDisplay',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.eRPLookupLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ERPLookupLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.eRPLookupLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ERPLookupLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'educationHistoryLists'
  (function(){

    abp.services.app.educationHistoryLists = abp.services.app.educationHistoryLists || {};

    // action 'getAll'
    abp.services.app.educationHistoryLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EducationHistoryLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'courseNameFilter', value: input.courseNameFilter }, { name: 'examinedByFilter', value: input.examinedByFilter }, { name: 'gradeFilter', value: input.gradeFilter }, { name: 'maxFromFilter', value: input.maxFromFilter }, { name: 'minFromFilter', value: input.minFromFilter }, { name: 'institutionNameFilter', value: input.institutionNameFilter }, { name: 'indexNoFilter', value: input.indexNoFilter }, { name: 'certificateNameFilter', value: input.certificateNameFilter }, { name: 'applicantProfileListFirstNameFilter', value: input.applicantProfileListFirstNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByUser'
    abp.services.app.educationHistoryLists.getAllByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EducationHistoryLists/GetAllByUser' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'courseNameFilter', value: input.courseNameFilter }, { name: 'examinedByFilter', value: input.examinedByFilter }, { name: 'gradeFilter', value: input.gradeFilter }, { name: 'maxFromFilter', value: input.maxFromFilter }, { name: 'minFromFilter', value: input.minFromFilter }, { name: 'institutionNameFilter', value: input.institutionNameFilter }, { name: 'indexNoFilter', value: input.indexNoFilter }, { name: 'certificateNameFilter', value: input.certificateNameFilter }, { name: 'applicantProfileListFirstNameFilter', value: input.applicantProfileListFirstNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEducationHistoryListForViewByUser'
    abp.services.app.educationHistoryLists.getEducationHistoryListForViewByUser = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EducationHistoryLists/GetEducationHistoryListForViewByUser' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEducationHistoryListForEditByUser'
    abp.services.app.educationHistoryLists.getEducationHistoryListForEditByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EducationHistoryLists/GetEducationHistoryListForEditByUser' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteByUser'
    abp.services.app.educationHistoryLists.deleteByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EducationHistoryLists/DeleteByUser' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'createOrEditByUser'
    abp.services.app.educationHistoryLists.createOrEditByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EducationHistoryLists/CreateOrEditByUser',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getEducationHistoryListForView'
    abp.services.app.educationHistoryLists.getEducationHistoryListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EducationHistoryLists/GetEducationHistoryListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEducationHistoryListForEdit'
    abp.services.app.educationHistoryLists.getEducationHistoryListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EducationHistoryLists/GetEducationHistoryListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.educationHistoryLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EducationHistoryLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.educationHistoryLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EducationHistoryLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getEducationHistoryListsToExcel'
    abp.services.app.educationHistoryLists.getEducationHistoryListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EducationHistoryLists/GetEducationHistoryListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'courseNameFilter', value: input.courseNameFilter }, { name: 'examinedByFilter', value: input.examinedByFilter }, { name: 'gradeFilter', value: input.gradeFilter }, { name: 'maxFromFilter', value: input.maxFromFilter }, { name: 'minFromFilter', value: input.minFromFilter }, { name: 'institutionNameFilter', value: input.institutionNameFilter }, { name: 'indexNoFilter', value: input.indexNoFilter }, { name: 'certificateNameFilter', value: input.certificateNameFilter }, { name: 'applicantProfileListFirstNameFilter', value: input.applicantProfileListFirstNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllApplicantProfileListForTableDropdown'
    abp.services.app.educationHistoryLists.getAllApplicantProfileListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EducationHistoryLists/GetAllApplicantProfileListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'applicantProfileLists'
  (function(){

    abp.services.app.applicantProfileLists = abp.services.app.applicantProfileLists || {};

    // action 'getAll'
    abp.services.app.applicantProfileLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicantProfileLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'firstNameFilter', value: input.firstNameFilter }, { name: 'lastNameFilter', value: input.lastNameFilter }, { name: 'nationalIDFilter', value: input.nationalIDFilter }, { name: 'genderFilter', value: input.genderFilter }, { name: 'nationalityFilter', value: input.nationalityFilter }, { name: 'phoneNumberFilter', value: input.phoneNumberFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'religionFilter', value: input.religionFilter }, { name: 'emailFilter', value: input.emailFilter }, { name: 'subLocationFilter', value: input.subLocationFilter }, { name: 'userNameFilter', value: input.userNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getApplicantProfileListForView'
    abp.services.app.applicantProfileLists.getApplicantProfileListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicantProfileLists/GetApplicantProfileListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getApplicantProfileListForViewByUser'
    abp.services.app.applicantProfileLists.getApplicantProfileListForViewByUser = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicantProfileLists/GetApplicantProfileListForViewByUser',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getApplicantProfileListForEditByUser'
    abp.services.app.applicantProfileLists.getApplicantProfileListForEditByUser = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicantProfileLists/GetApplicantProfileListForEditByUser',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'applicationFromProfile'
    abp.services.app.applicantProfileLists.applicationFromProfile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicantProfileLists/ApplicationFromProfile',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'updateByUser'
    abp.services.app.applicantProfileLists.updateByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicantProfileLists/UpdateByUser',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getApplicantProfileListForEdit'
    abp.services.app.applicantProfileLists.getApplicantProfileListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicantProfileLists/GetApplicantProfileListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.applicantProfileLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicantProfileLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.applicantProfileLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicantProfileLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getEducationAwards'
    abp.services.app.applicantProfileLists.getEducationAwards = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicantProfileLists/GetEducationAwards',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getApplicantProfileListsToExcel'
    abp.services.app.applicantProfileLists.getApplicantProfileListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicantProfileLists/GetApplicantProfileListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'firstNameFilter', value: input.firstNameFilter }, { name: 'lastNameFilter', value: input.lastNameFilter }, { name: 'nationalIDFilter', value: input.nationalIDFilter }, { name: 'genderFilter', value: input.genderFilter }, { name: 'nationalityFilter', value: input.nationalityFilter }, { name: 'phoneNumberFilter', value: input.phoneNumberFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'religionFilter', value: input.religionFilter }, { name: 'emailFilter', value: input.emailFilter }, { name: 'subLocationFilter', value: input.subLocationFilter }, { name: 'userNameFilter', value: input.userNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllUserForTableDropdown'
    abp.services.app.applicantProfileLists.getAllUserForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ApplicantProfileLists/GetAllUserForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'smartCardApplicationLists'
  (function(){

    abp.services.app.smartCardApplicationLists = abp.services.app.smartCardApplicationLists || {};

    // action 'getAll'
    abp.services.app.smartCardApplicationLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SmartCardApplicationLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'studentNoFilter', value: input.studentNoFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSmartCardApplicationListForView'
    abp.services.app.smartCardApplicationLists.getSmartCardApplicationListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SmartCardApplicationLists/GetSmartCardApplicationListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSmartCardApplicationListForEdit'
    abp.services.app.smartCardApplicationLists.getSmartCardApplicationListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SmartCardApplicationLists/GetSmartCardApplicationListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.smartCardApplicationLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SmartCardApplicationLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'smartcardApprove'
    abp.services.app.smartCardApplicationLists.smartcardApprove = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SmartCardApplicationLists/SmartcardApprove',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'smartcardComplete'
    abp.services.app.smartCardApplicationLists.smartcardComplete = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SmartCardApplicationLists/SmartcardComplete',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.smartCardApplicationLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SmartCardApplicationLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getSmartCardApplicationListsToExcel'
    abp.services.app.smartCardApplicationLists.getSmartCardApplicationListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SmartCardApplicationLists/GetSmartCardApplicationListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'studentNoFilter', value: input.studentNoFilter }, { name: 'statusFilter', value: input.statusFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByUser'
    abp.services.app.smartCardApplicationLists.getAllByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SmartCardApplicationLists/GetAllByUser' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'studentNoFilter', value: input.studentNoFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSmartCardApplicationListForViewByUser'
    abp.services.app.smartCardApplicationLists.getSmartCardApplicationListForViewByUser = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SmartCardApplicationLists/GetSmartCardApplicationListForViewByUser' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEditByUser'
    abp.services.app.smartCardApplicationLists.createOrEditByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SmartCardApplicationLists/CreateOrEditByUser',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'deleteByUser'
    abp.services.app.smartCardApplicationLists.deleteByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SmartCardApplicationLists/DeleteByUser' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getSmartCardApplicationListsToExcelByUser'
    abp.services.app.smartCardApplicationLists.getSmartCardApplicationListsToExcelByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SmartCardApplicationLists/GetSmartCardApplicationListsToExcelByUser' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'studentNoFilter', value: input.studentNoFilter }, { name: 'statusFilter', value: input.statusFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'graduationApplicationLists'
  (function(){

    abp.services.app.graduationApplicationLists = abp.services.app.graduationApplicationLists || {};

    // action 'getAll'
    abp.services.app.graduationApplicationLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GraduationApplicationLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'userNameFilter', value: input.userNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGraduationApplicationListForView'
    abp.services.app.graduationApplicationLists.getGraduationApplicationListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GraduationApplicationLists/GetGraduationApplicationListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGraduationApplicationListForEdit'
    abp.services.app.graduationApplicationLists.getGraduationApplicationListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GraduationApplicationLists/GetGraduationApplicationListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.graduationApplicationLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GraduationApplicationLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.graduationApplicationLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GraduationApplicationLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'appoveGraduation'
    abp.services.app.graduationApplicationLists.appoveGraduation = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GraduationApplicationLists/AppoveGraduation',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getGraduationApplicationListsToExcel'
    abp.services.app.graduationApplicationLists.getGraduationApplicationListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GraduationApplicationLists/GetGraduationApplicationListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'userNameFilter', value: input.userNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllUserForLookupTable'
    abp.services.app.graduationApplicationLists.getAllUserForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GraduationApplicationLists/GetAllUserForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllForUser'
    abp.services.app.graduationApplicationLists.getAllForUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GraduationApplicationLists/GetAllForUser' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'userNameFilter', value: input.userNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGraduationApplicationListForViewForUser'
    abp.services.app.graduationApplicationLists.getGraduationApplicationListForViewForUser = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GraduationApplicationLists/GetGraduationApplicationListForViewForUser' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEditUser'
    abp.services.app.graduationApplicationLists.createOrEditUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GraduationApplicationLists/CreateOrEditUser',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'canApplyGraduation'
    abp.services.app.graduationApplicationLists.canApplyGraduation = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GraduationApplicationLists/CanApplyGraduation',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'deleteByUser'
    abp.services.app.graduationApplicationLists.deleteByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GraduationApplicationLists/DeleteByUser' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'studentDetails'
  (function(){

    abp.services.app.studentDetails = abp.services.app.studentDetails || {};

    // action 'getAll'
    abp.services.app.studentDetails.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDetails/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'namesFilter', value: input.namesFilter }, { name: 'graduationFilter', value: input.graduationFilter }, { name: 'studentActiveFilter', value: input.studentActiveFilter }, { name: 'hasPhotosFilter', value: input.hasPhotosFilter }, { name: 'attachmentFilter', value: input.attachmentFilter }, { name: 'class2Filter', value: input.class2Filter }, { name: 'api_Key', value: input.api_Key }, { name: 'cardPrintedFilter', value: input.cardPrintedFilter }, { name: 'startDate', value: input.startDate }, { name: 'endDate', value: input.endDate }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudents'
    abp.services.app.studentDetails.getStudents = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDetails/GetStudents' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'namesFilter', value: input.namesFilter }, { name: 'graduationFilter', value: input.graduationFilter }, { name: 'studentActiveFilter', value: input.studentActiveFilter }, { name: 'hasPhotosFilter', value: input.hasPhotosFilter }, { name: 'attachmentFilter', value: input.attachmentFilter }, { name: 'class2Filter', value: input.class2Filter }, { name: 'api_Key', value: input.api_Key }, { name: 'cardPrintedFilter', value: input.cardPrintedFilter }, { name: 'startDate', value: input.startDate }, { name: 'endDate', value: input.endDate }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentBalance'
    abp.services.app.studentDetails.getStudentBalance = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDetails/GetStudentBalance' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'namesFilter', value: input.namesFilter }, { name: 'graduationFilter', value: input.graduationFilter }, { name: 'studentActiveFilter', value: input.studentActiveFilter }, { name: 'hasPhotosFilter', value: input.hasPhotosFilter }, { name: 'attachmentFilter', value: input.attachmentFilter }, { name: 'class2Filter', value: input.class2Filter }, { name: 'api_Key', value: input.api_Key }, { name: 'cardPrintedFilter', value: input.cardPrintedFilter }, { name: 'startDate', value: input.startDate }, { name: 'endDate', value: input.endDate }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentDetailForView'
    abp.services.app.studentDetails.getStudentDetailForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDetails/GetStudentDetailForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentDetailByIntake'
    abp.services.app.studentDetails.getStudentDetailByIntake = function(intake, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDetails/GetStudentDetailByIntake' + abp.utils.buildQueryString([{ name: 'intake', value: intake }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentDetailByIds'
    abp.services.app.studentDetails.getStudentDetailByIds = function(admissionIds, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDetails/GetStudentDetailByIds' + abp.utils.buildQueryString([{ name: 'admissionIds', value: admissionIds }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentDetailExamsCard'
    abp.services.app.studentDetails.getStudentDetailExamsCard = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDetails/GetStudentDetailExamsCard' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'namesFilter', value: input.namesFilter }, { name: 'graduationFilter', value: input.graduationFilter }, { name: 'studentActiveFilter', value: input.studentActiveFilter }, { name: 'hasPhotosFilter', value: input.hasPhotosFilter }, { name: 'attachmentFilter', value: input.attachmentFilter }, { name: 'class2Filter', value: input.class2Filter }, { name: 'api_Key', value: input.api_Key }, { name: 'cardPrintedFilter', value: input.cardPrintedFilter }, { name: 'startDate', value: input.startDate }, { name: 'endDate', value: input.endDate }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentDetailExamsCardByStudent'
    abp.services.app.studentDetails.getStudentDetailExamsCardByStudent = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDetails/GetStudentDetailExamsCardByStudent' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'namesFilter', value: input.namesFilter }, { name: 'graduationFilter', value: input.graduationFilter }, { name: 'studentActiveFilter', value: input.studentActiveFilter }, { name: 'hasPhotosFilter', value: input.hasPhotosFilter }, { name: 'attachmentFilter', value: input.attachmentFilter }, { name: 'class2Filter', value: input.class2Filter }, { name: 'api_Key', value: input.api_Key }, { name: 'cardPrintedFilter', value: input.cardPrintedFilter }, { name: 'startDate', value: input.startDate }, { name: 'endDate', value: input.endDate }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'updateStudentImage'
    abp.services.app.studentDetails.updateStudentImage = function(admno, pics, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDetails/UpdateStudentImage' + abp.utils.buildQueryString([{ name: 'admno', value: admno }]) + '',
        type: 'PUT',
        data: JSON.stringify(pics)
      }, ajaxParams));;
    };

    // action 'updateStudentImageFromBase64'
    abp.services.app.studentDetails.updateStudentImageFromBase64 = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDetails/UpdateStudentImageFromBase64',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'updateStudentImageByHash'
    abp.services.app.studentDetails.updateStudentImageByHash = function(hashId, pics, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDetails/UpdateStudentImageByHash' + abp.utils.buildQueryString([{ name: 'hashId', value: hashId }]) + '',
        type: 'PUT',
        data: JSON.stringify(pics)
      }, ajaxParams));;
    };

    // action 'getStudentImage'
    abp.services.app.studentDetails.getStudentImage = function(admno, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDetails/GetStudentImage' + abp.utils.buildQueryString([{ name: 'admno', value: admno }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentDetailForViewByAdmission'
    abp.services.app.studentDetails.getStudentDetailForViewByAdmission = function(admNo, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDetails/GetStudentDetailForViewByAdmission' + abp.utils.buildQueryString([{ name: 'admNo', value: admNo }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentDetailForLeavingCertificate'
    abp.services.app.studentDetails.getStudentDetailForLeavingCertificate = function(admNo, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDetails/GetStudentDetailForLeavingCertificate' + abp.utils.buildQueryString([{ name: 'admNo', value: admNo }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentDetailForViewByCurrent'
    abp.services.app.studentDetails.getStudentDetailForViewByCurrent = function(admNo, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDetails/GetStudentDetailForViewByCurrent' + abp.utils.buildQueryString([{ name: 'admNo', value: admNo }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentDetailForEdit'
    abp.services.app.studentDetails.getStudentDetailForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDetails/GetStudentDetailForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'studentCardsUpdate'
    abp.services.app.studentDetails.studentCardsUpdate = function(studentDetailsList, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDetails/StudentCardsUpdate',
        type: 'POST',
        data: JSON.stringify(studentDetailsList)
      }, ajaxParams));;
    };

    // action 'studentsForAttachment'
    abp.services.app.studentDetails.studentsForAttachment = function(studentDetailsList, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDetails/StudentsForAttachment',
        type: 'POST',
        data: JSON.stringify(studentDetailsList)
      }, ajaxParams));;
    };

    // action 'studentsRemoveAttachment'
    abp.services.app.studentDetails.studentsRemoveAttachment = function(studentDetailsList, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDetails/StudentsRemoveAttachment',
        type: 'POST',
        data: JSON.stringify(studentDetailsList)
      }, ajaxParams));;
    };

    // action 'studentsForGraduation'
    abp.services.app.studentDetails.studentsForGraduation = function(studentDetailsList, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDetails/StudentsForGraduation',
        type: 'POST',
        data: JSON.stringify(studentDetailsList)
      }, ajaxParams));;
    };

    // action 'studentsRemoveGraduation'
    abp.services.app.studentDetails.studentsRemoveGraduation = function(studentDetailsList, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDetails/StudentsRemoveGraduation',
        type: 'POST',
        data: JSON.stringify(studentDetailsList)
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.studentDetails.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDetails/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'removeStudentImage'
    abp.services.app.studentDetails.removeStudentImage = function(admno, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDetails/RemoveStudentImage' + abp.utils.buildQueryString([{ name: 'admno', value: admno }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getStudentDetailsToExcel'
    abp.services.app.studentDetails.getStudentDetailsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDetails/GetStudentDetailsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'namesFilter', value: input.namesFilter }, { name: 'class2Filter', value: input.class2Filter }, { name: 'graduationFilter', value: input.graduationFilter }, { name: 'studentActiveFilter', value: input.studentActiveFilter }, { name: 'attachmentFilter', value: input.attachmentFilter }, { name: 'cardPrintedFilter', value: input.cardPrintedFilter }, { name: 'startDate', value: input.startDate }, { name: 'endDate', value: input.endDate }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'studentUserSynchronization'
    abp.services.app.studentDetails.studentUserSynchronization = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDetails/StudentUserSynchronization',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'studentUpdateHashKey'
    abp.services.app.studentDetails.studentUpdateHashKey = function(admno, hashId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDetails/StudentUpdateHashKey' + abp.utils.buildQueryString([{ name: 'admno', value: admno }, { name: 'hashId', value: hashId }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getStudentWithoutHashKey'
    abp.services.app.studentDetails.getStudentWithoutHashKey = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDetails/GetStudentWithoutHashKey',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBarcode'
    abp.services.app.studentDetails.getBarcode = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentDetails/GetBarcode',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'studentSubjectDetails'
  (function(){

    abp.services.app.studentSubjectDetails = abp.services.app.studentSubjectDetails || {};

    // action 'getAll'
    abp.services.app.studentSubjectDetails.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentSubjectDetails/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'refFilter', value: input.refFilter }, { name: 'studentClassFilter', value: input.studentClassFilter }, { name: 'streamFilter', value: input.streamFilter }, { name: 'subjectFilter', value: input.subjectFilter }, { name: 'notesFilter', value: input.notesFilter }, { name: 'maxRdateFilter', value: input.maxRdateFilter }, { name: 'minRdateFilter', value: input.minRdateFilter }, { name: 'personnelFilter', value: input.personnelFilter }, { name: 'cAT2Filter', value: input.cAT2Filter }, { name: 'cAT3Filter', value: input.cAT3Filter }, { name: 'studyModeFilter', value: input.studyModeFilter }, { name: 'chkNonMarkFilter', value: input.chkNonMarkFilter }, { name: 'nonMarkFilter', value: input.nonMarkFilter }, { name: 'guidedFilter', value: input.guidedFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByRef'
    abp.services.app.studentSubjectDetails.getAllByRef = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentSubjectDetails/GetAllByRef' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'refFilter', value: input.refFilter }, { name: 'studentClassFilter', value: input.studentClassFilter }, { name: 'streamFilter', value: input.streamFilter }, { name: 'subjectFilter', value: input.subjectFilter }, { name: 'notesFilter', value: input.notesFilter }, { name: 'maxRdateFilter', value: input.maxRdateFilter }, { name: 'minRdateFilter', value: input.minRdateFilter }, { name: 'personnelFilter', value: input.personnelFilter }, { name: 'cAT2Filter', value: input.cAT2Filter }, { name: 'cAT3Filter', value: input.cAT3Filter }, { name: 'studyModeFilter', value: input.studyModeFilter }, { name: 'chkNonMarkFilter', value: input.chkNonMarkFilter }, { name: 'nonMarkFilter', value: input.nonMarkFilter }, { name: 'guidedFilter', value: input.guidedFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentSubjectDetailForView'
    abp.services.app.studentSubjectDetails.getStudentSubjectDetailForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentSubjectDetails/GetStudentSubjectDetailForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentSubjectDetailForEdit'
    abp.services.app.studentSubjectDetails.getStudentSubjectDetailForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentSubjectDetails/GetStudentSubjectDetailForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.studentSubjectDetails.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentSubjectDetails/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.studentSubjectDetails['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentSubjectDetails/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getStudentSubjectDetailsToExcel'
    abp.services.app.studentSubjectDetails.getStudentSubjectDetailsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentSubjectDetails/GetStudentSubjectDetailsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'refFilter', value: input.refFilter }, { name: 'studentClassFilter', value: input.studentClassFilter }, { name: 'streamFilter', value: input.streamFilter }, { name: 'subjectFilter', value: input.subjectFilter }, { name: 'notesFilter', value: input.notesFilter }, { name: 'maxRdateFilter', value: input.maxRdateFilter }, { name: 'minRdateFilter', value: input.minRdateFilter }, { name: 'personnelFilter', value: input.personnelFilter }, { name: 'cAT2Filter', value: input.cAT2Filter }, { name: 'cAT3Filter', value: input.cAT3Filter }, { name: 'studyModeFilter', value: input.studyModeFilter }, { name: 'chkNonMarkFilter', value: input.chkNonMarkFilter }, { name: 'nonMarkFilter', value: input.nonMarkFilter }, { name: 'guidedFilter', value: input.guidedFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'studentSubjects'
  (function(){

    abp.services.app.studentSubjects = abp.services.app.studentSubjects || {};

    // action 'getAll'
    abp.services.app.studentSubjects.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentSubjects/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'empNoFilter', value: input.empNoFilter }, { name: 'termFilter', value: input.termFilter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'semesterFilter', value: input.semesterFilter }, { name: 'maxRdateFilter', value: input.maxRdateFilter }, { name: 'minRdateFilter', value: input.minRdateFilter }, { name: 'personnelFilter', value: input.personnelFilter }, { name: 'notesFilter', value: input.notesFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCurrent'
    abp.services.app.studentSubjects.getCurrent = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentSubjects/GetCurrent' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'empNoFilter', value: input.empNoFilter }, { name: 'termFilter', value: input.termFilter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'semesterFilter', value: input.semesterFilter }, { name: 'maxRdateFilter', value: input.maxRdateFilter }, { name: 'minRdateFilter', value: input.minRdateFilter }, { name: 'personnelFilter', value: input.personnelFilter }, { name: 'notesFilter', value: input.notesFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentSubjectForView'
    abp.services.app.studentSubjects.getStudentSubjectForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentSubjects/GetStudentSubjectForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentSubjectForEdit'
    abp.services.app.studentSubjects.getStudentSubjectForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentSubjects/GetStudentSubjectForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.studentSubjects.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentSubjects/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'approveStudentSubject'
    abp.services.app.studentSubjects.approveStudentSubject = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentSubjects/ApproveStudentSubject',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.studentSubjects['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentSubjects/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getStudentSubjectsToExcel'
    abp.services.app.studentSubjects.getStudentSubjectsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentSubjects/GetStudentSubjectsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'empNoFilter', value: input.empNoFilter }, { name: 'termFilter', value: input.termFilter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'semesterFilter', value: input.semesterFilter }, { name: 'maxRdateFilter', value: input.maxRdateFilter }, { name: 'minRdateFilter', value: input.minRdateFilter }, { name: 'personnelFilter', value: input.personnelFilter }, { name: 'notesFilter', value: input.notesFilter }, { name: 'statusFilter', value: input.statusFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'studentCardLostLists'
  (function(){

    abp.services.app.studentCardLostLists = abp.services.app.studentCardLostLists || {};

    // action 'getAll'
    abp.services.app.studentCardLostLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentCardLostLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'cardNoFilter', value: input.cardNoFilter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentCardLostListForView'
    abp.services.app.studentCardLostLists.getStudentCardLostListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentCardLostLists/GetStudentCardLostListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentCardLostListForEdit'
    abp.services.app.studentCardLostLists.getStudentCardLostListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentCardLostLists/GetStudentCardLostListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.studentCardLostLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentCardLostLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'approveLostStudentCard'
    abp.services.app.studentCardLostLists.approveLostStudentCard = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentCardLostLists/ApproveLostStudentCard',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'restoreLostStudentCard'
    abp.services.app.studentCardLostLists.restoreLostStudentCard = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentCardLostLists/RestoreLostStudentCard',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.studentCardLostLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentCardLostLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getStudentCardLostListsToExcel'
    abp.services.app.studentCardLostLists.getStudentCardLostListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentCardLostLists/GetStudentCardLostListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'cardNoFilter', value: input.cardNoFilter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllStudentDetailForTableDropdown'
    abp.services.app.studentCardLostLists.getAllStudentDetailForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentCardLostLists/GetAllStudentDetailForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByStudent'
    abp.services.app.studentCardLostLists.getAllByStudent = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentCardLostLists/GetAllByStudent' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'cardNoFilter', value: input.cardNoFilter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentCardLostListForViewByStudent'
    abp.services.app.studentCardLostLists.getStudentCardLostListForViewByStudent = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentCardLostLists/GetStudentCardLostListForViewByStudent' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEditByStudent'
    abp.services.app.studentCardLostLists.createOrEditByStudent = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentCardLostLists/CreateOrEditByStudent',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

  })();

  // controller 'leavingCertificateLists'
  (function(){

    abp.services.app.leavingCertificateLists = abp.services.app.leavingCertificateLists || {};

    // action 'getAll'
    abp.services.app.leavingCertificateLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeavingCertificateLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'certificateNoFilter', value: input.certificateNoFilter }, { name: 'collectedFilter', value: input.collectedFilter }, { name: 'collectedByFilter', value: input.collectedByFilter }, { name: 'maxCollectedDateFilter', value: input.maxCollectedDateFilter }, { name: 'minCollectedDateFilter', value: input.minCollectedDateFilter }, { name: 'cancelledFilter', value: input.cancelledFilter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLeavingCertificateListForView'
    abp.services.app.leavingCertificateLists.getLeavingCertificateListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeavingCertificateLists/GetLeavingCertificateListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLeavingCertificateListForViewByAdmission'
    abp.services.app.leavingCertificateLists.getLeavingCertificateListForViewByAdmission = function(admission, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeavingCertificateLists/GetLeavingCertificateListForViewByAdmission' + abp.utils.buildQueryString([{ name: 'admission', value: admission }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLeavingCertificateListForEdit'
    abp.services.app.leavingCertificateLists.getLeavingCertificateListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeavingCertificateLists/GetLeavingCertificateListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.leavingCertificateLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeavingCertificateLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'updateByAdmission'
    abp.services.app.leavingCertificateLists.updateByAdmission = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeavingCertificateLists/UpdateByAdmission',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.leavingCertificateLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeavingCertificateLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getLeavingCertificateListsToExcel'
    abp.services.app.leavingCertificateLists.getLeavingCertificateListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeavingCertificateLists/GetLeavingCertificateListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'certificateNoFilter', value: input.certificateNoFilter }, { name: 'collectedFilter', value: input.collectedFilter }, { name: 'collectedByFilter', value: input.collectedByFilter }, { name: 'maxCollectedDateFilter', value: input.maxCollectedDateFilter }, { name: 'minCollectedDateFilter', value: input.minCollectedDateFilter }, { name: 'cancelledFilter', value: input.cancelledFilter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllStudentDetailForLookupTable'
    abp.services.app.leavingCertificateLists.getAllStudentDetailForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeavingCertificateLists/GetAllStudentDetailForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'certificateCollectionLists'
  (function(){

    abp.services.app.certificateCollectionLists = abp.services.app.certificateCollectionLists || {};

    // action 'getAll'
    abp.services.app.certificateCollectionLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CertificateCollectionLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'certificateTypeFilter', value: input.certificateTypeFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCertificateCollectionListForView'
    abp.services.app.certificateCollectionLists.getCertificateCollectionListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CertificateCollectionLists/GetCertificateCollectionListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCertificateCollectionListForEdit'
    abp.services.app.certificateCollectionLists.getCertificateCollectionListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CertificateCollectionLists/GetCertificateCollectionListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.certificateCollectionLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CertificateCollectionLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'approveCertificate'
    abp.services.app.certificateCollectionLists.approveCertificate = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CertificateCollectionLists/ApproveCertificate',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'collectCertificate'
    abp.services.app.certificateCollectionLists.collectCertificate = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CertificateCollectionLists/CollectCertificate',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.certificateCollectionLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CertificateCollectionLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getCertificateCollectionListsToExcel'
    abp.services.app.certificateCollectionLists.getCertificateCollectionListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CertificateCollectionLists/GetCertificateCollectionListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'certificateTypeFilter', value: input.certificateTypeFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllStudentDetailForLookupTable'
    abp.services.app.certificateCollectionLists.getAllStudentDetailForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CertificateCollectionLists/GetAllStudentDetailForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByUser'
    abp.services.app.certificateCollectionLists.getAllByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CertificateCollectionLists/GetAllByUser' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'certificateTypeFilter', value: input.certificateTypeFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCertificateCollectionListForViewByUser'
    abp.services.app.certificateCollectionLists.getCertificateCollectionListForViewByUser = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CertificateCollectionLists/GetCertificateCollectionListForViewByUser' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCertificateCollectionListForEditByUser'
    abp.services.app.certificateCollectionLists.getCertificateCollectionListForEditByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CertificateCollectionLists/GetCertificateCollectionListForEditByUser' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEditByUser'
    abp.services.app.certificateCollectionLists.createOrEditByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CertificateCollectionLists/CreateOrEditByUser',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'deleteByUser'
    abp.services.app.certificateCollectionLists.deleteByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CertificateCollectionLists/DeleteByUser' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'attendanceRegisterLists'
  (function(){

    abp.services.app.attendanceRegisterLists = abp.services.app.attendanceRegisterLists || {};

    // action 'getAllRegisterAttendance'
    abp.services.app.attendanceRegisterLists.getAllRegisterAttendance = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AttendanceRegisterLists/GetAllRegisterAttendance' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'checkStatus', value: input.checkStatus }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'classFilter', value: input.classFilter }, { name: 'typeFilter', value: input.typeFilter }, { name: 'termFilter', value: input.termFilter }, { name: 'refFilter', value: input.refFilter }, { name: 'subjectFilter', value: input.subjectFilter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'semesterFilter', value: input.semesterFilter }, { name: 'teacherSubjectIdFilter', value: input.teacherSubjectIdFilter }, { name: 'maxCAT2Filter', value: input.maxCAT2Filter }, { name: 'minCAT2Filter', value: input.minCAT2Filter }, { name: 'attendanceDate', value: input.attendanceDate }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllTeacherRegisterAttendance'
    abp.services.app.attendanceRegisterLists.getAllTeacherRegisterAttendance = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AttendanceRegisterLists/GetAllTeacherRegisterAttendance' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'checkStatus', value: input.checkStatus }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'classFilter', value: input.classFilter }, { name: 'typeFilter', value: input.typeFilter }, { name: 'termFilter', value: input.termFilter }, { name: 'refFilter', value: input.refFilter }, { name: 'subjectFilter', value: input.subjectFilter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'semesterFilter', value: input.semesterFilter }, { name: 'teacherSubjectIdFilter', value: input.teacherSubjectIdFilter }, { name: 'maxCAT2Filter', value: input.maxCAT2Filter }, { name: 'minCAT2Filter', value: input.minCAT2Filter }, { name: 'attendanceDate', value: input.attendanceDate }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'submitTeacherRegisterAttendance'
    abp.services.app.attendanceRegisterLists.submitTeacherRegisterAttendance = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AttendanceRegisterLists/SubmitTeacherRegisterAttendance',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getAllTeacherRegisterAttendanceByDate'
    abp.services.app.attendanceRegisterLists.getAllTeacherRegisterAttendanceByDate = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AttendanceRegisterLists/GetAllTeacherRegisterAttendanceByDate' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'checkStatus', value: input.checkStatus }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'classFilter', value: input.classFilter }, { name: 'typeFilter', value: input.typeFilter }, { name: 'termFilter', value: input.termFilter }, { name: 'refFilter', value: input.refFilter }, { name: 'subjectFilter', value: input.subjectFilter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'semesterFilter', value: input.semesterFilter }, { name: 'teacherSubjectIdFilter', value: input.teacherSubjectIdFilter }, { name: 'maxCAT2Filter', value: input.maxCAT2Filter }, { name: 'minCAT2Filter', value: input.minCAT2Filter }, { name: 'attendanceDate', value: input.attendanceDate }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTeacherAttendanceToExcel'
    abp.services.app.attendanceRegisterLists.getTeacherAttendanceToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AttendanceRegisterLists/GetTeacherAttendanceToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'checkStatus', value: input.checkStatus }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'classFilter', value: input.classFilter }, { name: 'typeFilter', value: input.typeFilter }, { name: 'termFilter', value: input.termFilter }, { name: 'refFilter', value: input.refFilter }, { name: 'subjectFilter', value: input.subjectFilter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'semesterFilter', value: input.semesterFilter }, { name: 'teacherSubjectIdFilter', value: input.teacherSubjectIdFilter }, { name: 'maxCAT2Filter', value: input.maxCAT2Filter }, { name: 'minCAT2Filter', value: input.minCAT2Filter }, { name: 'attendanceDate', value: input.attendanceDate }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentAttendanceToExcel'
    abp.services.app.attendanceRegisterLists.getStudentAttendanceToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AttendanceRegisterLists/GetStudentAttendanceToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'checkStatus', value: input.checkStatus }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'classFilter', value: input.classFilter }, { name: 'typeFilter', value: input.typeFilter }, { name: 'termFilter', value: input.termFilter }, { name: 'refFilter', value: input.refFilter }, { name: 'subjectFilter', value: input.subjectFilter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'semesterFilter', value: input.semesterFilter }, { name: 'teacherSubjectIdFilter', value: input.teacherSubjectIdFilter }, { name: 'maxCAT2Filter', value: input.maxCAT2Filter }, { name: 'minCAT2Filter', value: input.minCAT2Filter }, { name: 'attendanceDate', value: input.attendanceDate }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'updateRegister'
    abp.services.app.attendanceRegisterLists.updateRegister = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AttendanceRegisterLists/UpdateRegister',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

  })();

  // controller 'assignmentLists'
  (function(){

    abp.services.app.assignmentLists = abp.services.app.assignmentLists || {};

    // action 'getAll'
    abp.services.app.assignmentLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssignmentLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'titleFilter', value: input.titleFilter }, { name: 'assignmentFilter', value: input.assignmentFilter }, { name: 'userNameFilter', value: input.userNameFilter }, { name: 'groupChatListNameFilter', value: input.groupChatListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAssignmentListForView'
    abp.services.app.assignmentLists.getAssignmentListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssignmentLists/GetAssignmentListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAssignmentListForEdit'
    abp.services.app.assignmentLists.getAssignmentListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssignmentLists/GetAssignmentListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.assignmentLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssignmentLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.assignmentLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssignmentLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAssignmentListsToExcel'
    abp.services.app.assignmentLists.getAssignmentListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssignmentLists/GetAssignmentListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'titleFilter', value: input.titleFilter }, { name: 'assignmentFilter', value: input.assignmentFilter }, { name: 'userNameFilter', value: input.userNameFilter }, { name: 'groupChatListNameFilter', value: input.groupChatListNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllUserForTableDropdown'
    abp.services.app.assignmentLists.getAllUserForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssignmentLists/GetAllUserForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllGroupChatListForTableDropdown'
    abp.services.app.assignmentLists.getAllGroupChatListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssignmentLists/GetAllGroupChatListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'sportsTeamLists'
  (function(){

    abp.services.app.sportsTeamLists = abp.services.app.sportsTeamLists || {};

    // action 'getAll'
    abp.services.app.sportsTeamLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportsTeamLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSportsTeamListForView'
    abp.services.app.sportsTeamLists.getSportsTeamListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportsTeamLists/GetSportsTeamListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSportsTeamListForEdit'
    abp.services.app.sportsTeamLists.getSportsTeamListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportsTeamLists/GetSportsTeamListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.sportsTeamLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportsTeamLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.sportsTeamLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportsTeamLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getSportsTeamListsToExcel'
    abp.services.app.sportsTeamLists.getSportsTeamListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportsTeamLists/GetSportsTeamListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'sportsAwardLists'
  (function(){

    abp.services.app.sportsAwardLists = abp.services.app.sportsAwardLists || {};

    // action 'getAll'
    abp.services.app.sportsAwardLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportsAwardLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'refFilter', value: input.refFilter }, { name: 'sportsMemberCategoryFilter', value: input.sportsMemberCategoryFilter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSportsAwardListForView'
    abp.services.app.sportsAwardLists.getSportsAwardListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportsAwardLists/GetSportsAwardListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSportsAwardListForEdit'
    abp.services.app.sportsAwardLists.getSportsAwardListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportsAwardLists/GetSportsAwardListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.sportsAwardLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportsAwardLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.sportsAwardLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportsAwardLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getSportsAwardListsToExcel'
    abp.services.app.sportsAwardLists.getSportsAwardListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportsAwardLists/GetSportsAwardListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'refFilter', value: input.refFilter }, { name: 'sportsMemberCategoryFilter', value: input.sportsMemberCategoryFilter }, { name: 'nameFilter', value: input.nameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'sportMemberLists'
  (function(){

    abp.services.app.sportMemberLists = abp.services.app.sportMemberLists || {};

    // action 'getAll'
    abp.services.app.sportMemberLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportMemberLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'studentDetailIdFilter', value: input.studentDetailIdFilter }, { name: 'sportsTeamListNameFilter', value: input.sportsTeamListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSportMemberListForView'
    abp.services.app.sportMemberLists.getSportMemberListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportMemberLists/GetSportMemberListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSportMemberListForEdit'
    abp.services.app.sportMemberLists.getSportMemberListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportMemberLists/GetSportMemberListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.sportMemberLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportMemberLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.sportMemberLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportMemberLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getSportMemberListsToExcel'
    abp.services.app.sportMemberLists.getSportMemberListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportMemberLists/GetSportMemberListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'studentDetailIdFilter', value: input.studentDetailIdFilter }, { name: 'sportsTeamListNameFilter', value: input.sportsTeamListNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllStudentDetailForLookupTable'
    abp.services.app.sportMemberLists.getAllStudentDetailForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportMemberLists/GetAllStudentDetailForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sportsTeamId', value: input.sportsTeamId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllSportsTeamListForLookupTable'
    abp.services.app.sportMemberLists.getAllSportsTeamListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportMemberLists/GetAllSportsTeamListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sportsTeamId', value: input.sportsTeamId }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'sportItemLists'
  (function(){

    abp.services.app.sportItemLists = abp.services.app.sportItemLists || {};

    // action 'getAll'
    abp.services.app.sportItemLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportItemLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'sportCategoryListNameFilter', value: input.sportCategoryListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSportItemListForView'
    abp.services.app.sportItemLists.getSportItemListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportItemLists/GetSportItemListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSportItemListForEdit'
    abp.services.app.sportItemLists.getSportItemListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportItemLists/GetSportItemListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.sportItemLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportItemLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'markSportItemIactive'
    abp.services.app.sportItemLists.markSportItemIactive = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportItemLists/MarkSportItemIactive',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.sportItemLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportItemLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getSportItemListsToExcel'
    abp.services.app.sportItemLists.getSportItemListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportItemLists/GetSportItemListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'sportCategoryListNameFilter', value: input.sportCategoryListNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllSportCategoryListForTableDropdown'
    abp.services.app.sportItemLists.getAllSportCategoryListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportItemLists/GetAllSportCategoryListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'sportItemsBorrowedLists'
  (function(){

    abp.services.app.sportItemsBorrowedLists = abp.services.app.sportItemsBorrowedLists || {};

    // action 'getAll'
    abp.services.app.sportItemsBorrowedLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportItemsBorrowedLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'studentDetailIdFilter', value: input.studentDetailIdFilter }, { name: 'sportItemListNameFilter', value: input.sportItemListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSportItemsBorrowedListForView'
    abp.services.app.sportItemsBorrowedLists.getSportItemsBorrowedListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportItemsBorrowedLists/GetSportItemsBorrowedListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSportItemsBorrowedListForEdit'
    abp.services.app.sportItemsBorrowedLists.getSportItemsBorrowedListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportItemsBorrowedLists/GetSportItemsBorrowedListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.sportItemsBorrowedLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportItemsBorrowedLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'returnBorrowedItem'
    abp.services.app.sportItemsBorrowedLists.returnBorrowedItem = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportItemsBorrowedLists/ReturnBorrowedItem',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.sportItemsBorrowedLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportItemsBorrowedLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getSportItemsBorrowedListsToExcel'
    abp.services.app.sportItemsBorrowedLists.getSportItemsBorrowedListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportItemsBorrowedLists/GetSportItemsBorrowedListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'studentDetailIdFilter', value: input.studentDetailIdFilter }, { name: 'sportItemListNameFilter', value: input.sportItemListNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllStudentDetailForLookupTable'
    abp.services.app.sportItemsBorrowedLists.getAllStudentDetailForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportItemsBorrowedLists/GetAllStudentDetailForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'categoryFilter', value: input.categoryFilter }, { name: 'refFilter', value: input.refFilter }, { name: 'showMembersFilter', value: input.showMembersFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllSportItemListForLookupTable'
    abp.services.app.sportItemsBorrowedLists.getAllSportItemListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportItemsBorrowedLists/GetAllSportItemListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'categoryFilter', value: input.categoryFilter }, { name: 'refFilter', value: input.refFilter }, { name: 'showMembersFilter', value: input.showMembersFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'sportItemsBorrowedDetailLists'
  (function(){

    abp.services.app.sportItemsBorrowedDetailLists = abp.services.app.sportItemsBorrowedDetailLists || {};

    // action 'getAll'
    abp.services.app.sportItemsBorrowedDetailLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportItemsBorrowedDetailLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'itemListNameFilter', value: input.itemListNameFilter }, { name: 'sportItemsBorrowedListNotesFilter', value: input.sportItemsBorrowedListNotesFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSportItemsBorrowedDetailListForView'
    abp.services.app.sportItemsBorrowedDetailLists.getSportItemsBorrowedDetailListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportItemsBorrowedDetailLists/GetSportItemsBorrowedDetailListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSportItemsBorrowedDetailListForEdit'
    abp.services.app.sportItemsBorrowedDetailLists.getSportItemsBorrowedDetailListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportItemsBorrowedDetailLists/GetSportItemsBorrowedDetailListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.sportItemsBorrowedDetailLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportItemsBorrowedDetailLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'returnItems'
    abp.services.app.sportItemsBorrowedDetailLists.returnItems = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportItemsBorrowedDetailLists/ReturnItems',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.sportItemsBorrowedDetailLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportItemsBorrowedDetailLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getSportItemsBorrowedDetailListsToExcel'
    abp.services.app.sportItemsBorrowedDetailLists.getSportItemsBorrowedDetailListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportItemsBorrowedDetailLists/GetSportItemsBorrowedDetailListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'itemListNameFilter', value: input.itemListNameFilter }, { name: 'sportItemsBorrowedListNotesFilter', value: input.sportItemsBorrowedListNotesFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllItemListForLookupTable'
    abp.services.app.sportItemsBorrowedDetailLists.getAllItemListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportItemsBorrowedDetailLists/GetAllItemListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllSportItemsBorrowedListForTableDropdown'
    abp.services.app.sportItemsBorrowedDetailLists.getAllSportItemsBorrowedListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportItemsBorrowedDetailLists/GetAllSportItemsBorrowedListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'sportCategoryLists'
  (function(){

    abp.services.app.sportCategoryLists = abp.services.app.sportCategoryLists || {};

    // action 'getAll'
    abp.services.app.sportCategoryLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportCategoryLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSportCategoryListForView'
    abp.services.app.sportCategoryLists.getSportCategoryListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportCategoryLists/GetSportCategoryListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSportCategoryListForEdit'
    abp.services.app.sportCategoryLists.getSportCategoryListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportCategoryLists/GetSportCategoryListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.sportCategoryLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportCategoryLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.sportCategoryLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportCategoryLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getSportCategoryListsToExcel'
    abp.services.app.sportCategoryLists.getSportCategoryListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SportCategoryLists/GetSportCategoryListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'session'
  (function(){

    abp.services.app.session = abp.services.app.session || {};

    // action 'getCurrentLoginInformations'
    abp.services.app.session.getCurrentLoginInformations = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Session/GetCurrentLoginInformations',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'updateUserSignInToken'
    abp.services.app.session.updateUserSignInToken = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Session/UpdateUserSignInToken',
        type: 'PUT'
      }, ajaxParams));;
    };

  })();

  // controller 'receiptBooks'
  (function(){

    abp.services.app.receiptBooks = abp.services.app.receiptBooks || {};

    // action 'getAll'
    abp.services.app.receiptBooks.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ReceiptBooks/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'receiptNumberFilter', value: input.receiptNumberFilter }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'maxActualDateFilter', value: input.maxActualDateFilter }, { name: 'minActualDateFilter', value: input.minActualDateFilter }, { name: 'modeNumberFilter', value: input.modeNumberFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentStatement'
    abp.services.app.receiptBooks.getStudentStatement = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ReceiptBooks/GetStudentStatement' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'receiptNumberFilter', value: input.receiptNumberFilter }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'maxActualDateFilter', value: input.maxActualDateFilter }, { name: 'minActualDateFilter', value: input.minActualDateFilter }, { name: 'modeNumberFilter', value: input.modeNumberFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentFeeStructure'
    abp.services.app.receiptBooks.getStudentFeeStructure = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ReceiptBooks/GetStudentFeeStructure' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'receiptNumberFilter', value: input.receiptNumberFilter }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'maxActualDateFilter', value: input.maxActualDateFilter }, { name: 'minActualDateFilter', value: input.minActualDateFilter }, { name: 'modeNumberFilter', value: input.modeNumberFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentdetailsStatement'
    abp.services.app.receiptBooks.getStudentdetailsStatement = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ReceiptBooks/GetStudentdetailsStatement' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'receiptNumberFilter', value: input.receiptNumberFilter }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'maxActualDateFilter', value: input.maxActualDateFilter }, { name: 'minActualDateFilter', value: input.minActualDateFilter }, { name: 'modeNumberFilter', value: input.modeNumberFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getReceiptBookForView'
    abp.services.app.receiptBooks.getReceiptBookForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ReceiptBooks/GetReceiptBookForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getReceiptBookForEdit'
    abp.services.app.receiptBooks.getReceiptBookForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ReceiptBooks/GetReceiptBookForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.receiptBooks.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ReceiptBooks/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.receiptBooks['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ReceiptBooks/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getReceiptBooksToExcel'
    abp.services.app.receiptBooks.getReceiptBooksToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ReceiptBooks/GetReceiptBooksToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'receiptNumberFilter', value: input.receiptNumberFilter }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'maxActualDateFilter', value: input.maxActualDateFilter }, { name: 'minActualDateFilter', value: input.minActualDateFilter }, { name: 'modeNumberFilter', value: input.modeNumberFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'mpesaServiceLists'
  (function(){

    abp.services.app.mpesaServiceLists = abp.services.app.mpesaServiceLists || {};

    // action 'getAll'
    abp.services.app.mpesaServiceLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MpesaServiceLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'maxDatePlacedFilter', value: input.maxDatePlacedFilter }, { name: 'minDatePlacedFilter', value: input.minDatePlacedFilter }, { name: 'phoneNumberFilter', value: input.phoneNumberFilter }, { name: 'accountNoFilter', value: input.accountNoFilter }, { name: 'transactionRefFilter', value: input.transactionRefFilter }, { name: 'maxAmountFilter', value: input.maxAmountFilter }, { name: 'minAmountFilter', value: input.minAmountFilter }, { name: 'messageFilter', value: input.messageFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'accValidFilter', value: input.accValidFilter }, { name: 'receiptNumberFilter', value: input.receiptNumberFilter }, { name: 'categoryFilter', value: input.categoryFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getMpesaServiceListForView'
    abp.services.app.mpesaServiceLists.getMpesaServiceListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MpesaServiceLists/GetMpesaServiceListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getMpesaServiceListForEdit'
    abp.services.app.mpesaServiceLists.getMpesaServiceListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MpesaServiceLists/GetMpesaServiceListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.mpesaServiceLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MpesaServiceLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.mpesaServiceLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MpesaServiceLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getMpesaServiceListsToExcel'
    abp.services.app.mpesaServiceLists.getMpesaServiceListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MpesaServiceLists/GetMpesaServiceListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'maxDatePlacedFilter', value: input.maxDatePlacedFilter }, { name: 'minDatePlacedFilter', value: input.minDatePlacedFilter }, { name: 'phoneNumberFilter', value: input.phoneNumberFilter }, { name: 'accountNoFilter', value: input.accountNoFilter }, { name: 'transactionRefFilter', value: input.transactionRefFilter }, { name: 'maxAmountFilter', value: input.maxAmountFilter }, { name: 'minAmountFilter', value: input.minAmountFilter }, { name: 'messageFilter', value: input.messageFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'accValidFilter', value: input.accValidFilter }, { name: 'receiptNumberFilter', value: input.receiptNumberFilter }, { name: 'categoryFilter', value: input.categoryFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'supplierLists'
  (function(){

    abp.services.app.supplierLists = abp.services.app.supplierLists || {};

    // action 'getAll'
    abp.services.app.supplierLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SupplierLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'typeFilter', value: input.typeFilter }, { name: 'emailFilter', value: input.emailFilter }, { name: 'telephoneFilter', value: input.telephoneFilter }, { name: 'addressFilter', value: input.addressFilter }, { name: 'notesFilter', value: input.notesFilter }, { name: 'closedFilter', value: input.closedFilter }, { name: 'sPGRefNoFilter', value: input.sPGRefNoFilter }, { name: 'kRAPINNoFilter', value: input.kRAPINNoFilter }, { name: 'directorsFilter', value: input.directorsFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSupplierListForView'
    abp.services.app.supplierLists.getSupplierListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SupplierLists/GetSupplierListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSupplierListForEdit'
    abp.services.app.supplierLists.getSupplierListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SupplierLists/GetSupplierListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.supplierLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SupplierLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.supplierLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SupplierLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getSupplierListsToExcel'
    abp.services.app.supplierLists.getSupplierListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SupplierLists/GetSupplierListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'typeFilter', value: input.typeFilter }, { name: 'emailFilter', value: input.emailFilter }, { name: 'telephoneFilter', value: input.telephoneFilter }, { name: 'addressFilter', value: input.addressFilter }, { name: 'notesFilter', value: input.notesFilter }, { name: 'closedFilter', value: input.closedFilter }, { name: 'sPGRefNoFilter', value: input.sPGRefNoFilter }, { name: 'kRAPINNoFilter', value: input.kRAPINNoFilter }, { name: 'directorsFilter', value: input.directorsFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'procSettingsLists'
  (function(){

    abp.services.app.procSettingsLists = abp.services.app.procSettingsLists || {};

    // action 'getAll'
    abp.services.app.procSettingsLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcSettingsLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'deliverToFilter', value: input.deliverToFilter }, { name: 'reqOnFilter', value: input.reqOnFilter }, { name: 'pOStatusStartFilter', value: input.pOStatusStartFilter }, { name: 'pOStatusFinalFilter', value: input.pOStatusFinalFilter }, { name: 'changeCostFilter', value: input.changeCostFilter }, { name: 'printHeaderFilter', value: input.printHeaderFilter }, { name: 'topMarginFilter', value: input.topMarginFilter }, { name: 'salutationFilter', value: input.salutationFilter }, { name: 'pOSignFilter', value: input.pOSignFilter }, { name: 'pOFooterFilter', value: input.pOFooterFilter }, { name: 'pVFooterFilter', value: input.pVFooterFilter }, { name: 'pVPrintHeaderFilter', value: input.pVPrintHeaderFilter }, { name: 'pVTopMarginFilter', value: input.pVTopMarginFilter }, { name: 'reqReqOnFilter', value: input.reqReqOnFilter }, { name: 'reqPrintHeaderFilter', value: input.reqPrintHeaderFilter }, { name: 'reqTopMarginFilter', value: input.reqTopMarginFilter }, { name: 'reqFooterFilter', value: input.reqFooterFilter }, { name: 'invPrintHeaderFilter', value: input.invPrintHeaderFilter }, { name: 'invTopMarginFilter', value: input.invTopMarginFilter }, { name: 'invFooterFilter', value: input.invFooterFilter }, { name: 'onlineReqFooterFilter', value: input.onlineReqFooterFilter }, { name: 'iONCodeFilter', value: input.iONCodeFilter }, { name: 'lPOCodeFilter', value: input.lPOCodeFilter }, { name: 'gRNCodeFilter', value: input.gRNCodeFilter }, { name: 'iDNCodeFilter', value: input.iDNCodeFilter }, { name: 'iDNACodeFilter', value: input.iDNACodeFilter }, { name: 'checkedByUIOFilter', value: input.checkedByUIOFilter }, { name: 'approvedByUIOFilter', value: input.approvedByUIOFilter }, { name: 'checkedByAIOFilter', value: input.checkedByAIOFilter }, { name: 'approvedByAIOFilter', value: input.approvedByAIOFilter }, { name: 'checkedByLPOFilter', value: input.checkedByLPOFilter }, { name: 'approvedByLPOFilter', value: input.approvedByLPOFilter }, { name: 'approvedByGRNFilter', value: input.approvedByGRNFilter }, { name: 'gRNHideSign1Filter', value: input.gRNHideSign1Filter }, { name: 'gRNHideSign2Filter', value: input.gRNHideSign2Filter }, { name: 'gRNHideSign3Filter', value: input.gRNHideSign3Filter }, { name: 'gRNHideApproverFilter', value: input.gRNHideApproverFilter }, { name: 'gRNHideApproverCaptionFilter', value: input.gRNHideApproverCaptionFilter }, { name: 'checkedByAIOBelowFilter', value: input.checkedByAIOBelowFilter }, { name: 'checkedByAIO2Filter', value: input.checkedByAIO2Filter }, { name: 'checkedByAIO2BelowFilter', value: input.checkedByAIO2BelowFilter }, { name: 'checkedByAIO3Filter', value: input.checkedByAIO3Filter }, { name: 'checkedByAIO3BelowFilter', value: input.checkedByAIO3BelowFilter }, { name: 'examinedByAIOFilter', value: input.examinedByAIOFilter }, { name: 'examinedByAIOBelowFilter', value: input.examinedByAIOBelowFilter }, { name: 'approvedByAIOBelowFilter', value: input.approvedByAIOBelowFilter }, { name: 'checkedByAIOHideFilter', value: input.checkedByAIOHideFilter }, { name: 'checkedByAIO2HideFilter', value: input.checkedByAIO2HideFilter }, { name: 'checkedByAIO3HideFilter', value: input.checkedByAIO3HideFilter }, { name: 'examinedByAIOHideFilter', value: input.examinedByAIOHideFilter }, { name: 'approvedByAIOHideFilter', value: input.approvedByAIOHideFilter }, { name: 'lPOHideProcFilter', value: input.lPOHideProcFilter }, { name: 'lPOHideFinanceFilter', value: input.lPOHideFinanceFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getProcSettingsListForEdit'
    abp.services.app.procSettingsLists.getProcSettingsListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcSettingsLists/GetProcSettingsListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.procSettingsLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcSettingsLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.procSettingsLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProcSettingsLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'itemLists'
  (function(){

    abp.services.app.itemLists = abp.services.app.itemLists || {};

    // action 'getAll'
    abp.services.app.itemLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'maxStockLevelFilter', value: input.maxStockLevelFilter }, { name: 'minStockLevelFilter', value: input.minStockLevelFilter }, { name: 'maxStockAvailableFilter', value: input.maxStockAvailableFilter }, { name: 'minStockAvailableFilter', value: input.minStockAvailableFilter }, { name: 'nonStockFilter', value: input.nonStockFilter }, { name: 'itemTypeListNameFilter', value: input.itemTypeListNameFilter }, { name: 'itemUOMListNameFilter', value: input.itemUOMListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getItemListForView'
    abp.services.app.itemLists.getItemListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemLists/GetItemListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getItemsToBorrow'
    abp.services.app.itemLists.getItemsToBorrow = function(itemList, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemLists/GetItemsToBorrow' + abp.utils.buildQueryString([{ name: 'itemList', value: itemList }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getItemListForEdit'
    abp.services.app.itemLists.getItemListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemLists/GetItemListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.itemLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.itemLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getItemListsToExcel'
    abp.services.app.itemLists.getItemListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemLists/GetItemListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'maxStockLevelFilter', value: input.maxStockLevelFilter }, { name: 'minStockLevelFilter', value: input.minStockLevelFilter }, { name: 'maxStockAvailableFilter', value: input.maxStockAvailableFilter }, { name: 'minStockAvailableFilter', value: input.minStockAvailableFilter }, { name: 'nonStockFilter', value: input.nonStockFilter }, { name: 'itemTypeListNameFilter', value: input.itemTypeListNameFilter }, { name: 'itemUOMListNameFilter', value: input.itemUOMListNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllItemTypeListForTableDropdown'
    abp.services.app.itemLists.getAllItemTypeListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemLists/GetAllItemTypeListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllItemUOMListForTableDropdown'
    abp.services.app.itemLists.getAllItemUOMListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemLists/GetAllItemUOMListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'itemUOMLists'
  (function(){

    abp.services.app.itemUOMLists = abp.services.app.itemUOMLists || {};

    // action 'getAll'
    abp.services.app.itemUOMLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemUOMLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getItemUOMListForView'
    abp.services.app.itemUOMLists.getItemUOMListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemUOMLists/GetItemUOMListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getItemUOMListForEdit'
    abp.services.app.itemUOMLists.getItemUOMListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemUOMLists/GetItemUOMListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.itemUOMLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemUOMLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.itemUOMLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemUOMLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getItemUOMListsToExcel'
    abp.services.app.itemUOMLists.getItemUOMListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemUOMLists/GetItemUOMListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'itemTypeLists'
  (function(){

    abp.services.app.itemTypeLists = abp.services.app.itemTypeLists || {};

    // action 'getAll'
    abp.services.app.itemTypeLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemTypeLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getItemTypeListForView'
    abp.services.app.itemTypeLists.getItemTypeListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemTypeLists/GetItemTypeListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getItemTypeListForEdit'
    abp.services.app.itemTypeLists.getItemTypeListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemTypeLists/GetItemTypeListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.itemTypeLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemTypeLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.itemTypeLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemTypeLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getItemTypeListsToExcel'
    abp.services.app.itemTypeLists.getItemTypeListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemTypeLists/GetItemTypeListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'itemRequisitionLists'
  (function(){

    abp.services.app.itemRequisitionLists = abp.services.app.itemRequisitionLists || {};

    // action 'getAll'
    abp.services.app.itemRequisitionLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemRequisitionLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'reqNoFilter', value: input.reqNoFilter }, { name: 'supRefFilter', value: input.supRefFilter }, { name: 'deliverToFilter', value: input.deliverToFilter }, { name: 'voteFilter', value: input.voteFilter }, { name: 'departmentFilter', value: input.departmentFilter }, { name: 'reqOnFilter', value: input.reqOnFilter }, { name: 'maxRDateFilter', value: input.maxRDateFilter }, { name: 'minRDateFilter', value: input.minRDateFilter }, { name: 'personnelFilter', value: input.personnelFilter }, { name: 'quotationNoFilter', value: input.quotationNoFilter }, { name: 'branchFilter', value: input.branchFilter }, { name: 'maxAmountFilter', value: input.maxAmountFilter }, { name: 'minAmountFilter', value: input.minAmountFilter }, { name: 'approvalFilter', value: input.approvalFilter }, { name: 'reqNoNewFilter', value: input.reqNoNewFilter }, { name: 'verifiedFilter', value: input.verifiedFilter }, { name: 'supplierListNameFilter', value: input.supplierListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getItemRequisitionListForView'
    abp.services.app.itemRequisitionLists.getItemRequisitionListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemRequisitionLists/GetItemRequisitionListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getItemRequisitionListForEdit'
    abp.services.app.itemRequisitionLists.getItemRequisitionListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemRequisitionLists/GetItemRequisitionListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.itemRequisitionLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemRequisitionLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'createRequesitionByAdmin'
    abp.services.app.itemRequisitionLists.createRequesitionByAdmin = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemRequisitionLists/CreateRequesitionByAdmin',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'createRequesitionByUser'
    abp.services.app.itemRequisitionLists.createRequesitionByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemRequisitionLists/CreateRequesitionByUser',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.itemRequisitionLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemRequisitionLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'verifyItemRequisition'
    abp.services.app.itemRequisitionLists.verifyItemRequisition = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemRequisitionLists/VerifyItemRequisition',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'unverifyItemRequisition'
    abp.services.app.itemRequisitionLists.unverifyItemRequisition = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemRequisitionLists/UnverifyItemRequisition',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'approveItemRequisition'
    abp.services.app.itemRequisitionLists.approveItemRequisition = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemRequisitionLists/ApproveItemRequisition',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getItemRequisitionListsToExcel'
    abp.services.app.itemRequisitionLists.getItemRequisitionListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemRequisitionLists/GetItemRequisitionListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'reqNoFilter', value: input.reqNoFilter }, { name: 'supRefFilter', value: input.supRefFilter }, { name: 'deliverToFilter', value: input.deliverToFilter }, { name: 'voteFilter', value: input.voteFilter }, { name: 'departmentFilter', value: input.departmentFilter }, { name: 'reqOnFilter', value: input.reqOnFilter }, { name: 'maxRDateFilter', value: input.maxRDateFilter }, { name: 'minRDateFilter', value: input.minRDateFilter }, { name: 'personnelFilter', value: input.personnelFilter }, { name: 'quotationNoFilter', value: input.quotationNoFilter }, { name: 'branchFilter', value: input.branchFilter }, { name: 'maxAmountFilter', value: input.maxAmountFilter }, { name: 'minAmountFilter', value: input.minAmountFilter }, { name: 'approvalFilter', value: input.approvalFilter }, { name: 'reqNoNewFilter', value: input.reqNoNewFilter }, { name: 'verifiedFilter', value: input.verifiedFilter }, { name: 'supplierListNameFilter', value: input.supplierListNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllSupplierListForTableDropdown'
    abp.services.app.itemRequisitionLists.getAllSupplierListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemRequisitionLists/GetAllSupplierListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllItemListForLookupTable'
    abp.services.app.itemRequisitionLists.getAllItemListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemRequisitionLists/GetAllItemListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByUser'
    abp.services.app.itemRequisitionLists.getAllByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemRequisitionLists/GetAllByUser' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'reqNoFilter', value: input.reqNoFilter }, { name: 'supRefFilter', value: input.supRefFilter }, { name: 'deliverToFilter', value: input.deliverToFilter }, { name: 'voteFilter', value: input.voteFilter }, { name: 'departmentFilter', value: input.departmentFilter }, { name: 'reqOnFilter', value: input.reqOnFilter }, { name: 'maxRDateFilter', value: input.maxRDateFilter }, { name: 'minRDateFilter', value: input.minRDateFilter }, { name: 'personnelFilter', value: input.personnelFilter }, { name: 'quotationNoFilter', value: input.quotationNoFilter }, { name: 'branchFilter', value: input.branchFilter }, { name: 'maxAmountFilter', value: input.maxAmountFilter }, { name: 'minAmountFilter', value: input.minAmountFilter }, { name: 'approvalFilter', value: input.approvalFilter }, { name: 'reqNoNewFilter', value: input.reqNoNewFilter }, { name: 'verifiedFilter', value: input.verifiedFilter }, { name: 'supplierListNameFilter', value: input.supplierListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'itemDetailRequisitionLists'
  (function(){

    abp.services.app.itemDetailRequisitionLists = abp.services.app.itemDetailRequisitionLists || {};

    // action 'getAll'
    abp.services.app.itemDetailRequisitionLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemDetailRequisitionLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'reqNoFilter', value: input.reqNoFilter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'specFilter', value: input.specFilter }, { name: 'maxQtyFilter', value: input.maxQtyFilter }, { name: 'minQtyFilter', value: input.minQtyFilter }, { name: 'vATFilter', value: input.vATFilter }, { name: 'supRefFilter', value: input.supRefFilter }, { name: 'toStoreFilter', value: input.toStoreFilter }, { name: 'itemRequisitionListReqNoFilter', value: input.itemRequisitionListReqNoFilter }, { name: 'itemListNameFilter', value: input.itemListNameFilter }, { name: 'supplierListNameFilter', value: input.supplierListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getItemDetailRequisitionListForView'
    abp.services.app.itemDetailRequisitionLists.getItemDetailRequisitionListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemDetailRequisitionLists/GetItemDetailRequisitionListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getItemDetailRequisitionListForEdit'
    abp.services.app.itemDetailRequisitionLists.getItemDetailRequisitionListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemDetailRequisitionLists/GetItemDetailRequisitionListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.itemDetailRequisitionLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemDetailRequisitionLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.itemDetailRequisitionLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemDetailRequisitionLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getItemDetailRequisitionListsToExcel'
    abp.services.app.itemDetailRequisitionLists.getItemDetailRequisitionListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemDetailRequisitionLists/GetItemDetailRequisitionListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'reqNoFilter', value: input.reqNoFilter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'specFilter', value: input.specFilter }, { name: 'maxQtyFilter', value: input.maxQtyFilter }, { name: 'minQtyFilter', value: input.minQtyFilter }, { name: 'vATFilter', value: input.vATFilter }, { name: 'supRefFilter', value: input.supRefFilter }, { name: 'toStoreFilter', value: input.toStoreFilter }, { name: 'itemRequisitionListReqNoFilter', value: input.itemRequisitionListReqNoFilter }, { name: 'itemListNameFilter', value: input.itemListNameFilter }, { name: 'supplierListNameFilter', value: input.supplierListNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllItemRequisitionListForLookupTable'
    abp.services.app.itemDetailRequisitionLists.getAllItemRequisitionListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemDetailRequisitionLists/GetAllItemRequisitionListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllItemListForTableDropdown'
    abp.services.app.itemDetailRequisitionLists.getAllItemListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemDetailRequisitionLists/GetAllItemListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllSupplierListForLookupTable'
    abp.services.app.itemDetailRequisitionLists.getAllSupplierListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemDetailRequisitionLists/GetAllSupplierListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'itemAwardLists'
  (function(){

    abp.services.app.itemAwardLists = abp.services.app.itemAwardLists || {};

    // action 'getAll'
    abp.services.app.itemAwardLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemAwardLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'fyearFilter', value: input.fyearFilter }, { name: 'supRefFilter', value: input.supRefFilter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'maxCostFilter', value: input.maxCostFilter }, { name: 'minCostFilter', value: input.minCostFilter }, { name: 'itemListNameFilter', value: input.itemListNameFilter }, { name: 'supplierListNameFilter', value: input.supplierListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getItemAwardListForView'
    abp.services.app.itemAwardLists.getItemAwardListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemAwardLists/GetItemAwardListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getItemAwardListForEdit'
    abp.services.app.itemAwardLists.getItemAwardListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemAwardLists/GetItemAwardListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.itemAwardLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemAwardLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.itemAwardLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemAwardLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getItemAwardListsToExcel'
    abp.services.app.itemAwardLists.getItemAwardListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemAwardLists/GetItemAwardListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'fyearFilter', value: input.fyearFilter }, { name: 'supRefFilter', value: input.supRefFilter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'maxCostFilter', value: input.maxCostFilter }, { name: 'minCostFilter', value: input.minCostFilter }, { name: 'itemListNameFilter', value: input.itemListNameFilter }, { name: 'supplierListNameFilter', value: input.supplierListNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllItemListForTableDropdown'
    abp.services.app.itemAwardLists.getAllItemListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemAwardLists/GetAllItemListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllSupplierListForLookupTable'
    abp.services.app.itemAwardLists.getAllSupplierListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemAwardLists/GetAllSupplierListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllItemAwardListForLookupTable'
    abp.services.app.itemAwardLists.getAllItemAwardListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ItemAwardLists/GetAllItemAwardListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'payPeriodLists'
  (function(){

    abp.services.app.payPeriodLists = abp.services.app.payPeriodLists || {};

    // action 'getAll'
    abp.services.app.payPeriodLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PayPeriodLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'rYearFilter', value: input.rYearFilter }, { name: 'namesFilter', value: input.namesFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPayPeriodListForView'
    abp.services.app.payPeriodLists.getPayPeriodListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PayPeriodLists/GetPayPeriodListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPayPeriodListForEdit'
    abp.services.app.payPeriodLists.getPayPeriodListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PayPeriodLists/GetPayPeriodListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.payPeriodLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PayPeriodLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.payPeriodLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PayPeriodLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAllPayrollPeriodForLookupTable'
    abp.services.app.payPeriodLists.getAllPayrollPeriodForLookupTable = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PayPeriodLists/GetAllPayrollPeriodForLookupTable',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllPayrollPeriodYearsForLookupTable'
    abp.services.app.payPeriodLists.getAllPayrollPeriodYearsForLookupTable = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PayPeriodLists/GetAllPayrollPeriodYearsForLookupTable',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'paymentTransactionLists'
  (function(){

    abp.services.app.paymentTransactionLists = abp.services.app.paymentTransactionLists || {};

    // action 'getAll'
    abp.services.app.paymentTransactionLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentTransactionLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'paymentCategoryFilter', value: input.paymentCategoryFilter }, { name: 'transactionIdFilter', value: input.transactionIdFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'phoneNumberFilter', value: input.phoneNumberFilter }, { name: 'transactionTypeFilter', value: input.transactionTypeFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPaymentTransactionListForView'
    abp.services.app.paymentTransactionLists.getPaymentTransactionListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentTransactionLists/GetPaymentTransactionListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPaymentTransactionListByTransationIdForView'
    abp.services.app.paymentTransactionLists.getPaymentTransactionListByTransationIdForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentTransactionLists/GetPaymentTransactionListByTransationIdForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPaymentTransactionListForEdit'
    abp.services.app.paymentTransactionLists.getPaymentTransactionListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentTransactionLists/GetPaymentTransactionListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.paymentTransactionLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentTransactionLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'reverseTransation'
    abp.services.app.paymentTransactionLists.reverseTransation = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentTransactionLists/ReverseTransation',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.paymentTransactionLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PaymentTransactionLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'organizationUnit'
  (function(){

    abp.services.app.organizationUnit = abp.services.app.organizationUnit || {};

    // action 'getOrganizationUnits'
    abp.services.app.organizationUnit.getOrganizationUnits = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/GetOrganizationUnits',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getOrganizationUnitUsers'
    abp.services.app.organizationUnit.getOrganizationUnitUsers = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/GetOrganizationUnitUsers' + abp.utils.buildQueryString([{ name: 'id', value: input.id }, { name: 'sorting', value: input.sorting }, { name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getOrganizationUnitRoles'
    abp.services.app.organizationUnit.getOrganizationUnitRoles = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/GetOrganizationUnitRoles' + abp.utils.buildQueryString([{ name: 'id', value: input.id }, { name: 'sorting', value: input.sorting }, { name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrganizationUnit'
    abp.services.app.organizationUnit.createOrganizationUnit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/CreateOrganizationUnit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'updateOrganizationUnit'
    abp.services.app.organizationUnit.updateOrganizationUnit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/UpdateOrganizationUnit',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'moveOrganizationUnit'
    abp.services.app.organizationUnit.moveOrganizationUnit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/MoveOrganizationUnit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'deleteOrganizationUnit'
    abp.services.app.organizationUnit.deleteOrganizationUnit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/DeleteOrganizationUnit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'removeUserFromOrganizationUnit'
    abp.services.app.organizationUnit.removeUserFromOrganizationUnit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/RemoveUserFromOrganizationUnit' + abp.utils.buildQueryString([{ name: 'userId', value: input.userId }, { name: 'organizationUnitId', value: input.organizationUnitId }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'removeRoleFromOrganizationUnit'
    abp.services.app.organizationUnit.removeRoleFromOrganizationUnit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/RemoveRoleFromOrganizationUnit' + abp.utils.buildQueryString([{ name: 'roleId', value: input.roleId }, { name: 'organizationUnitId', value: input.organizationUnitId }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'addUsersToOrganizationUnit'
    abp.services.app.organizationUnit.addUsersToOrganizationUnit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/AddUsersToOrganizationUnit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'addRolesToOrganizationUnit'
    abp.services.app.organizationUnit.addRolesToOrganizationUnit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/AddRolesToOrganizationUnit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'findUsers'
    abp.services.app.organizationUnit.findUsers = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/FindUsers',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'findRoles'
    abp.services.app.organizationUnit.findRoles = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationUnit/FindRoles',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

  })();

  // controller 'organizatonSettingLists'
  (function(){

    abp.services.app.organizatonSettingLists = abp.services.app.organizatonSettingLists || {};

    // action 'getOrganizatonSetting'
    abp.services.app.organizatonSettingLists.getOrganizatonSetting = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizatonSettingLists/GetOrganizatonSetting',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getOrganizatonName'
    abp.services.app.organizatonSettingLists.getOrganizatonName = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizatonSettingLists/GetOrganizatonName',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getClassTypeList'
    abp.services.app.organizatonSettingLists.getClassTypeList = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizatonSettingLists/GetClassTypeList',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAboutUsList'
    abp.services.app.organizatonSettingLists.getAboutUsList = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizatonSettingLists/GetAboutUsList',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getIntake'
    abp.services.app.organizatonSettingLists.getIntake = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizatonSettingLists/GetIntake',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHrSetting'
    abp.services.app.organizatonSettingLists.getHrSetting = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizatonSettingLists/GetHrSetting',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'accessTokenLists'
  (function(){

    abp.services.app.accessTokenLists = abp.services.app.accessTokenLists || {};

    // action 'getAll'
    abp.services.app.accessTokenLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AccessTokenLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'grant_typeFilter', value: input.grant_typeFilter }, { name: 'scopeFilter', value: input.scopeFilter }, { name: 'client_idFilter', value: input.client_idFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAccessTokenListForView'
    abp.services.app.accessTokenLists.getAccessTokenListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AccessTokenLists/GetAccessTokenListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAccessTokenListForEdit'
    abp.services.app.accessTokenLists.getAccessTokenListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AccessTokenLists/GetAccessTokenListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.accessTokenLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AccessTokenLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.accessTokenLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AccessTokenLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'organizationEventLists'
  (function(){

    abp.services.app.organizationEventLists = abp.services.app.organizationEventLists || {};

    // action 'getAll'
    abp.services.app.organizationEventLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationEventLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'maxstartDateFilter', value: input.maxstartDateFilter }, { name: 'minstartDateFilter', value: input.minstartDateFilter }, { name: 'userTargetFilter', value: input.userTargetFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'messageFilter', value: input.messageFilter }, { name: 'maxendDateFilter', value: input.maxendDateFilter }, { name: 'minendDateFilter', value: input.minendDateFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getOrganizationEventListForView'
    abp.services.app.organizationEventLists.getOrganizationEventListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationEventLists/GetOrganizationEventListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getOrganizationEventListForEdit'
    abp.services.app.organizationEventLists.getOrganizationEventListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationEventLists/GetOrganizationEventListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.organizationEventLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationEventLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getCalenderEvents'
    abp.services.app.organizationEventLists.getCalenderEvents = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationEventLists/GetCalenderEvents' + abp.utils.buildQueryString([{ name: 'start', value: input.start }, { name: 'end', value: input.end }, { name: 'title', value: input.title }, { name: 'refId', value: input.refId }, { name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createEvent'
    abp.services.app.organizationEventLists.createEvent = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationEventLists/CreateEvent',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'updateEvent'
    abp.services.app.organizationEventLists.updateEvent = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationEventLists/UpdateEvent',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.organizationEventLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationEventLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getOrganizationEventListsToExcel'
    abp.services.app.organizationEventLists.getOrganizationEventListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/OrganizationEventLists/GetOrganizationEventListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'maxstartDateFilter', value: input.maxstartDateFilter }, { name: 'minstartDateFilter', value: input.minstartDateFilter }, { name: 'userTargetFilter', value: input.userTargetFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'messageFilter', value: input.messageFilter }, { name: 'maxendDateFilter', value: input.maxendDateFilter }, { name: 'minendDateFilter', value: input.minendDateFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'notificationLists'
  (function(){

    abp.services.app.notificationLists = abp.services.app.notificationLists || {};

    // action 'getAll'
    abp.services.app.notificationLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'user_targetFilter', value: input.user_targetFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getNotificationListForView'
    abp.services.app.notificationLists.getNotificationListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationLists/GetNotificationListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getNotificationListForEdit'
    abp.services.app.notificationLists.getNotificationListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationLists/GetNotificationListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.notificationLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.notificationLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getNotificationListsToExcel'
    abp.services.app.notificationLists.getNotificationListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationLists/GetNotificationListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'user_targetFilter', value: input.user_targetFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllRoleForTableDropdown'
    abp.services.app.notificationLists.getAllRoleForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/NotificationLists/GetAllRoleForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'notification'
  (function(){

    abp.services.app.notification = abp.services.app.notification || {};

    // action 'getUserNotifications'
    abp.services.app.notification.getUserNotifications = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Notification/GetUserNotifications' + abp.utils.buildQueryString([{ name: 'state', value: input.state }, { name: 'startDate', value: input.startDate }, { name: 'endDate', value: input.endDate }, { name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'setAllNotificationsAsRead'
    abp.services.app.notification.setAllNotificationsAsRead = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Notification/SetAllNotificationsAsRead',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'setNotificationAsRead'
    abp.services.app.notification.setNotificationAsRead = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Notification/SetNotificationAsRead',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getNotificationSettings'
    abp.services.app.notification.getNotificationSettings = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Notification/GetNotificationSettings',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'updateNotificationSettings'
    abp.services.app.notification.updateNotificationSettings = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Notification/UpdateNotificationSettings',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'deleteNotification'
    abp.services.app.notification.deleteNotification = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Notification/DeleteNotification' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'deleteAllUserNotifications'
    abp.services.app.notification.deleteAllUserNotifications = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Notification/DeleteAllUserNotifications' + abp.utils.buildQueryString([{ name: 'state', value: input.state }, { name: 'startDate', value: input.startDate }, { name: 'endDate', value: input.endDate }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'subscription'
  (function(){

    abp.services.app.subscription = abp.services.app.subscription || {};

    // action 'disableRecurringPayments'
    abp.services.app.subscription.disableRecurringPayments = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Subscription/DisableRecurringPayments',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'enableRecurringPayments'
    abp.services.app.subscription.enableRecurringPayments = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Subscription/EnableRecurringPayments',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'tenant'
  (function(){

    abp.services.app.tenant = abp.services.app.tenant || {};

    // action 'getTenants'
    abp.services.app.tenant.getTenants = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/GetTenants' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'subscriptionEndDateStart', value: input.subscriptionEndDateStart }, { name: 'subscriptionEndDateEnd', value: input.subscriptionEndDateEnd }, { name: 'creationDateStart', value: input.creationDateStart }, { name: 'creationDateEnd', value: input.creationDateEnd }, { name: 'editionId', value: input.editionId }, { name: 'editionIdSpecified', value: input.editionIdSpecified }, { name: 'sorting', value: input.sorting }, { name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createTenant'
    abp.services.app.tenant.createTenant = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/CreateTenant',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getTenantForEdit'
    abp.services.app.tenant.getTenantForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/GetTenantForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'updateTenant'
    abp.services.app.tenant.updateTenant = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/UpdateTenant',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'deleteTenant'
    abp.services.app.tenant.deleteTenant = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/DeleteTenant' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getTenantFeaturesForEdit'
    abp.services.app.tenant.getTenantFeaturesForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/GetTenantFeaturesForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'updateTenantFeatures'
    abp.services.app.tenant.updateTenantFeatures = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/UpdateTenantFeatures',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'resetTenantSpecificFeatures'
    abp.services.app.tenant.resetTenantSpecificFeatures = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/ResetTenantSpecificFeatures',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'unlockTenantAdmin'
    abp.services.app.tenant.unlockTenantAdmin = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Tenant/UnlockTenantAdmin',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

  })();

  // controller 'tenantRegistration'
  (function(){

    abp.services.app.tenantRegistration = abp.services.app.tenantRegistration || {};

    // action 'registerTenant'
    abp.services.app.tenantRegistration.registerTenant = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantRegistration/RegisterTenant',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getEditionsForSelect'
    abp.services.app.tenantRegistration.getEditionsForSelect = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantRegistration/GetEditionsForSelect',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEdition'
    abp.services.app.tenantRegistration.getEdition = function(editionId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantRegistration/GetEdition' + abp.utils.buildQueryString([{ name: 'editionId', value: editionId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'hostDashboard'
  (function(){

    abp.services.app.hostDashboard = abp.services.app.hostDashboard || {};

    // action 'getTopStatsData'
    abp.services.app.hostDashboard.getTopStatsData = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostDashboard/GetTopStatsData' + abp.utils.buildQueryString([{ name: 'startDate', value: input.startDate }, { name: 'endDate', value: input.endDate }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getRecentTenantsData'
    abp.services.app.hostDashboard.getRecentTenantsData = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostDashboard/GetRecentTenantsData',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSubscriptionExpiringTenantsData'
    abp.services.app.hostDashboard.getSubscriptionExpiringTenantsData = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostDashboard/GetSubscriptionExpiringTenantsData',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getIncomeStatistics'
    abp.services.app.hostDashboard.getIncomeStatistics = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostDashboard/GetIncomeStatistics' + abp.utils.buildQueryString([{ name: 'incomeStatisticsDateInterval', value: input.incomeStatisticsDateInterval }, { name: 'startDate', value: input.startDate }, { name: 'endDate', value: input.endDate }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEditionTenantStatistics'
    abp.services.app.hostDashboard.getEditionTenantStatistics = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostDashboard/GetEditionTenantStatistics' + abp.utils.buildQueryString([{ name: 'startDate', value: input.startDate }, { name: 'endDate', value: input.endDate }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'messagingLists'
  (function(){

    abp.services.app.messagingLists = abp.services.app.messagingLists || {};

    // action 'getAll'
    abp.services.app.messagingLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MessagingLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'phoneFilter', value: input.phoneFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getMessagingListForView'
    abp.services.app.messagingLists.getMessagingListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MessagingLists/GetMessagingListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.messagingLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MessagingLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.messagingLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MessagingLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getMessagingListsToExcel'
    abp.services.app.messagingLists.getMessagingListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MessagingLists/GetMessagingListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'phoneFilter', value: input.phoneFilter }, { name: 'statusFilter', value: input.statusFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'webLog'
  (function(){

    abp.services.app.webLog = abp.services.app.webLog || {};

    // action 'getLatestWebLogs'
    abp.services.app.webLog.getLatestWebLogs = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebLog/GetLatestWebLogs',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'downloadWebLogs'
    abp.services.app.webLog.downloadWebLogs = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WebLog/DownloadWebLogs',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'language'
  (function(){

    abp.services.app.language = abp.services.app.language || {};

    // action 'getLanguages'
    abp.services.app.language.getLanguages = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Language/GetLanguages',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLanguageForEdit'
    abp.services.app.language.getLanguageForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Language/GetLanguageForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrUpdateLanguage'
    abp.services.app.language.createOrUpdateLanguage = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Language/CreateOrUpdateLanguage',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'deleteLanguage'
    abp.services.app.language.deleteLanguage = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Language/DeleteLanguage' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'setDefaultLanguage'
    abp.services.app.language.setDefaultLanguage = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Language/SetDefaultLanguage',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getLanguageTexts'
    abp.services.app.language.getLanguageTexts = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Language/GetLanguageTexts' + abp.utils.buildQueryString([{ name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }, { name: 'sorting', value: input.sorting }, { name: 'sourceName', value: input.sourceName }, { name: 'baseLanguageName', value: input.baseLanguageName }, { name: 'targetLanguageName', value: input.targetLanguageName }, { name: 'targetValueFilter', value: input.targetValueFilter }, { name: 'filterText', value: input.filterText }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'updateLanguageText'
    abp.services.app.language.updateLanguageText = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Language/UpdateLanguageText',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

  })();

  // controller 'libraryFineLists'
  (function(){

    abp.services.app.libraryFineLists = abp.services.app.libraryFineLists || {};

    // action 'getAll'
    abp.services.app.libraryFineLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LibraryFineLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'categoryFilter', value: input.categoryFilter }, { name: 'maxTotalCostFilter', value: input.maxTotalCostFilter }, { name: 'minTotalCostFilter', value: input.minTotalCostFilter }, { name: 'maxWaivedAmountFilter', value: input.maxWaivedAmountFilter }, { name: 'minWaivedAmountFilter', value: input.minWaivedAmountFilter }, { name: 'notesFilter', value: input.notesFilter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }, { name: 'employeeListNamesFilter', value: input.employeeListNamesFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLibraryFineListForView'
    abp.services.app.libraryFineLists.getLibraryFineListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LibraryFineLists/GetLibraryFineListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLibraryFineListForEdit'
    abp.services.app.libraryFineLists.getLibraryFineListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LibraryFineLists/GetLibraryFineListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.libraryFineLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LibraryFineLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.libraryFineLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LibraryFineLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getLibraryFineListsToExcel'
    abp.services.app.libraryFineLists.getLibraryFineListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LibraryFineLists/GetLibraryFineListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'categoryFilter', value: input.categoryFilter }, { name: 'maxTotalCostFilter', value: input.maxTotalCostFilter }, { name: 'minTotalCostFilter', value: input.minTotalCostFilter }, { name: 'maxWaivedAmountFilter', value: input.maxWaivedAmountFilter }, { name: 'minWaivedAmountFilter', value: input.minWaivedAmountFilter }, { name: 'notesFilter', value: input.notesFilter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }, { name: 'employeeListNamesFilter', value: input.employeeListNamesFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllStudentDetailForLookupTable'
    abp.services.app.libraryFineLists.getAllStudentDetailForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LibraryFineLists/GetAllStudentDetailForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllEmployeeListForLookupTable'
    abp.services.app.libraryFineLists.getAllEmployeeListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LibraryFineLists/GetAllEmployeeListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'libaryUserLists'
  (function(){

    abp.services.app.libaryUserLists = abp.services.app.libaryUserLists || {};

    // action 'getAll'
    abp.services.app.libaryUserLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LibaryUserLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'categoryFilter', value: input.categoryFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'notesFilter', value: input.notesFilter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }, { name: 'employeeListNamesFilter', value: input.employeeListNamesFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLibaryUserListForView'
    abp.services.app.libaryUserLists.getLibaryUserListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LibaryUserLists/GetLibaryUserListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLibaryUserListForEdit'
    abp.services.app.libaryUserLists.getLibaryUserListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LibaryUserLists/GetLibaryUserListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.libaryUserLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LibaryUserLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.libaryUserLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LibaryUserLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getLibaryUserListsToExcel'
    abp.services.app.libaryUserLists.getLibaryUserListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LibaryUserLists/GetLibaryUserListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'categoryFilter', value: input.categoryFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'notesFilter', value: input.notesFilter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }, { name: 'employeeListNamesFilter', value: input.employeeListNamesFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllStudentDetailForLookupTable'
    abp.services.app.libaryUserLists.getAllStudentDetailForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LibaryUserLists/GetAllStudentDetailForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllEmployeeListForLookupTable'
    abp.services.app.libaryUserLists.getAllEmployeeListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LibaryUserLists/GetAllEmployeeListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'booksLists'
  (function(){

    abp.services.app.booksLists = abp.services.app.booksLists || {};

    // action 'getAll'
    abp.services.app.booksLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BooksLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'barcodeFilter', value: input.barcodeFilter }, { name: 'iSBNFilter', value: input.iSBNFilter }, { name: 'maxNumberOfPagesFilter', value: input.maxNumberOfPagesFilter }, { name: 'minNumberOfPagesFilter', value: input.minNumberOfPagesFilter }, { name: 'maxCopiesFilter', value: input.maxCopiesFilter }, { name: 'minCopiesFilter', value: input.minCopiesFilter }, { name: 'maxPublicationYearFilter', value: input.maxPublicationYearFilter }, { name: 'minPublicationYearFilter', value: input.minPublicationYearFilter }, { name: 'isReferenceFilter', value: input.isReferenceFilter }, { name: 'canReservedFilter', value: input.canReservedFilter }, { name: 'bookAuthorListFirstNameFilter', value: input.bookAuthorListFirstNameFilter }, { name: 'bookCategoryNameFilter', value: input.bookCategoryNameFilter }, { name: 'bookPublisherListNameFilter', value: input.bookPublisherListNameFilter }, { name: 'bookSectionListNameFilter', value: input.bookSectionListNameFilter }, { name: 'departmentListNameFilter', value: input.departmentListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBooksListForView'
    abp.services.app.booksLists.getBooksListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BooksLists/GetBooksListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBooksListForEdit'
    abp.services.app.booksLists.getBooksListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BooksLists/GetBooksListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.booksLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BooksLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.booksLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BooksLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getBooksListsToExcel'
    abp.services.app.booksLists.getBooksListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BooksLists/GetBooksListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'barcodeFilter', value: input.barcodeFilter }, { name: 'iSBNFilter', value: input.iSBNFilter }, { name: 'maxNumberOfPagesFilter', value: input.maxNumberOfPagesFilter }, { name: 'minNumberOfPagesFilter', value: input.minNumberOfPagesFilter }, { name: 'maxCopiesFilter', value: input.maxCopiesFilter }, { name: 'minCopiesFilter', value: input.minCopiesFilter }, { name: 'maxPublicationYearFilter', value: input.maxPublicationYearFilter }, { name: 'minPublicationYearFilter', value: input.minPublicationYearFilter }, { name: 'isReferenceFilter', value: input.isReferenceFilter }, { name: 'canReservedFilter', value: input.canReservedFilter }, { name: 'bookAuthorListFirstNameFilter', value: input.bookAuthorListFirstNameFilter }, { name: 'bookCategoryNameFilter', value: input.bookCategoryNameFilter }, { name: 'bookPublisherListNameFilter', value: input.bookPublisherListNameFilter }, { name: 'bookSectionListNameFilter', value: input.bookSectionListNameFilter }, { name: 'departmentListNameFilter', value: input.departmentListNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBookAuthorListForLookupTable'
    abp.services.app.booksLists.getAllBookAuthorListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BooksLists/GetAllBookAuthorListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBookCategoryForTableDropdown'
    abp.services.app.booksLists.getAllBookCategoryForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BooksLists/GetAllBookCategoryForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBookPublisherListForLookupTable'
    abp.services.app.booksLists.getAllBookPublisherListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BooksLists/GetAllBookPublisherListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBookSectionListForTableDropdown'
    abp.services.app.booksLists.getAllBookSectionListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BooksLists/GetAllBookSectionListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllDepartmentListForTableDropdown'
    abp.services.app.booksLists.getAllDepartmentListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BooksLists/GetAllDepartmentListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'bookSectionLists'
  (function(){

    abp.services.app.bookSectionLists = abp.services.app.bookSectionLists || {};

    // action 'getAll'
    abp.services.app.bookSectionLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookSectionLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'bookCategoryNameFilter', value: input.bookCategoryNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBookSectionListForView'
    abp.services.app.bookSectionLists.getBookSectionListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookSectionLists/GetBookSectionListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBookSectionListForEdit'
    abp.services.app.bookSectionLists.getBookSectionListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookSectionLists/GetBookSectionListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.bookSectionLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookSectionLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.bookSectionLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookSectionLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getBookSectionListsToExcel'
    abp.services.app.bookSectionLists.getBookSectionListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookSectionLists/GetBookSectionListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'bookCategoryNameFilter', value: input.bookCategoryNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBookCategoryForTableDropdown'
    abp.services.app.bookSectionLists.getAllBookCategoryForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookSectionLists/GetAllBookCategoryForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'bookPublisherLists'
  (function(){

    abp.services.app.bookPublisherLists = abp.services.app.bookPublisherLists || {};

    // action 'getAll'
    abp.services.app.bookPublisherLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookPublisherLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'locationFilter', value: input.locationFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBookPublisherListForView'
    abp.services.app.bookPublisherLists.getBookPublisherListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookPublisherLists/GetBookPublisherListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBookPublisherListForEdit'
    abp.services.app.bookPublisherLists.getBookPublisherListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookPublisherLists/GetBookPublisherListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.bookPublisherLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookPublisherLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.bookPublisherLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookPublisherLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getBookPublisherListsToExcel'
    abp.services.app.bookPublisherLists.getBookPublisherListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookPublisherLists/GetBookPublisherListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'locationFilter', value: input.locationFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'bookLendingLists'
  (function(){

    abp.services.app.bookLendingLists = abp.services.app.bookLendingLists || {};

    // action 'getAll'
    abp.services.app.bookLendingLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookLendingLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'maxStartDateFilter', value: input.maxStartDateFilter }, { name: 'minStartDateFilter', value: input.minStartDateFilter }, { name: 'maxDueDateFilter', value: input.maxDueDateFilter }, { name: 'minDueDateFilter', value: input.minDueDateFilter }, { name: 'maxReturnDateFilter', value: input.maxReturnDateFilter }, { name: 'minReturnDateFilter', value: input.minReturnDateFilter }, { name: 'categoryFilter', value: input.categoryFilter }, { name: 'booksListNameFilter', value: input.booksListNameFilter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }, { name: 'employeeListNamesFilter', value: input.employeeListNamesFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBookLendingListForView'
    abp.services.app.bookLendingLists.getBookLendingListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookLendingLists/GetBookLendingListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBookLendingListForEdit'
    abp.services.app.bookLendingLists.getBookLendingListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookLendingLists/GetBookLendingListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.bookLendingLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookLendingLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.bookLendingLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookLendingLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getBookLendingListsToExcel'
    abp.services.app.bookLendingLists.getBookLendingListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookLendingLists/GetBookLendingListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'maxStartDateFilter', value: input.maxStartDateFilter }, { name: 'minStartDateFilter', value: input.minStartDateFilter }, { name: 'maxDueDateFilter', value: input.maxDueDateFilter }, { name: 'minDueDateFilter', value: input.minDueDateFilter }, { name: 'maxReturnDateFilter', value: input.maxReturnDateFilter }, { name: 'minReturnDateFilter', value: input.minReturnDateFilter }, { name: 'categoryFilter', value: input.categoryFilter }, { name: 'booksListNameFilter', value: input.booksListNameFilter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }, { name: 'employeeListNamesFilter', value: input.employeeListNamesFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBooksListForLookupTable'
    abp.services.app.bookLendingLists.getAllBooksListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookLendingLists/GetAllBooksListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllStudentDetailForLookupTable'
    abp.services.app.bookLendingLists.getAllStudentDetailForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookLendingLists/GetAllStudentDetailForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllEmployeeListForLookupTable'
    abp.services.app.bookLendingLists.getAllEmployeeListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookLendingLists/GetAllEmployeeListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'lendingHoldLists'
  (function(){

    abp.services.app.lendingHoldLists = abp.services.app.lendingHoldLists || {};

    // action 'getAll'
    abp.services.app.lendingHoldLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LendingHoldLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'userIdFilter', value: input.userIdFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLendingHoldListForEdit'
    abp.services.app.lendingHoldLists.getLendingHoldListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LendingHoldLists/GetLendingHoldListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.lendingHoldLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LendingHoldLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.lendingHoldLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LendingHoldLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'bookCategories'
  (function(){

    abp.services.app.bookCategories = abp.services.app.bookCategories || {};

    // action 'getAll'
    abp.services.app.bookCategories.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookCategories/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBookCategoryForView'
    abp.services.app.bookCategories.getBookCategoryForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookCategories/GetBookCategoryForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBookCategoryForEdit'
    abp.services.app.bookCategories.getBookCategoryForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookCategories/GetBookCategoryForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.bookCategories.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookCategories/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.bookCategories['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookCategories/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getBookCategoriesToExcel'
    abp.services.app.bookCategories.getBookCategoriesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookCategories/GetBookCategoriesToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'bookAuthorLists'
  (function(){

    abp.services.app.bookAuthorLists = abp.services.app.bookAuthorLists || {};

    // action 'getAll'
    abp.services.app.bookAuthorLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookAuthorLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'firstNameFilter', value: input.firstNameFilter }, { name: 'otherNameFilter', value: input.otherNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBookAuthorListForView'
    abp.services.app.bookAuthorLists.getBookAuthorListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookAuthorLists/GetBookAuthorListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBookAuthorListForEdit'
    abp.services.app.bookAuthorLists.getBookAuthorListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookAuthorLists/GetBookAuthorListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.bookAuthorLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookAuthorLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.bookAuthorLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookAuthorLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getBookAuthorListsToExcel'
    abp.services.app.bookAuthorLists.getBookAuthorListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BookAuthorLists/GetBookAuthorListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'firstNameFilter', value: input.firstNameFilter }, { name: 'otherNameFilter', value: input.otherNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'intakeLists'
  (function(){

    abp.services.app.intakeLists = abp.services.app.intakeLists || {};

    // action 'getAll'
    abp.services.app.intakeLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/IntakeLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'typeFilter', value: input.typeFilter }, { name: 'namesFilter', value: input.namesFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getIntakeListForView'
    abp.services.app.intakeLists.getIntakeListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/IntakeLists/GetIntakeListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getIntakeListForEdit'
    abp.services.app.intakeLists.getIntakeListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/IntakeLists/GetIntakeListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.intakeLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/IntakeLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.intakeLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/IntakeLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getIntakeListsToExcel'
    abp.services.app.intakeLists.getIntakeListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/IntakeLists/GetIntakeListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'typeFilter', value: input.typeFilter }, { name: 'namesFilter', value: input.namesFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'install'
  (function(){

    abp.services.app.install = abp.services.app.install || {};

    // action 'setup'
    abp.services.app.install.setup = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Install/Setup',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getAppSettingsJson'
    abp.services.app.install.getAppSettingsJson = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Install/GetAppSettingsJson',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'checkDatabase'
    abp.services.app.install.checkDatabase = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Install/CheckDatabase',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'hostelWingLists'
  (function(){

    abp.services.app.hostelWingLists = abp.services.app.hostelWingLists || {};

    // action 'getAll'
    abp.services.app.hostelWingLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelWingLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHostelWingListForView'
    abp.services.app.hostelWingLists.getHostelWingListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelWingLists/GetHostelWingListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHostelWingListForEdit'
    abp.services.app.hostelWingLists.getHostelWingListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelWingLists/GetHostelWingListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.hostelWingLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelWingLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.hostelWingLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelWingLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getHostelWingListsToExcel'
    abp.services.app.hostelWingLists.getHostelWingListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelWingLists/GetHostelWingListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'hostelRoomLists'
  (function(){

    abp.services.app.hostelRoomLists = abp.services.app.hostelRoomLists || {};

    // action 'getAll'
    abp.services.app.hostelRoomLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelRoomLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'room_numberFilter', value: input.room_numberFilter }, { name: 'maxnys_spaceFilter', value: input.maxnys_spaceFilter }, { name: 'minnys_spaceFilter', value: input.minnys_spaceFilter }, { name: 'hostelFloorListnameFilter', value: input.hostelFloorListnameFilter }, { name: 'hostelFloorIdFilter', value: input.hostelFloorIdFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHostelRoomListForView'
    abp.services.app.hostelRoomLists.getHostelRoomListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelRoomLists/GetHostelRoomListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHostelRoomListForEdit'
    abp.services.app.hostelRoomLists.getHostelRoomListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelRoomLists/GetHostelRoomListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.hostelRoomLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelRoomLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.hostelRoomLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelRoomLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getHostelRoomListsToExcel'
    abp.services.app.hostelRoomLists.getHostelRoomListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelRoomLists/GetHostelRoomListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'room_numberFilter', value: input.room_numberFilter }, { name: 'maxnys_spaceFilter', value: input.maxnys_spaceFilter }, { name: 'minnys_spaceFilter', value: input.minnys_spaceFilter }, { name: 'hostelFloorListnameFilter', value: input.hostelFloorListnameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllHostelFloorListForTableDropdown'
    abp.services.app.hostelRoomLists.getAllHostelFloorListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelRoomLists/GetAllHostelFloorListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'hostelOccupationLists'
  (function(){

    abp.services.app.hostelOccupationLists = abp.services.app.hostelOccupationLists || {};

    // action 'getAll'
    abp.services.app.hostelOccupationLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelOccupationLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'termIdFilter', value: input.termIdFilter }, { name: 'hostelIdFilter', value: input.hostelIdFilter }, { name: 'roomIdFilter', value: input.roomIdFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }, { name: 'hostelBedListbed_numberFilter', value: input.hostelBedListbed_numberFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHostelOccupationListForView'
    abp.services.app.hostelOccupationLists.getHostelOccupationListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelOccupationLists/GetHostelOccupationListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHostelOccupationListForEdit'
    abp.services.app.hostelOccupationLists.getHostelOccupationListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelOccupationLists/GetHostelOccupationListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.hostelOccupationLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelOccupationLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'updateRoomByOpening'
    abp.services.app.hostelOccupationLists.updateRoomByOpening = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelOccupationLists/UpdateRoomByOpening',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'checkOutRooms'
    abp.services.app.hostelOccupationLists.checkOutRooms = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelOccupationLists/CheckOutRooms',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.hostelOccupationLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelOccupationLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getHostelOccupationListsToExcel'
    abp.services.app.hostelOccupationLists.getHostelOccupationListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelOccupationLists/GetHostelOccupationListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'termIdFilter', value: input.termIdFilter }, { name: 'hostelIdFilter', value: input.hostelIdFilter }, { name: 'roomIdFilter', value: input.roomIdFilter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }, { name: 'hostelBedListbed_numberFilter', value: input.hostelBedListbed_numberFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHostelOccupationReportListsToExcel'
    abp.services.app.hostelOccupationLists.getHostelOccupationReportListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelOccupationLists/GetHostelOccupationReportListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'termIdFilter', value: input.termIdFilter }, { name: 'hostelIdFilter', value: input.hostelIdFilter }, { name: 'roomIdFilter', value: input.roomIdFilter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }, { name: 'hostelBedListbed_numberFilter', value: input.hostelBedListbed_numberFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllStudentDetailForTableDropdown'
    abp.services.app.hostelOccupationLists.getAllStudentDetailForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelOccupationLists/GetAllStudentDetailForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBookingDetailsForTableDropdown'
    abp.services.app.hostelOccupationLists.getAllBookingDetailsForTableDropdown = function(category, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelOccupationLists/GetAllBookingDetailsForTableDropdown' + abp.utils.buildQueryString([{ name: 'category', value: category }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllHostelBedListForTableDropdown'
    abp.services.app.hostelOccupationLists.getAllHostelBedListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelOccupationLists/GetAllHostelBedListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllHostelListForTableLookUp'
    abp.services.app.hostelOccupationLists.getAllHostelListForTableLookUp = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelOccupationLists/GetAllHostelListForTableLookUp' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'termIdFilter', value: input.termIdFilter }, { name: 'hostelIdFilter', value: input.hostelIdFilter }, { name: 'roomIdFilter', value: input.roomIdFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }, { name: 'hostelBedListbed_numberFilter', value: input.hostelBedListbed_numberFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllHostelRoomListForTableLookUp'
    abp.services.app.hostelOccupationLists.getAllHostelRoomListForTableLookUp = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelOccupationLists/GetAllHostelRoomListForTableLookUp' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'termIdFilter', value: input.termIdFilter }, { name: 'hostelIdFilter', value: input.hostelIdFilter }, { name: 'roomIdFilter', value: input.roomIdFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }, { name: 'hostelBedListbed_numberFilter', value: input.hostelBedListbed_numberFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllStudentDetailForLookupTable'
    abp.services.app.hostelOccupationLists.getAllStudentDetailForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelOccupationLists/GetAllStudentDetailForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllHostelBedListForTableLookUp'
    abp.services.app.hostelOccupationLists.getAllHostelBedListForTableLookUp = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelOccupationLists/GetAllHostelBedListForTableLookUp' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'termIdFilter', value: input.termIdFilter }, { name: 'hostelIdFilter', value: input.hostelIdFilter }, { name: 'roomIdFilter', value: input.roomIdFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }, { name: 'hostelBedListbed_numberFilter', value: input.hostelBedListbed_numberFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'hostelFloorLists'
  (function(){

    abp.services.app.hostelFloorLists = abp.services.app.hostelFloorLists || {};

    // action 'getAll'
    abp.services.app.hostelFloorLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelFloorLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'hostelFloorLevelListnameFilter', value: input.hostelFloorLevelListnameFilter }, { name: 'hostelWingListnameFilter', value: input.hostelWingListnameFilter }, { name: 'hostelListnameFilter', value: input.hostelListnameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHostelFloorListForView'
    abp.services.app.hostelFloorLists.getHostelFloorListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelFloorLists/GetHostelFloorListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHostelFloorListForEdit'
    abp.services.app.hostelFloorLists.getHostelFloorListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelFloorLists/GetHostelFloorListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.hostelFloorLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelFloorLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.hostelFloorLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelFloorLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getHostelFloorListsToExcel'
    abp.services.app.hostelFloorLists.getHostelFloorListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelFloorLists/GetHostelFloorListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'hostelFloorLevelListnameFilter', value: input.hostelFloorLevelListnameFilter }, { name: 'hostelWingListnameFilter', value: input.hostelWingListnameFilter }, { name: 'hostelListnameFilter', value: input.hostelListnameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllHostelFloorLevelListForTableDropdown'
    abp.services.app.hostelFloorLists.getAllHostelFloorLevelListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelFloorLists/GetAllHostelFloorLevelListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllHostelWingListForTableDropdown'
    abp.services.app.hostelFloorLists.getAllHostelWingListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelFloorLists/GetAllHostelWingListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllHostelListForTableDropdown'
    abp.services.app.hostelFloorLists.getAllHostelListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelFloorLists/GetAllHostelListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'hostelFloorLevelLists'
  (function(){

    abp.services.app.hostelFloorLevelLists = abp.services.app.hostelFloorLevelLists || {};

    // action 'getAll'
    abp.services.app.hostelFloorLevelLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelFloorLevelLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHostelFloorLevelListForView'
    abp.services.app.hostelFloorLevelLists.getHostelFloorLevelListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelFloorLevelLists/GetHostelFloorLevelListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHostelFloorLevelListForEdit'
    abp.services.app.hostelFloorLevelLists.getHostelFloorLevelListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelFloorLevelLists/GetHostelFloorLevelListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.hostelFloorLevelLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelFloorLevelLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.hostelFloorLevelLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelFloorLevelLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getHostelFloorLevelListsToExcel'
    abp.services.app.hostelFloorLevelLists.getHostelFloorLevelListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelFloorLevelLists/GetHostelFloorLevelListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'hostelBookingLists'
  (function(){

    abp.services.app.hostelBookingLists = abp.services.app.hostelBookingLists || {};

    // action 'getAll'
    abp.services.app.hostelBookingLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelBookingLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }, { name: 'termnamesFilter', value: input.termnamesFilter }, { name: 'hostelRoomListroom_numberFilter', value: input.hostelRoomListroom_numberFilter }, { name: 'hostelBedListbed_numberFilter', value: input.hostelBedListbed_numberFilter }, { name: 'studentDetail_AdmnoFilter', value: input.studentDetail_AdmnoFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByStudent'
    abp.services.app.hostelBookingLists.getAllByStudent = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelBookingLists/GetAllByStudent' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }, { name: 'termnamesFilter', value: input.termnamesFilter }, { name: 'hostelRoomListroom_numberFilter', value: input.hostelRoomListroom_numberFilter }, { name: 'hostelBedListbed_numberFilter', value: input.hostelBedListbed_numberFilter }, { name: 'studentDetail_AdmnoFilter', value: input.studentDetail_AdmnoFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHostelBookingListForView'
    abp.services.app.hostelBookingLists.getHostelBookingListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelBookingLists/GetHostelBookingListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHostelBookingListForViewByStudent'
    abp.services.app.hostelBookingLists.getHostelBookingListForViewByStudent = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelBookingLists/GetHostelBookingListForViewByStudent' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHostelBookingListForEdit'
    abp.services.app.hostelBookingLists.getHostelBookingListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelBookingLists/GetHostelBookingListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.hostelBookingLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelBookingLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'studentBooking'
    abp.services.app.hostelBookingLists.studentBooking = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelBookingLists/studentBooking',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'adminCancelBooking'
    abp.services.app.hostelBookingLists.adminCancelBooking = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelBookingLists/AdminCancelBooking',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'adminApproveBooking'
    abp.services.app.hostelBookingLists.adminApproveBooking = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelBookingLists/AdminApproveBooking',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.hostelBookingLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelBookingLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'deleteByStudent'
    abp.services.app.hostelBookingLists.deleteByStudent = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelBookingLists/DeleteByStudent' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getHostelBookingListsToExcel'
    abp.services.app.hostelBookingLists.getHostelBookingListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelBookingLists/GetHostelBookingListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }, { name: 'termnamesFilter', value: input.termnamesFilter }, { name: 'hostelRoomListroom_numberFilter', value: input.hostelRoomListroom_numberFilter }, { name: 'hostelRoomListroom_number2Filter', value: input.hostelRoomListroom_number2Filter }, { name: 'hostelBedListbed_numberFilter', value: input.hostelBedListbed_numberFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllStudentDetailForTableDropdown'
    abp.services.app.hostelBookingLists.getAllStudentDetailForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelBookingLists/GetAllStudentDetailForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllTermForTableDropdown'
    abp.services.app.hostelBookingLists.getAllTermForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelBookingLists/GetAllTermForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllHostelRoomListForTableDropdown'
    abp.services.app.hostelBookingLists.getAllHostelRoomListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelBookingLists/GetAllHostelRoomListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllHostelBedListForTableDropdown'
    abp.services.app.hostelBookingLists.getAllHostelBedListForTableDropdown = function(includeReserved, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelBookingLists/GetAllHostelBedListForTableDropdown' + abp.utils.buildQueryString([{ name: 'includeReserved', value: includeReserved }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllHostelListForTableDropdown'
    abp.services.app.hostelBookingLists.getAllHostelListForTableDropdown = function(gender, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelBookingLists/GetAllHostelListForTableDropdown' + abp.utils.buildQueryString([{ name: 'gender', value: gender }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'hostelBedLists'
  (function(){

    abp.services.app.hostelBedLists = abp.services.app.hostelBedLists || {};

    // action 'getAll'
    abp.services.app.hostelBedLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelBedLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'bed_numberFilter', value: input.bed_numberFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'hostelRoomListroom_numberFilter', value: input.hostelRoomListroom_numberFilter }, { name: 'hostelRoomListroom_numberIdFilter', value: input.hostelRoomListroom_numberIdFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHostelBedListForView'
    abp.services.app.hostelBedLists.getHostelBedListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelBedLists/GetHostelBedListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHostelBedListForEdit'
    abp.services.app.hostelBedLists.getHostelBedListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelBedLists/GetHostelBedListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.hostelBedLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelBedLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.hostelBedLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelBedLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'suspend'
    abp.services.app.hostelBedLists.suspend = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelBedLists/Suspend',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'unSuspend'
    abp.services.app.hostelBedLists.unSuspend = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelBedLists/UnSuspend',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'emptyBed'
    abp.services.app.hostelBedLists.emptyBed = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelBedLists/EmptyBed',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getHostelBedListsToExcel'
    abp.services.app.hostelBedLists.getHostelBedListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelBedLists/GetHostelBedListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'bed_numberFilter', value: input.bed_numberFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'hostelRoomListroom_numberFilter', value: input.hostelRoomListroom_numberFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllHostelRoomListForTableDropdown'
    abp.services.app.hostelBedLists.getAllHostelRoomListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelBedLists/GetAllHostelRoomListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'hostelLists'
  (function(){

    abp.services.app.hostelLists = abp.services.app.hostelLists || {};

    // action 'getAll'
    abp.services.app.hostelLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'genderFilter', value: input.genderFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHostelListForView'
    abp.services.app.hostelLists.getHostelListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelLists/GetHostelListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHostelListForEdit'
    abp.services.app.hostelLists.getHostelListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelLists/GetHostelListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.hostelLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.hostelLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAllHostelListForTableDropdown'
    abp.services.app.hostelLists.getAllHostelListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelLists/GetAllHostelListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHostelListsToExcel'
    abp.services.app.hostelLists.getHostelListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelLists/GetHostelListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'genderFilter', value: input.genderFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'hostelPackingLists'
  (function(){

    abp.services.app.hostelPackingLists = abp.services.app.hostelPackingLists || {};

    // action 'getAll'
    abp.services.app.hostelPackingLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelPackingLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'is_serializedFilter', value: input.is_serializedFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHostelPackingListForView'
    abp.services.app.hostelPackingLists.getHostelPackingListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelPackingLists/GetHostelPackingListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHostelPackingListForEdit'
    abp.services.app.hostelPackingLists.getHostelPackingListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelPackingLists/GetHostelPackingListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.hostelPackingLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelPackingLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.hostelPackingLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelPackingLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getHostelPackingListsToExcel'
    abp.services.app.hostelPackingLists.getHostelPackingListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelPackingLists/GetHostelPackingListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'is_serializedFilter', value: input.is_serializedFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllHostelOccupationPackingListForTableDropdown'
    abp.services.app.hostelPackingLists.getAllHostelOccupationPackingListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelPackingLists/GetAllHostelOccupationPackingListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'hostelOccupationPackingLists'
  (function(){

    abp.services.app.hostelOccupationPackingLists = abp.services.app.hostelOccupationPackingLists || {};

    // action 'getAll'
    abp.services.app.hostelOccupationPackingLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelOccupationPackingLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'returnNotesFilter', value: input.returnNotesFilter }, { name: 'maxDispatchDateFilter', value: input.maxDispatchDateFilter }, { name: 'minDispatchDateFilter', value: input.minDispatchDateFilter }, { name: 'hostelPackingListNameFilter', value: input.hostelPackingListNameFilter }, { name: 'hostelOccupationListhostel_idFilter', value: input.hostelOccupationListhostel_idFilter }, { name: 'idFilter', value: input.idFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHostelOccupationPackingListForView'
    abp.services.app.hostelOccupationPackingLists.getHostelOccupationPackingListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelOccupationPackingLists/GetHostelOccupationPackingListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHostelOccupationPackingListForEdit'
    abp.services.app.hostelOccupationPackingLists.getHostelOccupationPackingListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelOccupationPackingLists/GetHostelOccupationPackingListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.hostelOccupationPackingLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelOccupationPackingLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'returnHostelOccupationPacking'
    abp.services.app.hostelOccupationPackingLists.returnHostelOccupationPacking = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelOccupationPackingLists/ReturnHostelOccupationPacking',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.hostelOccupationPackingLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelOccupationPackingLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getHostelOccupationPackingListsToExcel'
    abp.services.app.hostelOccupationPackingLists.getHostelOccupationPackingListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelOccupationPackingLists/GetHostelOccupationPackingListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'returnNotesFilter', value: input.returnNotesFilter }, { name: 'maxDispatchDateFilter', value: input.maxDispatchDateFilter }, { name: 'minDispatchDateFilter', value: input.minDispatchDateFilter }, { name: 'hostelPackingListNameFilter', value: input.hostelPackingListNameFilter }, { name: 'hostelOccupationListhostel_idFilter', value: input.hostelOccupationListhostel_idFilter }, { name: 'idFilter', value: input.idFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllHostelPackingListForTableDropdown'
    abp.services.app.hostelOccupationPackingLists.getAllHostelPackingListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelOccupationPackingLists/GetAllHostelPackingListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllHostelOccupationListForTableDropdown'
    abp.services.app.hostelOccupationPackingLists.getAllHostelOccupationListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostelOccupationPackingLists/GetAllHostelOccupationListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'groupClassMemberList'
  (function(){

    abp.services.app.groupClassMemberList = abp.services.app.groupClassMemberList || {};

    // action 'getAll'
    abp.services.app.groupClassMemberList.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupClassMemberList/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'studentClassFilter', value: input.studentClassFilter }, { name: 'subjectFilter', value: input.subjectFilter }, { name: 'groupChatListNameFilter', value: input.groupChatListNameFilter }, { name: 'groupChatListIdFilter', value: input.groupChatListIdFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupClassMemberListForView'
    abp.services.app.groupClassMemberList.getGroupClassMemberListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupClassMemberList/GetGroupClassMemberListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupClassMemberListForEdit'
    abp.services.app.groupClassMemberList.getGroupClassMemberListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupClassMemberList/GetGroupClassMemberListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.groupClassMemberList.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupClassMemberList/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'updateMembers'
    abp.services.app.groupClassMemberList.updateMembers = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupClassMemberList/UpdateMembers',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.groupClassMemberList['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupClassMemberList/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAllGroupChatListForTableDropdown'
    abp.services.app.groupClassMemberList.getAllGroupChatListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupClassMemberList/GetAllGroupChatListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllTeacherSubjectListForTableDropdown'
    abp.services.app.groupClassMemberList.getAllTeacherSubjectListForTableDropdown = function(admNo, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupClassMemberList/GetAllTeacherSubjectListForTableDropdown' + abp.utils.buildQueryString([{ name: 'admNo', value: admNo }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllTeacherClassListForTableDropdown'
    abp.services.app.groupClassMemberList.getAllTeacherClassListForTableDropdown = function(admNo, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupClassMemberList/GetAllTeacherClassListForTableDropdown' + abp.utils.buildQueryString([{ name: 'admNo', value: admNo }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'groupChatMessageLists'
  (function(){

    abp.services.app.groupChatMessageLists = abp.services.app.groupChatMessageLists || {};

    // action 'getAll'
    abp.services.app.groupChatMessageLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupChatMessageLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'maxCreationTimeFilter', value: input.maxCreationTimeFilter }, { name: 'minCreationTimeFilter', value: input.minCreationTimeFilter }, { name: 'maxUserIdFilter', value: input.maxUserIdFilter }, { name: 'minUserIdFilter', value: input.minUserIdFilter }, { name: 'maxTargetUserIdFilter', value: input.maxTargetUserIdFilter }, { name: 'minTargetUserIdFilter', value: input.minTargetUserIdFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupChatMessages'
    abp.services.app.groupChatMessageLists.getGroupChatMessages = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupChatMessageLists/GetGroupChatMessages' + abp.utils.buildQueryString([{ name: 'tenantId', value: input.tenantId }, { name: 'userId', value: input.userId }, { name: 'minMessageId', value: input.minMessageId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'trashGroupConversation'
    abp.services.app.groupChatMessageLists.trashGroupConversation = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupChatMessageLists/TrashGroupConversation',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'trashMessageConversation'
    abp.services.app.groupChatMessageLists.trashMessageConversation = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupChatMessageLists/TrashMessageConversation',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getGroupChatMessageListForView'
    abp.services.app.groupChatMessageLists.getGroupChatMessageListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupChatMessageLists/GetGroupChatMessageListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupChatMessageListForEdit'
    abp.services.app.groupChatMessageLists.getGroupChatMessageListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupChatMessageLists/GetGroupChatMessageListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.groupChatMessageLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupChatMessageLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.groupChatMessageLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupChatMessageLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getGroupChatMessageListsToExcel'
    abp.services.app.groupChatMessageLists.getGroupChatMessageListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupChatMessageLists/GetGroupChatMessageListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'maxCreationTimeFilter', value: input.maxCreationTimeFilter }, { name: 'minCreationTimeFilter', value: input.minCreationTimeFilter }, { name: 'maxUserIdFilter', value: input.maxUserIdFilter }, { name: 'minUserIdFilter', value: input.minUserIdFilter }, { name: 'maxTargetUserIdFilter', value: input.maxTargetUserIdFilter }, { name: 'minTargetUserIdFilter', value: input.minTargetUserIdFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'groupChatMemberLists'
  (function(){

    abp.services.app.groupChatMemberLists = abp.services.app.groupChatMemberLists || {};

    // action 'getAll'
    abp.services.app.groupChatMemberLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupChatMemberLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'maxCreationTimeFilter', value: input.maxCreationTimeFilter }, { name: 'minCreationTimeFilter', value: input.minCreationTimeFilter }, { name: 'groupChatListNameFilter', value: input.groupChatListNameFilter }, { name: 'userNameFilter', value: input.userNameFilter }, { name: 'groupChatListIdFilter', value: input.groupChatListIdFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupChatMemberListForView'
    abp.services.app.groupChatMemberLists.getGroupChatMemberListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupChatMemberLists/GetGroupChatMemberListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupChatMemberListForEdit'
    abp.services.app.groupChatMemberLists.getGroupChatMemberListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupChatMemberLists/GetGroupChatMemberListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.groupChatMemberLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupChatMemberLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.groupChatMemberLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupChatMemberLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getGroupChatMemberListsToExcel'
    abp.services.app.groupChatMemberLists.getGroupChatMemberListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupChatMemberLists/GetGroupChatMemberListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'maxCreationTimeFilter', value: input.maxCreationTimeFilter }, { name: 'minCreationTimeFilter', value: input.minCreationTimeFilter }, { name: 'groupChatListNameFilter', value: input.groupChatListNameFilter }, { name: 'userNameFilter', value: input.userNameFilter }, { name: 'groupChatListIdFilter', value: input.groupChatListIdFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllGroupChatListForTableDropdown'
    abp.services.app.groupChatMemberLists.getAllGroupChatListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupChatMemberLists/GetAllGroupChatListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllUserForLookupTable'
    abp.services.app.groupChatMemberLists.getAllUserForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupChatMemberLists/GetAllUserForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'groupChatLists'
  (function(){

    abp.services.app.groupChatLists = abp.services.app.groupChatLists || {};

    // action 'getAll'
    abp.services.app.groupChatLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupChatLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'maxCreationTimeFilter', value: input.maxCreationTimeFilter }, { name: 'minCreationTimeFilter', value: input.minCreationTimeFilter }, { name: 'userNameFilter', value: input.userNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllMyGroups'
    abp.services.app.groupChatLists.getAllMyGroups = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupChatLists/GetAllMyGroups' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'maxCreationTimeFilter', value: input.maxCreationTimeFilter }, { name: 'minCreationTimeFilter', value: input.minCreationTimeFilter }, { name: 'userNameFilter', value: input.userNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupMembers'
    abp.services.app.groupChatLists.getGroupMembers = function(groupId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupChatLists/GetGroupMembers' + abp.utils.buildQueryString([{ name: 'groupId', value: groupId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupChatListForView'
    abp.services.app.groupChatLists.getGroupChatListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupChatLists/GetGroupChatListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupChatListForEdit'
    abp.services.app.groupChatLists.getGroupChatListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupChatLists/GetGroupChatListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.groupChatLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupChatLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.groupChatLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupChatLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getGroupChatListsToExcel'
    abp.services.app.groupChatLists.getGroupChatListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupChatLists/GetGroupChatListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'maxCreationTimeFilter', value: input.maxCreationTimeFilter }, { name: 'minCreationTimeFilter', value: input.minCreationTimeFilter }, { name: 'userNameFilter', value: input.userNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllUserForLookupTable'
    abp.services.app.groupChatLists.getAllUserForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/GroupChatLists/GetAllUserForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'friendship'
  (function(){

    abp.services.app.friendship = abp.services.app.friendship || {};

    // action 'createFriendshipRequest'
    abp.services.app.friendship.createFriendshipRequest = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Friendship/CreateFriendshipRequest',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'removeFriendshipRequest'
    abp.services.app.friendship.removeFriendshipRequest = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Friendship/RemoveFriendshipRequest' + abp.utils.buildQueryString([{ name: 'userId', value: input.userId }, { name: 'tenantId', value: input.tenantId }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'createFriendshipRequestByUserName'
    abp.services.app.friendship.createFriendshipRequestByUserName = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Friendship/CreateFriendshipRequestByUserName',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'blockUser'
    abp.services.app.friendship.blockUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Friendship/BlockUser',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'unblockUser'
    abp.services.app.friendship.unblockUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Friendship/UnblockUser',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'acceptFriendshipRequest'
    abp.services.app.friendship.acceptFriendshipRequest = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Friendship/AcceptFriendshipRequest',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

  })();

  // controller 'workTicketLists'
  (function(){

    abp.services.app.workTicketLists = abp.services.app.workTicketLists || {};

    // action 'getAll'
    abp.services.app.workTicketLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkTicketLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'approvedFilter', value: input.approvedFilter }, { name: 'vehicleBookingListDescriptionFilter', value: input.vehicleBookingListDescriptionFilter }, { name: 'employeeListNamesFilter', value: input.employeeListNamesFilter }, { name: 'employeeListNames2Filter', value: input.employeeListNames2Filter }, { name: 'assetListNameFilter', value: input.assetListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getWorkTicketListForView'
    abp.services.app.workTicketLists.getWorkTicketListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkTicketLists/GetWorkTicketListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getWorkTicketListForEdit'
    abp.services.app.workTicketLists.getWorkTicketListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkTicketLists/GetWorkTicketListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.workTicketLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkTicketLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.workTicketLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkTicketLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'departmentVehicleApproval'
    abp.services.app.workTicketLists.departmentVehicleApproval = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkTicketLists/DepartmentVehicleApproval',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'completeWorkTicket'
    abp.services.app.workTicketLists.completeWorkTicket = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkTicketLists/CompleteWorkTicket',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getWorkTicketListsToExcel'
    abp.services.app.workTicketLists.getWorkTicketListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkTicketLists/GetWorkTicketListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'approvedFilter', value: input.approvedFilter }, { name: 'vehicleBookingListDescriptionFilter', value: input.vehicleBookingListDescriptionFilter }, { name: 'employeeListNamesFilter', value: input.employeeListNamesFilter }, { name: 'employeeListNames2Filter', value: input.employeeListNames2Filter }, { name: 'assetListNameFilter', value: input.assetListNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllVehicleBookingListForTableDropdown'
    abp.services.app.workTicketLists.getAllVehicleBookingListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkTicketLists/GetAllVehicleBookingListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllEmployeeListForLookupTable'
    abp.services.app.workTicketLists.getAllEmployeeListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkTicketLists/GetAllEmployeeListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllAssetListForLookupTable'
    abp.services.app.workTicketLists.getAllAssetListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkTicketLists/GetAllAssetListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByUser'
    abp.services.app.workTicketLists.getAllByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkTicketLists/GetAllByUser' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'approvedFilter', value: input.approvedFilter }, { name: 'vehicleBookingListDescriptionFilter', value: input.vehicleBookingListDescriptionFilter }, { name: 'employeeListNamesFilter', value: input.employeeListNamesFilter }, { name: 'employeeListNames2Filter', value: input.employeeListNames2Filter }, { name: 'assetListNameFilter', value: input.assetListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getWorkTicketListForViewByUser'
    abp.services.app.workTicketLists.getWorkTicketListForViewByUser = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkTicketLists/GetWorkTicketListForViewByUser' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getWorkTicketListForEditByUser'
    abp.services.app.workTicketLists.getWorkTicketListForEditByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkTicketLists/GetWorkTicketListForEditByUser' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEditByUser'
    abp.services.app.workTicketLists.createOrEditByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkTicketLists/CreateOrEditByUser',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'deleteByUser'
    abp.services.app.workTicketLists.deleteByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkTicketLists/DeleteByUser' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'submitWorkTicket'
    abp.services.app.workTicketLists.submitWorkTicket = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkTicketLists/SubmitWorkTicket',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getWorkTicketListsToExcelByUser'
    abp.services.app.workTicketLists.getWorkTicketListsToExcelByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/WorkTicketLists/GetWorkTicketListsToExcelByUser' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'approvedFilter', value: input.approvedFilter }, { name: 'vehicleBookingListDescriptionFilter', value: input.vehicleBookingListDescriptionFilter }, { name: 'employeeListNamesFilter', value: input.employeeListNamesFilter }, { name: 'employeeListNames2Filter', value: input.employeeListNames2Filter }, { name: 'assetListNameFilter', value: input.assetListNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'fuelLogLists'
  (function(){

    abp.services.app.fuelLogLists = abp.services.app.fuelLogLists || {};

    // action 'getAll'
    abp.services.app.fuelLogLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FuelLogLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'fuelTypeFilter', value: input.fuelTypeFilter }, { name: 'fuellingPointFilter', value: input.fuellingPointFilter }, { name: 'workTicketListDescriptionFilter', value: input.workTicketListDescriptionFilter }, { name: 'assetIdFilter', value: input.assetIdFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByUser'
    abp.services.app.fuelLogLists.getAllByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FuelLogLists/GetAllByUser' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'fuelTypeFilter', value: input.fuelTypeFilter }, { name: 'fuellingPointFilter', value: input.fuellingPointFilter }, { name: 'workTicketListDescriptionFilter', value: input.workTicketListDescriptionFilter }, { name: 'assetIdFilter', value: input.assetIdFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFuelLogListForView'
    abp.services.app.fuelLogLists.getFuelLogListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FuelLogLists/GetFuelLogListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFuelLogListForEdit'
    abp.services.app.fuelLogLists.getFuelLogListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FuelLogLists/GetFuelLogListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.fuelLogLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FuelLogLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'approveFuelLog'
    abp.services.app.fuelLogLists.approveFuelLog = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FuelLogLists/ApproveFuelLog',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.fuelLogLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FuelLogLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getFuelLogListsToExcel'
    abp.services.app.fuelLogLists.getFuelLogListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FuelLogLists/GetFuelLogListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'fuelTypeFilter', value: input.fuelTypeFilter }, { name: 'fuellingPointFilter', value: input.fuellingPointFilter }, { name: 'workTicketListDescriptionFilter', value: input.workTicketListDescriptionFilter }, { name: 'assetIdFilter', value: input.assetIdFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllWorkTicketListForLookupTable'
    abp.services.app.fuelLogLists.getAllWorkTicketListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FuelLogLists/GetAllWorkTicketListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByAsset'
    abp.services.app.fuelLogLists.getAllByAsset = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FuelLogLists/GetAllByAsset' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'fuelTypeFilter', value: input.fuelTypeFilter }, { name: 'fuellingPointFilter', value: input.fuellingPointFilter }, { name: 'workTicketListDescriptionFilter', value: input.workTicketListDescriptionFilter }, { name: 'assetIdFilter', value: input.assetIdFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFuelLogListForViewByAsset'
    abp.services.app.fuelLogLists.getFuelLogListForViewByAsset = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FuelLogLists/GetFuelLogListForViewByAsset' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFuelLogListForEditByAsset'
    abp.services.app.fuelLogLists.getFuelLogListForEditByAsset = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FuelLogLists/GetFuelLogListForEditByAsset' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEditByAsset'
    abp.services.app.fuelLogLists.createOrEditByAsset = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FuelLogLists/CreateOrEditByAsset',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'deleteByAsset'
    abp.services.app.fuelLogLists.deleteByAsset = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FuelLogLists/DeleteByAsset' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getFuelLogListsToExcelByAsset'
    abp.services.app.fuelLogLists.getFuelLogListsToExcelByAsset = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FuelLogLists/GetFuelLogListsToExcelByAsset' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'fuelTypeFilter', value: input.fuelTypeFilter }, { name: 'fuellingPointFilter', value: input.fuellingPointFilter }, { name: 'workTicketListDescriptionFilter', value: input.workTicketListDescriptionFilter }, { name: 'assetIdFilter', value: input.assetIdFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'vehicleServiceLists'
  (function(){

    abp.services.app.vehicleServiceLists = abp.services.app.vehicleServiceLists || {};

    // action 'getAll'
    abp.services.app.vehicleServiceLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleServiceLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'locationFilter', value: input.locationFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'vehicleServiceStatusFilter', value: input.vehicleServiceStatusFilter }, { name: 'workTicketListDescriptionFilter', value: input.workTicketListDescriptionFilter }, { name: 'assetListNameFilter', value: input.assetListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getVehicleServiceListForView'
    abp.services.app.vehicleServiceLists.getVehicleServiceListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleServiceLists/GetVehicleServiceListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getVehicleServiceListForEdit'
    abp.services.app.vehicleServiceLists.getVehicleServiceListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleServiceLists/GetVehicleServiceListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.vehicleServiceLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleServiceLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'approveVehicleService'
    abp.services.app.vehicleServiceLists.approveVehicleService = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleServiceLists/ApproveVehicleService',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.vehicleServiceLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleServiceLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getVehicleServiceListsToExcel'
    abp.services.app.vehicleServiceLists.getVehicleServiceListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleServiceLists/GetVehicleServiceListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'locationFilter', value: input.locationFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'workTicketListDescriptionFilter', value: input.workTicketListDescriptionFilter }, { name: 'assetListNameFilter', value: input.assetListNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllAssetListForLookupTable'
    abp.services.app.vehicleServiceLists.getAllAssetListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleServiceLists/GetAllAssetListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByUser'
    abp.services.app.vehicleServiceLists.getAllByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleServiceLists/GetAllByUser' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'locationFilter', value: input.locationFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'vehicleServiceStatusFilter', value: input.vehicleServiceStatusFilter }, { name: 'workTicketListDescriptionFilter', value: input.workTicketListDescriptionFilter }, { name: 'assetListNameFilter', value: input.assetListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getVehicleServiceListForViewByUser'
    abp.services.app.vehicleServiceLists.getVehicleServiceListForViewByUser = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleServiceLists/GetVehicleServiceListForViewByUser' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getVehicleServiceListForEditByUser'
    abp.services.app.vehicleServiceLists.getVehicleServiceListForEditByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleServiceLists/GetVehicleServiceListForEditByUser' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEditByUser'
    abp.services.app.vehicleServiceLists.createOrEditByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleServiceLists/CreateOrEditByUser',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'deleteByUser'
    abp.services.app.vehicleServiceLists.deleteByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleServiceLists/DeleteByUser' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getVehicleServiceListsToExcelByUser'
    abp.services.app.vehicleServiceLists.getVehicleServiceListsToExcelByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleServiceLists/GetVehicleServiceListsToExcelByUser' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'locationFilter', value: input.locationFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'workTicketListDescriptionFilter', value: input.workTicketListDescriptionFilter }, { name: 'assetListNameFilter', value: input.assetListNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByAsset'
    abp.services.app.vehicleServiceLists.getAllByAsset = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleServiceLists/GetAllByAsset' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'locationFilter', value: input.locationFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'vehicleServiceStatusFilter', value: input.vehicleServiceStatusFilter }, { name: 'workTicketListDescriptionFilter', value: input.workTicketListDescriptionFilter }, { name: 'assetListNameFilter', value: input.assetListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getVehicleServiceListForViewByAsset'
    abp.services.app.vehicleServiceLists.getVehicleServiceListForViewByAsset = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleServiceLists/GetVehicleServiceListForViewByAsset' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getVehicleServiceListForEditByAsset'
    abp.services.app.vehicleServiceLists.getVehicleServiceListForEditByAsset = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleServiceLists/GetVehicleServiceListForEditByAsset' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEditByAsset'
    abp.services.app.vehicleServiceLists.createOrEditByAsset = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleServiceLists/CreateOrEditByAsset',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'deleteByAsset'
    abp.services.app.vehicleServiceLists.deleteByAsset = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleServiceLists/DeleteByAsset' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getVehicleServiceListsToExcelByAsset'
    abp.services.app.vehicleServiceLists.getVehicleServiceListsToExcelByAsset = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleServiceLists/GetVehicleServiceListsToExcelByAsset' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'locationFilter', value: input.locationFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'workTicketListDescriptionFilter', value: input.workTicketListDescriptionFilter }, { name: 'assetListNameFilter', value: input.assetListNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByWorkTicket'
    abp.services.app.vehicleServiceLists.getAllByWorkTicket = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleServiceLists/GetAllByWorkTicket' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'locationFilter', value: input.locationFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'vehicleServiceStatusFilter', value: input.vehicleServiceStatusFilter }, { name: 'workTicketListDescriptionFilter', value: input.workTicketListDescriptionFilter }, { name: 'assetListNameFilter', value: input.assetListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEditByWorkTicket'
    abp.services.app.vehicleServiceLists.createOrEditByWorkTicket = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleServiceLists/CreateOrEditByWorkTicket',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getVehicleServiceListsToExcelByWorkTicket'
    abp.services.app.vehicleServiceLists.getVehicleServiceListsToExcelByWorkTicket = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleServiceLists/GetVehicleServiceListsToExcelByWorkTicket' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'locationFilter', value: input.locationFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'workTicketListDescriptionFilter', value: input.workTicketListDescriptionFilter }, { name: 'assetListNameFilter', value: input.assetListNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'vehicleInsuranceLists'
  (function(){

    abp.services.app.vehicleInsuranceLists = abp.services.app.vehicleInsuranceLists || {};

    // action 'getAll'
    abp.services.app.vehicleInsuranceLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleInsuranceLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'assetListNameFilter', value: input.assetListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getVehicleInsuranceListForView'
    abp.services.app.vehicleInsuranceLists.getVehicleInsuranceListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleInsuranceLists/GetVehicleInsuranceListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getVehicleInsuranceListForEdit'
    abp.services.app.vehicleInsuranceLists.getVehicleInsuranceListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleInsuranceLists/GetVehicleInsuranceListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.vehicleInsuranceLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleInsuranceLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'approveVehicleInsurance'
    abp.services.app.vehicleInsuranceLists.approveVehicleInsurance = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleInsuranceLists/ApproveVehicleInsurance',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.vehicleInsuranceLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleInsuranceLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getVehicleInsuranceListsToExcel'
    abp.services.app.vehicleInsuranceLists.getVehicleInsuranceListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleInsuranceLists/GetVehicleInsuranceListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'assetListNameFilter', value: input.assetListNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllAssetListForLookupTable'
    abp.services.app.vehicleInsuranceLists.getAllAssetListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleInsuranceLists/GetAllAssetListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'vehicleBookingLists'
  (function(){

    abp.services.app.vehicleBookingLists = abp.services.app.vehicleBookingLists || {};

    // action 'getAll'
    abp.services.app.vehicleBookingLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleBookingLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'departmentApprovalFilter', value: input.departmentApprovalFilter }, { name: 'institutionApprovalFilter', value: input.institutionApprovalFilter }, { name: 'employeeListNamesFilter', value: input.employeeListNamesFilter }, { name: 'assetListNameFilter', value: input.assetListNameFilter }, { name: 'employeeListNames2Filter', value: input.employeeListNames2Filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getVehicleBookingListForView'
    abp.services.app.vehicleBookingLists.getVehicleBookingListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleBookingLists/GetVehicleBookingListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getVehicleBookingListForEdit'
    abp.services.app.vehicleBookingLists.getVehicleBookingListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleBookingLists/GetVehicleBookingListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.vehicleBookingLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleBookingLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'declineVehicleBooking'
    abp.services.app.vehicleBookingLists.declineVehicleBooking = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleBookingLists/DeclineVehicleBooking',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.vehicleBookingLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleBookingLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'approveVehicleDepartment'
    abp.services.app.vehicleBookingLists.approveVehicleDepartment = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleBookingLists/ApproveVehicleDepartment',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'approveVehicleInstitution'
    abp.services.app.vehicleBookingLists.approveVehicleInstitution = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleBookingLists/ApproveVehicleInstitution',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getVehicleBookingListsToExcel'
    abp.services.app.vehicleBookingLists.getVehicleBookingListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleBookingLists/GetVehicleBookingListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'departmentApprovalFilter', value: input.departmentApprovalFilter }, { name: 'institutionApprovalFilter', value: input.institutionApprovalFilter }, { name: 'employeeListNamesFilter', value: input.employeeListNamesFilter }, { name: 'assetListNameFilter', value: input.assetListNameFilter }, { name: 'employeeListNames2Filter', value: input.employeeListNames2Filter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllEmployeeListForLookupTable'
    abp.services.app.vehicleBookingLists.getAllEmployeeListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleBookingLists/GetAllEmployeeListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'category', value: input.category }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllAssetListForLookupTable'
    abp.services.app.vehicleBookingLists.getAllAssetListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleBookingLists/GetAllAssetListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'category', value: input.category }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByUser'
    abp.services.app.vehicleBookingLists.getAllByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleBookingLists/GetAllByUser' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'departmentApprovalFilter', value: input.departmentApprovalFilter }, { name: 'institutionApprovalFilter', value: input.institutionApprovalFilter }, { name: 'employeeListNamesFilter', value: input.employeeListNamesFilter }, { name: 'assetListNameFilter', value: input.assetListNameFilter }, { name: 'employeeListNames2Filter', value: input.employeeListNames2Filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getVehicleBookingListForViewByUser'
    abp.services.app.vehicleBookingLists.getVehicleBookingListForViewByUser = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleBookingLists/GetVehicleBookingListForViewByUser' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getVehicleBookingListForEditByUser'
    abp.services.app.vehicleBookingLists.getVehicleBookingListForEditByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleBookingLists/GetVehicleBookingListForEditByUser' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEditByUser'
    abp.services.app.vehicleBookingLists.createOrEditByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleBookingLists/CreateOrEditByUser',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'deleteByUser'
    abp.services.app.vehicleBookingLists.deleteByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleBookingLists/DeleteByUser' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getVehicleBookingListsToExcelByUser'
    abp.services.app.vehicleBookingLists.getVehicleBookingListsToExcelByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VehicleBookingLists/GetVehicleBookingListsToExcelByUser' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'departmentApprovalFilter', value: input.departmentApprovalFilter }, { name: 'institutionApprovalFilter', value: input.institutionApprovalFilter }, { name: 'employeeListNamesFilter', value: input.employeeListNamesFilter }, { name: 'assetListNameFilter', value: input.assetListNameFilter }, { name: 'employeeListNames2Filter', value: input.employeeListNames2Filter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'assetLists'
  (function(){

    abp.services.app.assetLists = abp.services.app.assetLists || {};

    // action 'getAll'
    abp.services.app.assetLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'maxSalvageValueFilter', value: input.maxSalvageValueFilter }, { name: 'minSalvageValueFilter', value: input.minSalvageValueFilter }, { name: 'fullyDepFilter', value: input.fullyDepFilter }, { name: 'disposedFilter', value: input.disposedFilter }, { name: 'lostFilter', value: input.lostFilter }, { name: 'maxRdateFilter', value: input.maxRdateFilter }, { name: 'minRdateFilter', value: input.minRdateFilter }, { name: 'barcodeFilter', value: input.barcodeFilter }, { name: 'modelFilter', value: input.modelFilter }, { name: 'brandFilter', value: input.brandFilter }, { name: 'bookingStatusFilter', value: input.bookingStatusFilter }, { name: 'assetSubClassListNameFilter', value: input.assetSubClassListNameFilter }, { name: 'assetClassListNameFilter', value: input.assetClassListNameFilter }, { name: 'assetLocationListNameFilter', value: input.assetLocationListNameFilter }, { name: 'assetRoomListNameFilter', value: input.assetRoomListNameFilter }, { name: 'assetTypeListNameFilter', value: input.assetTypeListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAssetListForView'
    abp.services.app.assetLists.getAssetListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetLists/GetAssetListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAssetListForEdit'
    abp.services.app.assetLists.getAssetListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetLists/GetAssetListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.assetLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.assetLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAssetListsToExcel'
    abp.services.app.assetLists.getAssetListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetLists/GetAssetListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'maxSalvageValueFilter', value: input.maxSalvageValueFilter }, { name: 'minSalvageValueFilter', value: input.minSalvageValueFilter }, { name: 'fullyDepFilter', value: input.fullyDepFilter }, { name: 'disposedFilter', value: input.disposedFilter }, { name: 'lostFilter', value: input.lostFilter }, { name: 'maxRdateFilter', value: input.maxRdateFilter }, { name: 'minRdateFilter', value: input.minRdateFilter }, { name: 'barcodeFilter', value: input.barcodeFilter }, { name: 'modelFilter', value: input.modelFilter }, { name: 'brandFilter', value: input.brandFilter }, { name: 'bookingStatusFilter', value: input.bookingStatusFilter }, { name: 'assetSubClassListNameFilter', value: input.assetSubClassListNameFilter }, { name: 'assetClassListNameFilter', value: input.assetClassListNameFilter }, { name: 'assetLocationListNameFilter', value: input.assetLocationListNameFilter }, { name: 'assetRoomListNameFilter', value: input.assetRoomListNameFilter }, { name: 'assetTypeListNameFilter', value: input.assetTypeListNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllAssetSubClassListForLookupTable'
    abp.services.app.assetLists.getAllAssetSubClassListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetLists/GetAllAssetSubClassListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllAssetClassListForLookupTable'
    abp.services.app.assetLists.getAllAssetClassListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetLists/GetAllAssetClassListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllAssetLocationListForLookupTable'
    abp.services.app.assetLists.getAllAssetLocationListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetLists/GetAllAssetLocationListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllAssetRoomListForLookupTable'
    abp.services.app.assetLists.getAllAssetRoomListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetLists/GetAllAssetRoomListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllAssetTypeListForLookupTable'
    abp.services.app.assetLists.getAllAssetTypeListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetLists/GetAllAssetTypeListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'assetTypeLists'
  (function(){

    abp.services.app.assetTypeLists = abp.services.app.assetTypeLists || {};

    // action 'getAll'
    abp.services.app.assetTypeLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetTypeLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'closedFilter', value: input.closedFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAssetTypeListForView'
    abp.services.app.assetTypeLists.getAssetTypeListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetTypeLists/GetAssetTypeListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAssetTypeListForEdit'
    abp.services.app.assetTypeLists.getAssetTypeListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetTypeLists/GetAssetTypeListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.assetTypeLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetTypeLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.assetTypeLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetTypeLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAssetTypeListsToExcel'
    abp.services.app.assetTypeLists.getAssetTypeListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetTypeLists/GetAssetTypeListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'closedFilter', value: input.closedFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'assetSubClassLists'
  (function(){

    abp.services.app.assetSubClassLists = abp.services.app.assetSubClassLists || {};

    // action 'getAll'
    abp.services.app.assetSubClassLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetSubClassLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'closedFilter', value: input.closedFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAssetSubClassListForView'
    abp.services.app.assetSubClassLists.getAssetSubClassListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetSubClassLists/GetAssetSubClassListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAssetSubClassListForEdit'
    abp.services.app.assetSubClassLists.getAssetSubClassListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetSubClassLists/GetAssetSubClassListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.assetSubClassLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetSubClassLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.assetSubClassLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetSubClassLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAssetSubClassListsToExcel'
    abp.services.app.assetSubClassLists.getAssetSubClassListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetSubClassLists/GetAssetSubClassListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'closedFilter', value: input.closedFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'assetRoomLists'
  (function(){

    abp.services.app.assetRoomLists = abp.services.app.assetRoomLists || {};

    // action 'getAll'
    abp.services.app.assetRoomLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetRoomLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'closedFilter', value: input.closedFilter }, { name: 'assetLocationListNameFilter', value: input.assetLocationListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAssetRoomListForView'
    abp.services.app.assetRoomLists.getAssetRoomListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetRoomLists/GetAssetRoomListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAssetRoomListForEdit'
    abp.services.app.assetRoomLists.getAssetRoomListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetRoomLists/GetAssetRoomListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.assetRoomLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetRoomLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.assetRoomLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetRoomLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAssetRoomListsToExcel'
    abp.services.app.assetRoomLists.getAssetRoomListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetRoomLists/GetAssetRoomListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'closedFilter', value: input.closedFilter }, { name: 'assetLocationListNameFilter', value: input.assetLocationListNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllAssetLocationListForTableDropdown'
    abp.services.app.assetRoomLists.getAllAssetLocationListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetRoomLists/GetAllAssetLocationListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'assetLocationLists'
  (function(){

    abp.services.app.assetLocationLists = abp.services.app.assetLocationLists || {};

    // action 'getAll'
    abp.services.app.assetLocationLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetLocationLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'closedFilter', value: input.closedFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAssetLocationListForView'
    abp.services.app.assetLocationLists.getAssetLocationListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetLocationLists/GetAssetLocationListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAssetLocationListForEdit'
    abp.services.app.assetLocationLists.getAssetLocationListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetLocationLists/GetAssetLocationListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.assetLocationLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetLocationLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.assetLocationLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetLocationLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAssetLocationListsToExcel'
    abp.services.app.assetLocationLists.getAssetLocationListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetLocationLists/GetAssetLocationListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'closedFilter', value: input.closedFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'assetIssueLists'
  (function(){

    abp.services.app.assetIssueLists = abp.services.app.assetIssueLists || {};

    // action 'getAll'
    abp.services.app.assetIssueLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetIssueLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'closedFilter', value: input.closedFilter }, { name: 'employeeListNamesFilter', value: input.employeeListNamesFilter }, { name: 'assetLocationListNameFilter', value: input.assetLocationListNameFilter }, { name: 'assetRoomListNameFilter', value: input.assetRoomListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAssetIssueListForView'
    abp.services.app.assetIssueLists.getAssetIssueListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetIssueLists/GetAssetIssueListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAssetIssueListForEdit'
    abp.services.app.assetIssueLists.getAssetIssueListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetIssueLists/GetAssetIssueListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.assetIssueLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetIssueLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.assetIssueLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetIssueLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAssetIssueListsToExcel'
    abp.services.app.assetIssueLists.getAssetIssueListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetIssueLists/GetAssetIssueListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'closedFilter', value: input.closedFilter }, { name: 'employeeListNamesFilter', value: input.employeeListNamesFilter }, { name: 'assetLocationListNameFilter', value: input.assetLocationListNameFilter }, { name: 'assetRoomListNameFilter', value: input.assetRoomListNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllEmployeeListForLookupTable'
    abp.services.app.assetIssueLists.getAllEmployeeListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetIssueLists/GetAllEmployeeListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllAssetLocationListForLookupTable'
    abp.services.app.assetIssueLists.getAllAssetLocationListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetIssueLists/GetAllAssetLocationListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllAssetRoomListForLookupTable'
    abp.services.app.assetIssueLists.getAllAssetRoomListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetIssueLists/GetAllAssetRoomListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'assetCustodianLists'
  (function(){

    abp.services.app.assetCustodianLists = abp.services.app.assetCustodianLists || {};

    // action 'getAll'
    abp.services.app.assetCustodianLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetCustodianLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'campusFilter', value: input.campusFilter }, { name: 'maxDepRateFilter', value: input.maxDepRateFilter }, { name: 'minDepRateFilter', value: input.minDepRateFilter }, { name: 'closedFilter', value: input.closedFilter }, { name: 'employeeListNamesFilter', value: input.employeeListNamesFilter }, { name: 'departmentListNameFilter', value: input.departmentListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAssetCustodianListForView'
    abp.services.app.assetCustodianLists.getAssetCustodianListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetCustodianLists/GetAssetCustodianListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAssetCustodianListForEdit'
    abp.services.app.assetCustodianLists.getAssetCustodianListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetCustodianLists/GetAssetCustodianListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.assetCustodianLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetCustodianLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.assetCustodianLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetCustodianLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAssetCustodianListsToExcel'
    abp.services.app.assetCustodianLists.getAssetCustodianListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetCustodianLists/GetAssetCustodianListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'campusFilter', value: input.campusFilter }, { name: 'maxDepRateFilter', value: input.maxDepRateFilter }, { name: 'minDepRateFilter', value: input.minDepRateFilter }, { name: 'closedFilter', value: input.closedFilter }, { name: 'employeeListNamesFilter', value: input.employeeListNamesFilter }, { name: 'departmentListNameFilter', value: input.departmentListNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllEmployeeListForLookupTable'
    abp.services.app.assetCustodianLists.getAllEmployeeListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetCustodianLists/GetAllEmployeeListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllDepartmentListForLookupTable'
    abp.services.app.assetCustodianLists.getAllDepartmentListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetCustodianLists/GetAllDepartmentListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'assetClassLists'
  (function(){

    abp.services.app.assetClassLists = abp.services.app.assetClassLists || {};

    // action 'getAll'
    abp.services.app.assetClassLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetClassLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'closedFilter', value: input.closedFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAssetClassListForView'
    abp.services.app.assetClassLists.getAssetClassListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetClassLists/GetAssetClassListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAssetClassListForEdit'
    abp.services.app.assetClassLists.getAssetClassListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetClassLists/GetAssetClassListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.assetClassLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetClassLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.assetClassLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetClassLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAssetClassListsToExcel'
    abp.services.app.assetClassLists.getAssetClassListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AssetClassLists/GetAssetClassListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'closedFilter', value: input.closedFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'teacherSubjectLists'
  (function(){

    abp.services.app.teacherSubjectLists = abp.services.app.teacherSubjectLists || {};

    // action 'getAll'
    abp.services.app.teacherSubjectLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TeacherSubjectLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'empNoFilter', value: input.empNoFilter }, { name: 'personnelFilter', value: input.personnelFilter }, { name: 'termFilter', value: input.termFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getByLecturer'
    abp.services.app.teacherSubjectLists.getByLecturer = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TeacherSubjectLists/GetByLecturer' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'empNoFilter', value: input.empNoFilter }, { name: 'personnelFilter', value: input.personnelFilter }, { name: 'termFilter', value: input.termFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTeacherSubjectListForView'
    abp.services.app.teacherSubjectLists.getTeacherSubjectListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TeacherSubjectLists/GetTeacherSubjectListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTeacherSubjectListsToExcel'
    abp.services.app.teacherSubjectLists.getTeacherSubjectListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TeacherSubjectLists/GetTeacherSubjectListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'empNoFilter', value: input.empNoFilter }, { name: 'personnelFilter', value: input.personnelFilter }, { name: 'termFilter', value: input.termFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTeacherSubjectListsToExcelByLecturer'
    abp.services.app.teacherSubjectLists.getTeacherSubjectListsToExcelByLecturer = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TeacherSubjectLists/GetTeacherSubjectListsToExcelByLecturer' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'empNoFilter', value: input.empNoFilter }, { name: 'personnelFilter', value: input.personnelFilter }, { name: 'termFilter', value: input.termFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'teacherSubjectDetailLists'
  (function(){

    abp.services.app.teacherSubjectDetailLists = abp.services.app.teacherSubjectDetailLists || {};

    // action 'getAll'
    abp.services.app.teacherSubjectDetailLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TeacherSubjectDetailLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'streamFilter', value: input.streamFilter }, { name: 'subjectFilter', value: input.subjectFilter }, { name: 'maxRdateFilter', value: input.maxRdateFilter }, { name: 'minRdateFilter', value: input.minRdateFilter }, { name: 'personnelFilter', value: input.personnelFilter }, { name: 'teacherSubjectListEmpNoFilter', value: input.teacherSubjectListEmpNoFilter }, { name: 'referenceIdFilter', value: input.referenceIdFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByCommon'
    abp.services.app.teacherSubjectDetailLists.getAllByCommon = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TeacherSubjectDetailLists/GetAllByCommon' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'streamFilter', value: input.streamFilter }, { name: 'subjectFilter', value: input.subjectFilter }, { name: 'maxRdateFilter', value: input.maxRdateFilter }, { name: 'minRdateFilter', value: input.minRdateFilter }, { name: 'personnelFilter', value: input.personnelFilter }, { name: 'teacherSubjectListEmpNoFilter', value: input.teacherSubjectListEmpNoFilter }, { name: 'referenceIdFilter', value: input.referenceIdFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByLecturerByTerm'
    abp.services.app.teacherSubjectDetailLists.getAllByLecturerByTerm = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TeacherSubjectDetailLists/GetAllByLecturerByTerm' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'streamFilter', value: input.streamFilter }, { name: 'subjectFilter', value: input.subjectFilter }, { name: 'maxRdateFilter', value: input.maxRdateFilter }, { name: 'minRdateFilter', value: input.minRdateFilter }, { name: 'personnelFilter', value: input.personnelFilter }, { name: 'teacherSubjectListEmpNoFilter', value: input.teacherSubjectListEmpNoFilter }, { name: 'referenceIdFilter', value: input.referenceIdFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTeacherSubjectDetailListForView'
    abp.services.app.teacherSubjectDetailLists.getTeacherSubjectDetailListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TeacherSubjectDetailLists/GetTeacherSubjectDetailListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTeacherSubjectDetail'
    abp.services.app.teacherSubjectDetailLists.getTeacherSubjectDetail = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TeacherSubjectDetailLists/GetTeacherSubjectDetail' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTeacherSubjectDetailListForEdit'
    abp.services.app.teacherSubjectDetailLists.getTeacherSubjectDetailListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TeacherSubjectDetailLists/GetTeacherSubjectDetailListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.teacherSubjectDetailLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TeacherSubjectDetailLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'combineSubjects'
    abp.services.app.teacherSubjectDetailLists.combineSubjects = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TeacherSubjectDetailLists/CombineSubjects',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.teacherSubjectDetailLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TeacherSubjectDetailLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'unGroupSubject'
    abp.services.app.teacherSubjectDetailLists.unGroupSubject = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TeacherSubjectDetailLists/UnGroupSubject',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getTeacherSubjectDetailListsToExcel'
    abp.services.app.teacherSubjectDetailLists.getTeacherSubjectDetailListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TeacherSubjectDetailLists/GetTeacherSubjectDetailListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'streamFilter', value: input.streamFilter }, { name: 'subjectFilter', value: input.subjectFilter }, { name: 'maxRdateFilter', value: input.maxRdateFilter }, { name: 'minRdateFilter', value: input.minRdateFilter }, { name: 'personnelFilter', value: input.personnelFilter }, { name: 'teacherSubjectListEmpNoFilter', value: input.teacherSubjectListEmpNoFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllTeacherSubjectListForTableDropdown'
    abp.services.app.teacherSubjectDetailLists.getAllTeacherSubjectListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TeacherSubjectDetailLists/GetAllTeacherSubjectListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllStudentDetailForLookupTable'
    abp.services.app.teacherSubjectDetailLists.getAllStudentDetailForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TeacherSubjectDetailLists/GetAllStudentDetailForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'filter2', value: input.filter2 }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'subjectLists'
  (function(){

    abp.services.app.subjectLists = abp.services.app.subjectLists || {};

    // action 'getAll'
    abp.services.app.subjectLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SubjectLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'namesFilter', value: input.namesFilter }, { name: 'departmentFilter', value: input.departmentFilter }, { name: 'subjectTypeFilter', value: input.subjectTypeFilter }, { name: 'maxContactHoursFilter', value: input.maxContactHoursFilter }, { name: 'minContactHoursFilter', value: input.minContactHoursFilter }, { name: 'maxCreditUnitsFilter', value: input.maxCreditUnitsFilter }, { name: 'minCreditUnitsFilter', value: input.minCreditUnitsFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSubjectListForView'
    abp.services.app.subjectLists.getSubjectListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SubjectLists/GetSubjectListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSubjectListForEdit'
    abp.services.app.subjectLists.getSubjectListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SubjectLists/GetSubjectListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.subjectLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SubjectLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.subjectLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SubjectLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getSubjectListsToExcel'
    abp.services.app.subjectLists.getSubjectListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SubjectLists/GetSubjectListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'namesFilter', value: input.namesFilter }, { name: 'departmentFilter', value: input.departmentFilter }, { name: 'subjectTypeFilter', value: input.subjectTypeFilter }, { name: 'maxContactHoursFilter', value: input.maxContactHoursFilter }, { name: 'minContactHoursFilter', value: input.minContactHoursFilter }, { name: 'maxCreditUnitsFilter', value: input.maxCreditUnitsFilter }, { name: 'minCreditUnitsFilter', value: input.minCreditUnitsFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'subjectTypeLists'
  (function(){

    abp.services.app.subjectTypeLists = abp.services.app.subjectTypeLists || {};

    // action 'getAll'
    abp.services.app.subjectTypeLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SubjectTypeLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'subjectTypeListNameFilter', value: input.subjectTypeListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSubjectTypeListForView'
    abp.services.app.subjectTypeLists.getSubjectTypeListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SubjectTypeLists/GetSubjectTypeListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSubjectTypeListForEdit'
    abp.services.app.subjectTypeLists.getSubjectTypeListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SubjectTypeLists/GetSubjectTypeListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.subjectTypeLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SubjectTypeLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.subjectTypeLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SubjectTypeLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getSubjectTypeListsToExcel'
    abp.services.app.subjectTypeLists.getSubjectTypeListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SubjectTypeLists/GetSubjectTypeListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'subjectTypeListNameFilter', value: input.subjectTypeListNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllSubjectTypeListForLookupTable'
    abp.services.app.subjectTypeLists.getAllSubjectTypeListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/SubjectTypeLists/GetAllSubjectTypeListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'programmeLists'
  (function(){

    abp.services.app.programmeLists = abp.services.app.programmeLists || {};

    // action 'getAll'
    abp.services.app.programmeLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProgrammeLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'namesFilter', value: input.namesFilter }, { name: 'departmentFilter', value: input.departmentFilter }, { name: 'gradeTypeFilter', value: input.gradeTypeFilter }, { name: 'periodFilter', value: input.periodFilter }, { name: 'maxMinYearUnitFilter', value: input.maxMinYearUnitFilter }, { name: 'minMinYearUnitFilter', value: input.minMinYearUnitFilter }, { name: 'maxMaxSemUnitFilter', value: input.maxMaxSemUnitFilter }, { name: 'minMaxSemUnitFilter', value: input.minMaxSemUnitFilter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByUser'
    abp.services.app.programmeLists.getAllByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProgrammeLists/GetAllByUser' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'namesFilter', value: input.namesFilter }, { name: 'departmentFilter', value: input.departmentFilter }, { name: 'gradeTypeFilter', value: input.gradeTypeFilter }, { name: 'periodFilter', value: input.periodFilter }, { name: 'maxMinYearUnitFilter', value: input.maxMinYearUnitFilter }, { name: 'minMinYearUnitFilter', value: input.minMinYearUnitFilter }, { name: 'maxMaxSemUnitFilter', value: input.maxMaxSemUnitFilter }, { name: 'minMaxSemUnitFilter', value: input.minMaxSemUnitFilter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getProgrammeListForView'
    abp.services.app.programmeLists.getProgrammeListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProgrammeLists/GetProgrammeListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getProgrammeListForEdit'
    abp.services.app.programmeLists.getProgrammeListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProgrammeLists/GetProgrammeListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.programmeLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProgrammeLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.programmeLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProgrammeLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getProgrammeListsToExcel'
    abp.services.app.programmeLists.getProgrammeListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProgrammeLists/GetProgrammeListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'namesFilter', value: input.namesFilter }, { name: 'departmentFilter', value: input.departmentFilter }, { name: 'gradeTypeFilter', value: input.gradeTypeFilter }, { name: 'periodFilter', value: input.periodFilter }, { name: 'maxMinYearUnitFilter', value: input.maxMinYearUnitFilter }, { name: 'minMinYearUnitFilter', value: input.minMinYearUnitFilter }, { name: 'maxMaxSemUnitFilter', value: input.maxMaxSemUnitFilter }, { name: 'minMaxSemUnitFilter', value: input.minMaxSemUnitFilter }, { name: 'codeFilter', value: input.codeFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllHostelListForTableDropdown'
    abp.services.app.programmeLists.getAllHostelListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProgrammeLists/GetAllHostelListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'markSheetLists'
  (function(){

    abp.services.app.markSheetLists = abp.services.app.markSheetLists || {};

    // action 'getAll'
    abp.services.app.markSheetLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSheetLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'checkStatus', value: input.checkStatus }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'classFilter', value: input.classFilter }, { name: 'typeFilter', value: input.typeFilter }, { name: 'termFilter', value: input.termFilter }, { name: 'refFilter', value: input.refFilter }, { name: 'subjectFilter', value: input.subjectFilter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'semesterFilter', value: input.semesterFilter }, { name: 'teacherSubjectIdFilter', value: input.teacherSubjectIdFilter }, { name: 'maxCAT2Filter', value: input.maxCAT2Filter }, { name: 'minCAT2Filter', value: input.minCAT2Filter }, { name: 'attendanceDate', value: input.attendanceDate }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBySubjectByLecturer'
    abp.services.app.markSheetLists.getAllBySubjectByLecturer = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSheetLists/GetAllBySubjectByLecturer' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'checkStatus', value: input.checkStatus }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'classFilter', value: input.classFilter }, { name: 'typeFilter', value: input.typeFilter }, { name: 'termFilter', value: input.termFilter }, { name: 'refFilter', value: input.refFilter }, { name: 'subjectFilter', value: input.subjectFilter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'semesterFilter', value: input.semesterFilter }, { name: 'teacherSubjectIdFilter', value: input.teacherSubjectIdFilter }, { name: 'maxCAT2Filter', value: input.maxCAT2Filter }, { name: 'minCAT2Filter', value: input.minCAT2Filter }, { name: 'attendanceDate', value: input.attendanceDate }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllBySubjectByLecturer2'
    abp.services.app.markSheetLists.getAllBySubjectByLecturer2 = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSheetLists/GetAllBySubjectByLecturer2' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'checkStatus', value: input.checkStatus }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'classFilter', value: input.classFilter }, { name: 'typeFilter', value: input.typeFilter }, { name: 'termFilter', value: input.termFilter }, { name: 'refFilter', value: input.refFilter }, { name: 'subjectFilter', value: input.subjectFilter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'semesterFilter', value: input.semesterFilter }, { name: 'teacherSubjectIdFilter', value: input.teacherSubjectIdFilter }, { name: 'maxCAT2Filter', value: input.maxCAT2Filter }, { name: 'minCAT2Filter', value: input.minCAT2Filter }, { name: 'attendanceDate', value: input.attendanceDate }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSubjectMarksheet'
    abp.services.app.markSheetLists.getSubjectMarksheet = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSheetLists/GetSubjectMarksheet' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'checkStatus', value: input.checkStatus }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'classFilter', value: input.classFilter }, { name: 'typeFilter', value: input.typeFilter }, { name: 'termFilter', value: input.termFilter }, { name: 'refFilter', value: input.refFilter }, { name: 'subjectFilter', value: input.subjectFilter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'semesterFilter', value: input.semesterFilter }, { name: 'teacherSubjectIdFilter', value: input.teacherSubjectIdFilter }, { name: 'maxCAT2Filter', value: input.maxCAT2Filter }, { name: 'minCAT2Filter', value: input.minCAT2Filter }, { name: 'attendanceDate', value: input.attendanceDate }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGrade'
    abp.services.app.markSheetLists.getGrade = function(gradingList, totalMark, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSheetLists/GetGrade' + abp.utils.buildQueryString([{ name: 'gradingList', value: gradingList }, { name: 'totalMark', value: totalMark }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'populateMarkListByRef'
    abp.services.app.markSheetLists.populateMarkListByRef = function(teacherSubject_ref, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSheetLists/PopulateMarkListByRef' + abp.utils.buildQueryString([{ name: 'teacherSubject_ref', value: teacherSubject_ref }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getAllBySubjectByLecturerByRegister'
    abp.services.app.markSheetLists.getAllBySubjectByLecturerByRegister = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSheetLists/getAllBySubjectByLecturerByRegister' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'checkStatus', value: input.checkStatus }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'classFilter', value: input.classFilter }, { name: 'typeFilter', value: input.typeFilter }, { name: 'termFilter', value: input.termFilter }, { name: 'refFilter', value: input.refFilter }, { name: 'subjectFilter', value: input.subjectFilter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'semesterFilter', value: input.semesterFilter }, { name: 'teacherSubjectIdFilter', value: input.teacherSubjectIdFilter }, { name: 'maxCAT2Filter', value: input.maxCAT2Filter }, { name: 'minCAT2Filter', value: input.minCAT2Filter }, { name: 'attendanceDate', value: input.attendanceDate }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getMarkSheetListForView'
    abp.services.app.markSheetLists.getMarkSheetListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSheetLists/GetMarkSheetListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getMarkSheetListForEdit'
    abp.services.app.markSheetLists.getMarkSheetListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSheetLists/GetMarkSheetListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.markSheetLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSheetLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'submitByLecturer'
    abp.services.app.markSheetLists.submitByLecturer = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSheetLists/SubmitByLecturer',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'approvalByLecturer'
    abp.services.app.markSheetLists.approvalByLecturer = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSheetLists/ApprovalByLecturer',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'updateByLecturer'
    abp.services.app.markSheetLists.updateByLecturer = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSheetLists/UpdateByLecturer',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'updateMarkSheetByAdmin'
    abp.services.app.markSheetLists.updateMarkSheetByAdmin = function(data, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSheetLists/UpdateMarkSheetByAdmin',
        type: 'PUT',
        data: JSON.stringify(data)
      }, ajaxParams));;
    };

    // action 'getMarkSheetListsToExcel'
    abp.services.app.markSheetLists.getMarkSheetListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSheetLists/GetMarkSheetListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'classFilter', value: input.classFilter }, { name: 'typeFilter', value: input.typeFilter }, { name: 'refFilter', value: input.refFilter }, { name: 'termFilter', value: input.termFilter }, { name: 'subjectFilter', value: input.subjectFilter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'semesterFilter', value: input.semesterFilter }, { name: 'maxCAT2Filter', value: input.maxCAT2Filter }, { name: 'minCAT2Filter', value: input.minCAT2Filter }, { name: 'teacherSubjectIdFilter', value: input.teacherSubjectIdFilter }, { name: 'attendanceDate', value: input.attendanceDate }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getMarkSheetListsToExcelByRegister'
    abp.services.app.markSheetLists.getMarkSheetListsToExcelByRegister = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSheetLists/GetMarkSheetListsToExcelByRegister' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'classFilter', value: input.classFilter }, { name: 'typeFilter', value: input.typeFilter }, { name: 'refFilter', value: input.refFilter }, { name: 'termFilter', value: input.termFilter }, { name: 'subjectFilter', value: input.subjectFilter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'semesterFilter', value: input.semesterFilter }, { name: 'maxCAT2Filter', value: input.maxCAT2Filter }, { name: 'minCAT2Filter', value: input.minCAT2Filter }, { name: 'teacherSubjectIdFilter', value: input.teacherSubjectIdFilter }, { name: 'attendanceDate', value: input.attendanceDate }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getMarkSheetListsToExcelByMarklist'
    abp.services.app.markSheetLists.getMarkSheetListsToExcelByMarklist = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSheetLists/GetMarkSheetListsToExcelByMarklist' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'classFilter', value: input.classFilter }, { name: 'typeFilter', value: input.typeFilter }, { name: 'refFilter', value: input.refFilter }, { name: 'termFilter', value: input.termFilter }, { name: 'subjectFilter', value: input.subjectFilter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'semesterFilter', value: input.semesterFilter }, { name: 'maxCAT2Filter', value: input.maxCAT2Filter }, { name: 'minCAT2Filter', value: input.minCAT2Filter }, { name: 'teacherSubjectIdFilter', value: input.teacherSubjectIdFilter }, { name: 'attendanceDate', value: input.attendanceDate }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllYearListForTableDropdown'
    abp.services.app.markSheetLists.getAllYearListForTableDropdown = function(admNo, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSheetLists/GetAllYearListForTableDropdown' + abp.utils.buildQueryString([{ name: 'admNo', value: admNo }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllSemesterListForTableDropdown'
    abp.services.app.markSheetLists.getAllSemesterListForTableDropdown = function(admNo, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSheetLists/GetAllSemesterListForTableDropdown' + abp.utils.buildQueryString([{ name: 'admNo', value: admNo }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllMarkSheetListClassListForTableDropdown'
    abp.services.app.markSheetLists.getAllMarkSheetListClassListForTableDropdown = function(subject, teacherSubjectRef, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSheetLists/GetAllMarkSheetListClassListForTableDropdown' + abp.utils.buildQueryString([{ name: 'subject', value: subject }, { name: 'teacherSubjectRef', value: teacherSubjectRef }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllUnsubmittedExamDropdown'
    abp.services.app.markSheetLists.getAllUnsubmittedExamDropdown = function(subject, classRef, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSheetLists/GetAllUnsubmittedExamDropdown' + abp.utils.buildQueryString([{ name: 'subject', value: subject }, { name: 'classRef', value: classRef }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getQuery'
    abp.services.app.markSheetLists.getQuery = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSheetLists/GetQuery' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'checkStatus', value: input.checkStatus }, { name: 'admnNoFilter', value: input.admnNoFilter }, { name: 'classFilter', value: input.classFilter }, { name: 'typeFilter', value: input.typeFilter }, { name: 'termFilter', value: input.termFilter }, { name: 'refFilter', value: input.refFilter }, { name: 'subjectFilter', value: input.subjectFilter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'semesterFilter', value: input.semesterFilter }, { name: 'teacherSubjectIdFilter', value: input.teacherSubjectIdFilter }, { name: 'maxCAT2Filter', value: input.maxCAT2Filter }, { name: 'minCAT2Filter', value: input.minCAT2Filter }, { name: 'attendanceDate', value: input.attendanceDate }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'markSymbolsLists'
  (function(){

    abp.services.app.markSymbolsLists = abp.services.app.markSymbolsLists || {};

    // action 'getAll'
    abp.services.app.markSymbolsLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSymbolsLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getMarkSymbolsListForView'
    abp.services.app.markSymbolsLists.getMarkSymbolsListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSymbolsLists/GetMarkSymbolsListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getMarkSymbolsListForEdit'
    abp.services.app.markSymbolsLists.getMarkSymbolsListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSymbolsLists/GetMarkSymbolsListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.markSymbolsLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSymbolsLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.markSymbolsLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSymbolsLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getMarkSymbolsListsToExcel'
    abp.services.app.markSymbolsLists.getMarkSymbolsListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSymbolsLists/GetMarkSymbolsListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'departmentLists'
  (function(){

    abp.services.app.departmentLists = abp.services.app.departmentLists || {};

    // action 'getAll'
    abp.services.app.departmentLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DepartmentLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getDepartmentListForView'
    abp.services.app.departmentLists.getDepartmentListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DepartmentLists/GetDepartmentListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getDepartmentListForEdit'
    abp.services.app.departmentLists.getDepartmentListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DepartmentLists/GetDepartmentListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.departmentLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DepartmentLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getDepartmentListsToExcel'
    abp.services.app.departmentLists.getDepartmentListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DepartmentLists/GetDepartmentListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllDepartmentListForLookupTable'
    abp.services.app.departmentLists.getAllDepartmentListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DepartmentLists/GetAllDepartmentListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'curriculumDetails'
  (function(){

    abp.services.app.curriculumDetails = abp.services.app.curriculumDetails || {};

    // action 'getAll'
    abp.services.app.curriculumDetails.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CurriculumDetails/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'grpFilter', value: input.grpFilter }, { name: 'subjectFilter', value: input.subjectFilter }, { name: 'maxRdateFilter', value: input.maxRdateFilter }, { name: 'minRdateFilter', value: input.minRdateFilter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'semesterFilter', value: input.semesterFilter }, { name: 'curriculumRefFilter', value: input.curriculumRefFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByCurriculum'
    abp.services.app.curriculumDetails.getAllByCurriculum = function(curriculumID, year, semester, specializationID, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CurriculumDetails/GetAllByCurriculum' + abp.utils.buildQueryString([{ name: 'curriculumID', value: curriculumID }, { name: 'year', value: year }, { name: 'semester', value: semester }, { name: 'specializationID', value: specializationID }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCurriculumDetailForView'
    abp.services.app.curriculumDetails.getCurriculumDetailForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CurriculumDetails/GetCurriculumDetailForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCurriculumDetailForEdit'
    abp.services.app.curriculumDetails.getCurriculumDetailForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CurriculumDetails/GetCurriculumDetailForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.curriculumDetails.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CurriculumDetails/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.curriculumDetails['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CurriculumDetails/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getCurriculumDetailsToExcel'
    abp.services.app.curriculumDetails.getCurriculumDetailsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CurriculumDetails/GetCurriculumDetailsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'grpFilter', value: input.grpFilter }, { name: 'subjectFilter', value: input.subjectFilter }, { name: 'maxRdateFilter', value: input.maxRdateFilter }, { name: 'minRdateFilter', value: input.minRdateFilter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'semesterFilter', value: input.semesterFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'curriculumLists'
  (function(){

    abp.services.app.curriculumLists = abp.services.app.curriculumLists || {};

    // action 'getAll'
    abp.services.app.curriculumLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CurriculumLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'classFilter', value: input.classFilter }, { name: 'meritTypeFilter', value: input.meritTypeFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCurriculumListForViewByClass'
    abp.services.app.curriculumLists.getCurriculumListForViewByClass = function(studentClass, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CurriculumLists/GetCurriculumListForViewByClass' + abp.utils.buildQueryString([{ name: 'studentClass', value: studentClass }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCurriculumListForViewByCode'
    abp.services.app.curriculumLists.getCurriculumListForViewByCode = function(programmeCode, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CurriculumLists/GetCurriculumListForViewByCode' + abp.utils.buildQueryString([{ name: 'programmeCode', value: programmeCode }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCurriculumListForView'
    abp.services.app.curriculumLists.getCurriculumListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CurriculumLists/GetCurriculumListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getCurriculumListForEdit'
    abp.services.app.curriculumLists.getCurriculumListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CurriculumLists/GetCurriculumListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.curriculumLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CurriculumLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.curriculumLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CurriculumLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getCurriculumListsToExcel'
    abp.services.app.curriculumLists.getCurriculumListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CurriculumLists/GetCurriculumListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'classFilter', value: input.classFilter }, { name: 'meritTypeFilter', value: input.meritTypeFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'studentCoursesRegistrations'
  (function(){

    abp.services.app.studentCoursesRegistrations = abp.services.app.studentCoursesRegistrations || {};

    // action 'getAll'
    abp.services.app.studentCoursesRegistrations.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentCoursesRegistrations/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'semesterFilter', value: input.semesterFilter }, { name: 'maxRdateFilter', value: input.maxRdateFilter }, { name: 'minRdateFilter', value: input.minRdateFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentCoursesRegistrationForView'
    abp.services.app.studentCoursesRegistrations.getStudentCoursesRegistrationForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentCoursesRegistrations/GetStudentCoursesRegistrationForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentCoursesAttendanceForRegister'
    abp.services.app.studentCoursesRegistrations.getStudentCoursesAttendanceForRegister = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentCoursesRegistrations/GetStudentCoursesAttendanceForRegister' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentSurveyForStudent'
    abp.services.app.studentCoursesRegistrations.getStudentSurveyForStudent = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentCoursesRegistrations/GetStudentSurveyForStudent' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentCoursesRegistrationForViewCurrentYear'
    abp.services.app.studentCoursesRegistrations.getStudentCoursesRegistrationForViewCurrentYear = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentCoursesRegistrations/GetStudentCoursesRegistrationForViewCurrentYear' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'setSpecializationByStudent'
    abp.services.app.studentCoursesRegistrations.setSpecializationByStudent = function(specializationID, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentCoursesRegistrations/SetSpecializationByStudent' + abp.utils.buildQueryString([{ name: 'specializationID', value: specializationID }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getStudentCoursesRegistrationForViewByStudent'
    abp.services.app.studentCoursesRegistrations.getStudentCoursesRegistrationForViewByStudent = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentCoursesRegistrations/GetStudentCoursesRegistrationForViewByStudent',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTranscriptBySubject'
    abp.services.app.studentCoursesRegistrations.getTranscriptBySubject = function(yearId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentCoursesRegistrations/GetTranscriptBySubject' + abp.utils.buildQueryString([{ name: 'yearId', value: yearId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getReportCardBySubject'
    abp.services.app.studentCoursesRegistrations.getReportCardBySubject = function(subjectId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentCoursesRegistrations/GetReportCardBySubject' + abp.utils.buildQueryString([{ name: 'subjectId', value: subjectId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGrade'
    abp.services.app.studentCoursesRegistrations.getGrade = function(gradingList, totalMark, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentCoursesRegistrations/GetGrade' + abp.utils.buildQueryString([{ name: 'gradingList', value: gradingList }, { name: 'totalMark', value: totalMark }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentCoursesRegistrationForEdit'
    abp.services.app.studentCoursesRegistrations.getStudentCoursesRegistrationForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentCoursesRegistrations/GetStudentCoursesRegistrationForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.studentCoursesRegistrations.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentCoursesRegistrations/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'registerCourse'
    abp.services.app.studentCoursesRegistrations.registerCourse = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentCoursesRegistrations/registerCourse',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.studentCoursesRegistrations['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentCoursesRegistrations/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getStudentCoursesRegistrationsToExcel'
    abp.services.app.studentCoursesRegistrations.getStudentCoursesRegistrationsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentCoursesRegistrations/GetStudentCoursesRegistrationsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'semesterFilter', value: input.semesterFilter }, { name: 'maxRdateFilter', value: input.maxRdateFilter }, { name: 'minRdateFilter', value: input.minRdateFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'groups'
  (function(){

    abp.services.app.groups = abp.services.app.groups || {};

    // action 'getAll'
    abp.services.app.groups.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Groups/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'namesFilter', value: input.namesFilter }, { name: 'programmeFilter', value: input.programmeFilter }, { name: 'termFilter', value: input.termFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupForView'
    abp.services.app.groups.getGroupForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Groups/GetGroupForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getGroupForEdit'
    abp.services.app.groups.getGroupForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Groups/GetGroupForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.groups.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Groups/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.groups['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Groups/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getGroupsToExcel'
    abp.services.app.groups.getGroupsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Groups/GetGroupsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'namesFilter', value: input.namesFilter }, { name: 'programmeFilter', value: input.programmeFilter }, { name: 'termFilter', value: input.termFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'programmeSpecializationLists'
  (function(){

    abp.services.app.programmeSpecializationLists = abp.services.app.programmeSpecializationLists || {};

    // action 'getAll'
    abp.services.app.programmeSpecializationLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProgrammeSpecializationLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'programmeIDFilter', value: input.programmeIDFilter }, { name: 'closedFilter', value: input.closedFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getProgrammeSpecializationListForView'
    abp.services.app.programmeSpecializationLists.getProgrammeSpecializationListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProgrammeSpecializationLists/GetProgrammeSpecializationListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getProgrammeSpecializationListForEdit'
    abp.services.app.programmeSpecializationLists.getProgrammeSpecializationListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProgrammeSpecializationLists/GetProgrammeSpecializationListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.programmeSpecializationLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProgrammeSpecializationLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.programmeSpecializationLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProgrammeSpecializationLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getProgrammeSpecializationListsToExcel'
    abp.services.app.programmeSpecializationLists.getProgrammeSpecializationListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ProgrammeSpecializationLists/GetProgrammeSpecializationListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'programmeIDFilter', value: input.programmeIDFilter }, { name: 'closedFilter', value: input.closedFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'markTypeLists'
  (function(){

    abp.services.app.markTypeLists = abp.services.app.markTypeLists || {};

    // action 'getAll'
    abp.services.app.markTypeLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkTypeLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getMarkTypeListForView'
    abp.services.app.markTypeLists.getMarkTypeListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkTypeLists/GetMarkTypeListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getMarkTypeListForEdit'
    abp.services.app.markTypeLists.getMarkTypeListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkTypeLists/GetMarkTypeListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.markTypeLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkTypeLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.markTypeLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkTypeLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getMarkTypeListsToExcel'
    abp.services.app.markTypeLists.getMarkTypeListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkTypeLists/GetMarkTypeListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'markSheetSupLists'
  (function(){

    abp.services.app.markSheetSupLists = abp.services.app.markSheetSupLists || {};

    // action 'getAll'
    abp.services.app.markSheetSupLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSheetSupLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'classFilter', value: input.classFilter }, { name: 'typeFilter', value: input.typeFilter }, { name: 'termFilter', value: input.termFilter }, { name: 'subjectFilter', value: input.subjectFilter }, { name: 'notesFilter', value: input.notesFilter }, { name: 'maxrdateFilter', value: input.maxrdateFilter }, { name: 'minrdateFilter', value: input.minrdateFilter }, { name: 'maxAttFilter', value: input.maxAttFilter }, { name: 'minAttFilter', value: input.minAttFilter }, { name: 'maxEXAMFilter', value: input.maxEXAMFilter }, { name: 'minEXAMFilter', value: input.minEXAMFilter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'semesterFilter', value: input.semesterFilter }, { name: 'backlogFilter', value: input.backlogFilter }, { name: 'submitFilter', value: input.submitFilter }, { name: 'maxTotalMarkFilter', value: input.maxTotalMarkFilter }, { name: 'minTotalMarkFilter', value: input.minTotalMarkFilter }, { name: 'approvalLevelFilter', value: input.approvalLevelFilter }, { name: 'chkNonMarkFilter', value: input.chkNonMarkFilter }, { name: 'nonMarkFilter', value: input.nonMarkFilter }, { name: 'actualMarksFilter', value: input.actualMarksFilter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getMarkSheetSupListForView'
    abp.services.app.markSheetSupLists.getMarkSheetSupListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSheetSupLists/GetMarkSheetSupListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getMarkSheetSupListForEdit'
    abp.services.app.markSheetSupLists.getMarkSheetSupListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSheetSupLists/GetMarkSheetSupListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.markSheetSupLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSheetSupLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.markSheetSupLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSheetSupLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getMarkSheetSupListsToExcel'
    abp.services.app.markSheetSupLists.getMarkSheetSupListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSheetSupLists/GetMarkSheetSupListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'classFilter', value: input.classFilter }, { name: 'typeFilter', value: input.typeFilter }, { name: 'termFilter', value: input.termFilter }, { name: 'subjectFilter', value: input.subjectFilter }, { name: 'notesFilter', value: input.notesFilter }, { name: 'maxrdateFilter', value: input.maxrdateFilter }, { name: 'minrdateFilter', value: input.minrdateFilter }, { name: 'maxAttFilter', value: input.maxAttFilter }, { name: 'minAttFilter', value: input.minAttFilter }, { name: 'maxEXAMFilter', value: input.maxEXAMFilter }, { name: 'minEXAMFilter', value: input.minEXAMFilter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'semesterFilter', value: input.semesterFilter }, { name: 'backlogFilter', value: input.backlogFilter }, { name: 'submitFilter', value: input.submitFilter }, { name: 'maxTotalMarkFilter', value: input.maxTotalMarkFilter }, { name: 'minTotalMarkFilter', value: input.minTotalMarkFilter }, { name: 'approvalLevelFilter', value: input.approvalLevelFilter }, { name: 'chkNonMarkFilter', value: input.chkNonMarkFilter }, { name: 'nonMarkFilter', value: input.nonMarkFilter }, { name: 'actualMarksFilter', value: input.actualMarksFilter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllStudentDetailForLookupTable'
    abp.services.app.markSheetSupLists.getAllStudentDetailForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/MarkSheetSupLists/GetAllStudentDetailForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'examBookingLists'
  (function(){

    abp.services.app.examBookingLists = abp.services.app.examBookingLists || {};

    // action 'getAll'
    abp.services.app.examBookingLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'reportedFilter', value: input.reportedFilter }, { name: 'isProcessedFilter', value: input.isProcessedFilter }, { name: 'departmentApprovedFilter', value: input.departmentApprovedFilter }, { name: 'principalApprovedFilter', value: input.principalApprovedFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'examTypeFilter', value: input.examTypeFilter }, { name: 'categoryFilter', value: input.categoryFilter }, { name: 'previousIndexNumberFilter', value: input.previousIndexNumberFilter }, { name: 'previousExamYearFilter', value: input.previousExamYearFilter }, { name: 'previousExamFilter', value: input.previousExamFilter }, { name: 'previousSeriesFilter', value: input.previousSeriesFilter }, { name: 'examSeriesFilter', value: input.examSeriesFilter }, { name: 'departmentDeclineReasonFilter', value: input.departmentDeclineReasonFilter }, { name: 'principalDeclineReasonFilter', value: input.principalDeclineReasonFilter }, { name: 'subsequentFilter', value: input.subsequentFilter }, { name: 'examOfficeApprovedFilter', value: input.examOfficeApprovedFilter }, { name: 'departmentFilter', value: input.departmentFilter }, { name: 'programmeFilter', value: input.programmeFilter }, { name: 'userNameFilter', value: input.userNameFilter }, { name: 'userName2Filter', value: input.userName2Filter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }, { name: 'userName3Filter', value: input.userName3Filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getExamBookingListForView'
    abp.services.app.examBookingLists.getExamBookingListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingLists/GetExamBookingListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getExamBookingListForEdit'
    abp.services.app.examBookingLists.getExamBookingListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingLists/GetExamBookingListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.examBookingLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.examBookingLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'examBookingApproveByDepartment'
    abp.services.app.examBookingLists.examBookingApproveByDepartment = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingLists/ExamBookingApproveByDepartment',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'examBookingRejectByDepartment'
    abp.services.app.examBookingLists.examBookingRejectByDepartment = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingLists/ExamBookingRejectByDepartment',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'examBookingApproveByExamOffice'
    abp.services.app.examBookingLists.examBookingApproveByExamOffice = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingLists/ExamBookingApproveByExamOffice',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'examBookingRejectByExamOffice'
    abp.services.app.examBookingLists.examBookingRejectByExamOffice = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingLists/ExamBookingRejectByExamOffice',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'examBookingApproveByPrincipal'
    abp.services.app.examBookingLists.examBookingApproveByPrincipal = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingLists/ExamBookingApproveByPrincipal',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'examBookingRejectByPrincipal'
    abp.services.app.examBookingLists.examBookingRejectByPrincipal = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingLists/ExamBookingRejectByPrincipal',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getExamBookingListsToExcel'
    abp.services.app.examBookingLists.getExamBookingListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingLists/GetExamBookingListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'reportedFilter', value: input.reportedFilter }, { name: 'departmentApprovedFilter', value: input.departmentApprovedFilter }, { name: 'principalApprovedFilter', value: input.principalApprovedFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'examTypeFilter', value: input.examTypeFilter }, { name: 'categoryFilter', value: input.categoryFilter }, { name: 'previousIndexNumberFilter', value: input.previousIndexNumberFilter }, { name: 'previousExamYearFilter', value: input.previousExamYearFilter }, { name: 'previousExamFilter', value: input.previousExamFilter }, { name: 'previousSeriesFilter', value: input.previousSeriesFilter }, { name: 'examSeriesFilter', value: input.examSeriesFilter }, { name: 'departmentDeclineReasonFilter', value: input.departmentDeclineReasonFilter }, { name: 'principalDeclineReasonFilter', value: input.principalDeclineReasonFilter }, { name: 'subsequentFilter', value: input.subsequentFilter }, { name: 'examOfficeApprovedFilter', value: input.examOfficeApprovedFilter }, { name: 'userNameFilter', value: input.userNameFilter }, { name: 'userName2Filter', value: input.userName2Filter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }, { name: 'userName3Filter', value: input.userName3Filter }, { name: 'isProcessedFilter', value: input.isProcessedFilter }, { name: 'departmentFilter', value: input.departmentFilter }, { name: 'programmeFilter', value: input.programmeFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllUserForTableDropdown'
    abp.services.app.examBookingLists.getAllUserForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingLists/GetAllUserForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllUserForLookupTable'
    abp.services.app.examBookingLists.getAllUserForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingLists/GetAllUserForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllStudentDetailForLookupTable'
    abp.services.app.examBookingLists.getAllStudentDetailForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingLists/GetAllStudentDetailForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'requestExamBooking'
    abp.services.app.examBookingLists.requestExamBooking = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingLists/RequestExamBooking',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getAllByStudent'
    abp.services.app.examBookingLists.getAllByStudent = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingLists/GetAllByStudent' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'reportedFilter', value: input.reportedFilter }, { name: 'isProcessedFilter', value: input.isProcessedFilter }, { name: 'departmentApprovedFilter', value: input.departmentApprovedFilter }, { name: 'principalApprovedFilter', value: input.principalApprovedFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'examTypeFilter', value: input.examTypeFilter }, { name: 'categoryFilter', value: input.categoryFilter }, { name: 'previousIndexNumberFilter', value: input.previousIndexNumberFilter }, { name: 'previousExamYearFilter', value: input.previousExamYearFilter }, { name: 'previousExamFilter', value: input.previousExamFilter }, { name: 'previousSeriesFilter', value: input.previousSeriesFilter }, { name: 'examSeriesFilter', value: input.examSeriesFilter }, { name: 'departmentDeclineReasonFilter', value: input.departmentDeclineReasonFilter }, { name: 'principalDeclineReasonFilter', value: input.principalDeclineReasonFilter }, { name: 'subsequentFilter', value: input.subsequentFilter }, { name: 'examOfficeApprovedFilter', value: input.examOfficeApprovedFilter }, { name: 'departmentFilter', value: input.departmentFilter }, { name: 'programmeFilter', value: input.programmeFilter }, { name: 'userNameFilter', value: input.userNameFilter }, { name: 'userName2Filter', value: input.userName2Filter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }, { name: 'userName3Filter', value: input.userName3Filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getExamBookingListForViewByStudent'
    abp.services.app.examBookingLists.getExamBookingListForViewByStudent = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingLists/GetExamBookingListForViewByStudent' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getExamBookingListStudentForEdit'
    abp.services.app.examBookingLists.getExamBookingListStudentForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingLists/GetExamBookingListStudentForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEditByStudent'
    abp.services.app.examBookingLists.createOrEditByStudent = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingLists/CreateOrEditByStudent',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getAllDepartmentForLookupTable'
    abp.services.app.examBookingLists.getAllDepartmentForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingLists/GetAllDepartmentForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllProgrammeForLookupTable'
    abp.services.app.examBookingLists.getAllProgrammeForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingLists/GetAllProgrammeForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'examBookingAuthorizations'
  (function(){

    abp.services.app.examBookingAuthorizations = abp.services.app.examBookingAuthorizations || {};

    // action 'getAll'
    abp.services.app.examBookingAuthorizations.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingAuthorizations/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'registarerAppovedFilter', value: input.registarerAppovedFilter }, { name: 'maxRegistarerAppovedAtFilter', value: input.maxRegistarerAppovedAtFilter }, { name: 'minRegistarerAppovedAtFilter', value: input.minRegistarerAppovedAtFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'principalApprovedFilter', value: input.principalApprovedFilter }, { name: 'registarerDecineReasonFilter', value: input.registarerDecineReasonFilter }, { name: 'examSeriesFilter', value: input.examSeriesFilter }, { name: 'userNameFilter', value: input.userNameFilter }, { name: 'userName2Filter', value: input.userName2Filter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getExamBookingAuthorizationForView'
    abp.services.app.examBookingAuthorizations.getExamBookingAuthorizationForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingAuthorizations/GetExamBookingAuthorizationForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'examBookingAuthorizationByRegistar'
    abp.services.app.examBookingAuthorizations.examBookingAuthorizationByRegistar = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingAuthorizations/ExamBookingAuthorizationByRegistar',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'examBookingAuthorizationRejectByRegistar'
    abp.services.app.examBookingAuthorizations.examBookingAuthorizationRejectByRegistar = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingAuthorizations/ExamBookingAuthorizationRejectByRegistar',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'examBookingAuthorizationByPrincipal'
    abp.services.app.examBookingAuthorizations.examBookingAuthorizationByPrincipal = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingAuthorizations/ExamBookingAuthorizationByPrincipal',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'examBookingAuthorizationRejectByPrincipal'
    abp.services.app.examBookingAuthorizations.examBookingAuthorizationRejectByPrincipal = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingAuthorizations/ExamBookingAuthorizationRejectByPrincipal',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getExamBookingAuthorizationForEdit'
    abp.services.app.examBookingAuthorizations.getExamBookingAuthorizationForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingAuthorizations/GetExamBookingAuthorizationForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.examBookingAuthorizations.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingAuthorizations/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.examBookingAuthorizations['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingAuthorizations/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getExamBookingAuthorizationsToExcel'
    abp.services.app.examBookingAuthorizations.getExamBookingAuthorizationsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingAuthorizations/GetExamBookingAuthorizationsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'registarerAppovedFilter', value: input.registarerAppovedFilter }, { name: 'maxRegistarerAppovedAtFilter', value: input.maxRegistarerAppovedAtFilter }, { name: 'minRegistarerAppovedAtFilter', value: input.minRegistarerAppovedAtFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'principalApprovedFilter', value: input.principalApprovedFilter }, { name: 'registarerDecineReasonFilter', value: input.registarerDecineReasonFilter }, { name: 'examSeriesFilter', value: input.examSeriesFilter }, { name: 'userNameFilter', value: input.userNameFilter }, { name: 'userName2Filter', value: input.userName2Filter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllUserForLookupTable'
    abp.services.app.examBookingAuthorizations.getAllUserForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingAuthorizations/GetAllUserForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllStudentDetailForLookupTable'
    abp.services.app.examBookingAuthorizations.getAllStudentDetailForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ExamBookingAuthorizations/GetAllStudentDetailForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'classScheduleLists'
  (function(){

    abp.services.app.classScheduleLists = abp.services.app.classScheduleLists || {};

    // action 'getAll'
    abp.services.app.classScheduleLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ClassScheduleLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'termFilter', value: input.termFilter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'semesterFilter', value: input.semesterFilter }, { name: 'promotionFilter', value: input.promotionFilter }, { name: 'closedFilter', value: input.closedFilter }, { name: 'groupnamesFilter', value: input.groupnamesFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getClassScheduleListForView'
    abp.services.app.classScheduleLists.getClassScheduleListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ClassScheduleLists/GetClassScheduleListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getClassScheduleListForEdit'
    abp.services.app.classScheduleLists.getClassScheduleListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ClassScheduleLists/GetClassScheduleListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.classScheduleLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ClassScheduleLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.classScheduleLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ClassScheduleLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getClassScheduleListsToExcel'
    abp.services.app.classScheduleLists.getClassScheduleListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ClassScheduleLists/GetClassScheduleListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'termFilter', value: input.termFilter }, { name: 'yearFilter', value: input.yearFilter }, { name: 'semesterFilter', value: input.semesterFilter }, { name: 'promotionFilter', value: input.promotionFilter }, { name: 'closedFilter', value: input.closedFilter }, { name: 'groupnamesFilter', value: input.groupnamesFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllGroupForLookupTable'
    abp.services.app.classScheduleLists.getAllGroupForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ClassScheduleLists/GetAllGroupForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'studentOldClassLists'
  (function(){

    abp.services.app.studentOldClassLists = abp.services.app.studentOldClassLists || {};

    // action 'getAll'
    abp.services.app.studentOldClassLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentOldClassLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'studentDetailIdFilter', value: input.studentDetailIdFilter }, { name: 'groupnamesFilter', value: input.groupnamesFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentOldClassListForView'
    abp.services.app.studentOldClassLists.getStudentOldClassListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentOldClassLists/GetStudentOldClassListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentOldClassListForEdit'
    abp.services.app.studentOldClassLists.getStudentOldClassListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentOldClassLists/GetStudentOldClassListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.studentOldClassLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentOldClassLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.studentOldClassLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentOldClassLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getStudentOldClassListsToExcel'
    abp.services.app.studentOldClassLists.getStudentOldClassListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentOldClassLists/GetStudentOldClassListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'studentDetailIdFilter', value: input.studentDetailIdFilter }, { name: 'groupnamesFilter', value: input.groupnamesFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllStudentDetailForTableDropdown'
    abp.services.app.studentOldClassLists.getAllStudentDetailForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentOldClassLists/GetAllStudentDetailForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllGroupForLookupTable'
    abp.services.app.studentOldClassLists.getAllGroupForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentOldClassLists/GetAllGroupForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'academicYearLists'
  (function(){

    abp.services.app.academicYearLists = abp.services.app.academicYearLists || {};

    // action 'getAll'
    abp.services.app.academicYearLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AcademicYearLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'refFilter', value: input.refFilter }, { name: 'namesFilter', value: input.namesFilter }, { name: 'maxSDateFilter', value: input.maxSDateFilter }, { name: 'minSDateFilter', value: input.minSDateFilter }, { name: 'maxEDateFilter', value: input.maxEDateFilter }, { name: 'minEDateFilter', value: input.minEDateFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAcademicYearListForView'
    abp.services.app.academicYearLists.getAcademicYearListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AcademicYearLists/GetAcademicYearListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAcademicYearListForEdit'
    abp.services.app.academicYearLists.getAcademicYearListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AcademicYearLists/GetAcademicYearListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.academicYearLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AcademicYearLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.academicYearLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AcademicYearLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAcademicYearListsToExcel'
    abp.services.app.academicYearLists.getAcademicYearListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AcademicYearLists/GetAcademicYearListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'refFilter', value: input.refFilter }, { name: 'namesFilter', value: input.namesFilter }, { name: 'maxSDateFilter', value: input.maxSDateFilter }, { name: 'minSDateFilter', value: input.minSDateFilter }, { name: 'maxEDateFilter', value: input.maxEDateFilter }, { name: 'minEDateFilter', value: input.minEDateFilter }, { name: 'statusFilter', value: input.statusFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'terms'
  (function(){

    abp.services.app.terms = abp.services.app.terms || {};

    // action 'getAll'
    abp.services.app.terms.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Terms/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTermForView'
    abp.services.app.terms.getTermForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Terms/GetTermForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTermForViewByBtwDate'
    abp.services.app.terms.getTermForViewByBtwDate = function(startdate, enddate, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Terms/GetTermForViewByBtwDate' + abp.utils.buildQueryString([{ name: 'startdate', value: startdate }, { name: 'enddate', value: enddate }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTermForViewByDate'
    abp.services.app.terms.getTermForViewByDate = function(startdate, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Terms/GetTermForViewByDate' + abp.utils.buildQueryString([{ name: 'startdate', value: startdate }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getActiveTerms'
    abp.services.app.terms.getActiveTerms = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Terms/GetActiveTerms',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTermForEdit'
    abp.services.app.terms.getTermForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Terms/GetTermForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.terms.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Terms/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.terms['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Terms/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getTermsToExcel'
    abp.services.app.terms.getTermsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Terms/GetTermsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAcademicTerms'
    abp.services.app.terms.getAcademicTerms = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Terms/GetAcademicTerms',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllAcademicTerms'
    abp.services.app.terms.getAllAcademicTerms = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Terms/GetAllAcademicTerms',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'leaveTypeLists'
  (function(){

    abp.services.app.leaveTypeLists = abp.services.app.leaveTypeLists || {};

    // action 'getAll'
    abp.services.app.leaveTypeLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeaveTypeLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLeaveTypeListForView'
    abp.services.app.leaveTypeLists.getLeaveTypeListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeaveTypeLists/GetLeaveTypeListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLeaveTypeListForEdit'
    abp.services.app.leaveTypeLists.getLeaveTypeListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeaveTypeLists/GetLeaveTypeListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.leaveTypeLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeaveTypeLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.leaveTypeLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeaveTypeLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'leaveEntitlementLists'
  (function(){

    abp.services.app.leaveEntitlementLists = abp.services.app.leaveEntitlementLists || {};

    // action 'getAll'
    abp.services.app.leaveEntitlementLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeaveEntitlementLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'empNoFilter', value: input.empNoFilter }, { name: 'categoryFilter', value: input.categoryFilter }, { name: 'maxRYearFilter', value: input.maxRYearFilter }, { name: 'minRYearFilter', value: input.minRYearFilter }, { name: 'leaveTypeListNameFilter', value: input.leaveTypeListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLeaveEntitlementListForView'
    abp.services.app.leaveEntitlementLists.getLeaveEntitlementListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeaveEntitlementLists/GetLeaveEntitlementListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLeaveEntitlementListForEdit'
    abp.services.app.leaveEntitlementLists.getLeaveEntitlementListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeaveEntitlementLists/GetLeaveEntitlementListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.leaveEntitlementLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeaveEntitlementLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.leaveEntitlementLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeaveEntitlementLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAllLeaveTypeListForTableDropdown'
    abp.services.app.leaveEntitlementLists.getAllLeaveTypeListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeaveEntitlementLists/GetAllLeaveTypeListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'leaveApplicationLists'
  (function(){

    abp.services.app.leaveApplicationLists = abp.services.app.leaveApplicationLists || {};

    // action 'getAll'
    abp.services.app.leaveApplicationLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeaveApplicationLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'empNoFilter', value: input.empNoFilter }, { name: 'maxRYearFilter', value: input.maxRYearFilter }, { name: 'minRYearFilter', value: input.minRYearFilter }, { name: 'approvalStatusFilter', value: input.approvalStatusFilter }, { name: 'institutionApprovalFilter', value: input.institutionApprovalFilter }, { name: 'departmentApprovalFilter', value: input.departmentApprovalFilter }, { name: 'leaveTypeListNameFilter', value: input.leaveTypeListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLeaveApplicationListForView'
    abp.services.app.leaveApplicationLists.getLeaveApplicationListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeaveApplicationLists/GetLeaveApplicationListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLeaveApplicationListForEdit'
    abp.services.app.leaveApplicationLists.getLeaveApplicationListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeaveApplicationLists/GetLeaveApplicationListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.leaveApplicationLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeaveApplicationLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'approveLeave'
    abp.services.app.leaveApplicationLists.approveLeave = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeaveApplicationLists/ApproveLeave',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'hrApproveLeave'
    abp.services.app.leaveApplicationLists.hrApproveLeave = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeaveApplicationLists/HrApproveLeave',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'approveInstitutionLeave'
    abp.services.app.leaveApplicationLists.approveInstitutionLeave = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeaveApplicationLists/ApproveInstitutionLeave',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.leaveApplicationLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeaveApplicationLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAllUserForLookupTable'
    abp.services.app.leaveApplicationLists.getAllUserForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeaveApplicationLists/GetAllUserForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLeaveApplicationListsToExcel'
    abp.services.app.leaveApplicationLists.getLeaveApplicationListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeaveApplicationLists/GetLeaveApplicationListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'empNoFilter', value: input.empNoFilter }, { name: 'maxRYearFilter', value: input.maxRYearFilter }, { name: 'minRYearFilter', value: input.minRYearFilter }, { name: 'approvalStatusFilter', value: input.approvalStatusFilter }, { name: 'leaveTypeListNameFilter', value: input.leaveTypeListNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllLeaveTypeListForTableDropdown'
    abp.services.app.leaveApplicationLists.getAllLeaveTypeListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeaveApplicationLists/GetAllLeaveTypeListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByUser'
    abp.services.app.leaveApplicationLists.getAllByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeaveApplicationLists/GetAllByUser' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'empNoFilter', value: input.empNoFilter }, { name: 'maxRYearFilter', value: input.maxRYearFilter }, { name: 'minRYearFilter', value: input.minRYearFilter }, { name: 'approvalStatusFilter', value: input.approvalStatusFilter }, { name: 'institutionApprovalFilter', value: input.institutionApprovalFilter }, { name: 'departmentApprovalFilter', value: input.departmentApprovalFilter }, { name: 'leaveTypeListNameFilter', value: input.leaveTypeListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLeaveApplicationListForViewByUser'
    abp.services.app.leaveApplicationLists.getLeaveApplicationListForViewByUser = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeaveApplicationLists/GetLeaveApplicationListForViewByUser' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLeaveApplicationListForEditByUser'
    abp.services.app.leaveApplicationLists.getLeaveApplicationListForEditByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeaveApplicationLists/GetLeaveApplicationListForEditByUser' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEditByUser'
    abp.services.app.leaveApplicationLists.createOrEditByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeaveApplicationLists/CreateOrEditByUser',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'deleteByUser'
    abp.services.app.leaveApplicationLists.deleteByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeaveApplicationLists/DeleteByUser' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getLeaveApplicationListsToExcelByUser'
    abp.services.app.leaveApplicationLists.getLeaveApplicationListsToExcelByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeaveApplicationLists/GetLeaveApplicationListsToExcelByUser' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'empNoFilter', value: input.empNoFilter }, { name: 'maxRYearFilter', value: input.maxRYearFilter }, { name: 'minRYearFilter', value: input.minRYearFilter }, { name: 'approvalStatusFilter', value: input.approvalStatusFilter }, { name: 'leaveTypeListNameFilter', value: input.leaveTypeListNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllLeaveTypeUserListForTableDropdown'
    abp.services.app.leaveApplicationLists.getAllLeaveTypeUserListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LeaveApplicationLists/GetAllLeaveTypeUserListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'employeeLists'
  (function(){

    abp.services.app.employeeLists = abp.services.app.employeeLists || {};

    // action 'getAll'
    abp.services.app.employeeLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EmployeeLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'iDNoFilter', value: input.iDNoFilter }, { name: 'namesFilter', value: input.namesFilter }, { name: 'cellFilter', value: input.cellFilter }, { name: 'pINFilter', value: input.pINFilter }, { name: 'nHIFFilter', value: input.nHIFFilter }, { name: 'api_Key', value: input.api_Key }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEmployees'
    abp.services.app.employeeLists.getEmployees = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EmployeeLists/GetEmployees' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'iDNoFilter', value: input.iDNoFilter }, { name: 'namesFilter', value: input.namesFilter }, { name: 'cellFilter', value: input.cellFilter }, { name: 'pINFilter', value: input.pINFilter }, { name: 'nHIFFilter', value: input.nHIFFilter }, { name: 'api_Key', value: input.api_Key }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEmployeeListForView'
    abp.services.app.employeeLists.getEmployeeListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EmployeeLists/GetEmployeeListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEmployeePayslipForView'
    abp.services.app.employeeLists.getEmployeePayslipForView = function(periodName, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EmployeeLists/GetEmployeePayslipForView' + abp.utils.buildQueryString([{ name: 'periodName', value: periodName }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEmployeeP9ForView'
    abp.services.app.employeeLists.getEmployeeP9ForView = function(periodName, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EmployeeLists/GetEmployeeP9ForView' + abp.utils.buildQueryString([{ name: 'periodName', value: periodName }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEmployeeListForEdit'
    abp.services.app.employeeLists.getEmployeeListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EmployeeLists/GetEmployeeListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.employeeLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EmployeeLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.employeeLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EmployeeLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getEmployeeListsToExcel'
    abp.services.app.employeeLists.getEmployeeListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EmployeeLists/GetEmployeeListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'iDNoFilter', value: input.iDNoFilter }, { name: 'namesFilter', value: input.namesFilter }, { name: 'cellFilter', value: input.cellFilter }, { name: 'pINFilter', value: input.pINFilter }, { name: 'nHIFFilter', value: input.nHIFFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getDetailsByUserId'
    abp.services.app.employeeLists.getDetailsByUserId = function(userId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EmployeeLists/GetDetailsByUserId' + abp.utils.buildQueryString([{ name: 'userId', value: userId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllEmployeeListForLookupTable'
    abp.services.app.employeeLists.getAllEmployeeListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EmployeeLists/GetAllEmployeeListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEmployeesDetailByIds'
    abp.services.app.employeeLists.getEmployeesDetailByIds = function(employeeIds, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EmployeeLists/GetEmployeesDetailByIds' + abp.utils.buildQueryString([{ name: 'employeeIds', value: employeeIds }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'updateEmployeeImage'
    abp.services.app.employeeLists.updateEmployeeImage = function(employeeId, pics, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EmployeeLists/UpdateEmployeeImage' + abp.utils.buildQueryString([{ name: 'employeeId', value: employeeId }]) + '',
        type: 'PUT',
        data: JSON.stringify(pics)
      }, ajaxParams));;
    };

    // action 'getEmployeeImage'
    abp.services.app.employeeLists.getEmployeeImage = function(employeeId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EmployeeLists/GetEmployeeImage' + abp.utils.buildQueryString([{ name: 'employeeId', value: employeeId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'employeeCardsUpdate'
    abp.services.app.employeeLists.employeeCardsUpdate = function(studentDetailsList, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EmployeeLists/EmployeeCardsUpdate',
        type: 'POST',
        data: JSON.stringify(studentDetailsList)
      }, ajaxParams));;
    };

    // action 'removeEmployeeImage'
    abp.services.app.employeeLists.removeEmployeeImage = function(admno, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EmployeeLists/RemoveEmployeeImage' + abp.utils.buildQueryString([{ name: 'admno', value: admno }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'geEmployeeBarcode'
    abp.services.app.employeeLists.geEmployeeBarcode = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/EmployeeLists/GeEmployeeBarcode',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'hrpServiceLists'
  (function(){

    abp.services.app.hrpServiceLists = abp.services.app.hrpServiceLists || {};

    // action 'getAll'
    abp.services.app.hrpServiceLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HrpServiceLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'empNoFilter', value: input.empNoFilter }, { name: 'eventFilter', value: input.eventFilter }, { name: 'jobTitleFilter', value: input.jobTitleFilter }, { name: 'empStatusFilter', value: input.empStatusFilter }, { name: 'pGradeFilter', value: input.pGradeFilter }, { name: 'rankFilter', value: input.rankFilter }, { name: 'pFreqFilter', value: input.pFreqFilter }, { name: 'pModeFilter', value: input.pModeFilter }, { name: 'maxSdateFilter', value: input.maxSdateFilter }, { name: 'minSdateFilter', value: input.minSdateFilter }, { name: 'maxEDateFilter', value: input.maxEDateFilter }, { name: 'minEDateFilter', value: input.minEDateFilter }, { name: 'bankFilter', value: input.bankFilter }, { name: 'accNoFilter', value: input.accNoFilter }, { name: 'hseTypeFilter', value: input.hseTypeFilter }, { name: 'hseTermsFilter', value: input.hseTermsFilter }, { name: 'hseRentTypeFilter', value: input.hseRentTypeFilter }, { name: 'maxHseValueFilter', value: input.maxHseValueFilter }, { name: 'minHseValueFilter', value: input.minHseValueFilter }, { name: 'maxHseRentFilter', value: input.maxHseRentFilter }, { name: 'minHseRentFilter', value: input.minHseRentFilter }, { name: 'maxOOInterestFilter', value: input.maxOOInterestFilter }, { name: 'minOOInterestFilter', value: input.minOOInterestFilter }, { name: 'maxIncDateFilter', value: input.maxIncDateFilter }, { name: 'minIncDateFilter', value: input.minIncDateFilter }, { name: 'notesFilter', value: input.notesFilter }, { name: 'personnelFilter', value: input.personnelFilter }, { name: 'pensionFilter', value: input.pensionFilter }, { name: 'currencyFilter', value: input.currencyFilter }, { name: 'currSymbolFilter', value: input.currSymbolFilter }, { name: 'pAYEFilter', value: input.pAYEFilter }, { name: 'nHIFFilter', value: input.nHIFFilter }, { name: 'nSSFFilter', value: input.nSSFFilter }, { name: 'profileTypeFilter', value: input.profileTypeFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHrpServiceListForView'
    abp.services.app.hrpServiceLists.getHrpServiceListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HrpServiceLists/GetHrpServiceListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getHrpServiceListForEdit'
    abp.services.app.hrpServiceLists.getHrpServiceListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HrpServiceLists/GetHrpServiceListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.hrpServiceLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HrpServiceLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.hrpServiceLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HrpServiceLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getHrpServiceListsToExcel'
    abp.services.app.hrpServiceLists.getHrpServiceListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HrpServiceLists/GetHrpServiceListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'empNoFilter', value: input.empNoFilter }, { name: 'eventFilter', value: input.eventFilter }, { name: 'jobTitleFilter', value: input.jobTitleFilter }, { name: 'empStatusFilter', value: input.empStatusFilter }, { name: 'pGradeFilter', value: input.pGradeFilter }, { name: 'rankFilter', value: input.rankFilter }, { name: 'pFreqFilter', value: input.pFreqFilter }, { name: 'pModeFilter', value: input.pModeFilter }, { name: 'maxSdateFilter', value: input.maxSdateFilter }, { name: 'minSdateFilter', value: input.minSdateFilter }, { name: 'maxEDateFilter', value: input.maxEDateFilter }, { name: 'minEDateFilter', value: input.minEDateFilter }, { name: 'bankFilter', value: input.bankFilter }, { name: 'accNoFilter', value: input.accNoFilter }, { name: 'hseTypeFilter', value: input.hseTypeFilter }, { name: 'hseTermsFilter', value: input.hseTermsFilter }, { name: 'hseRentTypeFilter', value: input.hseRentTypeFilter }, { name: 'maxHseValueFilter', value: input.maxHseValueFilter }, { name: 'minHseValueFilter', value: input.minHseValueFilter }, { name: 'maxHseRentFilter', value: input.maxHseRentFilter }, { name: 'minHseRentFilter', value: input.minHseRentFilter }, { name: 'maxOOInterestFilter', value: input.maxOOInterestFilter }, { name: 'minOOInterestFilter', value: input.minOOInterestFilter }, { name: 'maxIncDateFilter', value: input.maxIncDateFilter }, { name: 'minIncDateFilter', value: input.minIncDateFilter }, { name: 'notesFilter', value: input.notesFilter }, { name: 'personnelFilter', value: input.personnelFilter }, { name: 'pensionFilter', value: input.pensionFilter }, { name: 'currencyFilter', value: input.currencyFilter }, { name: 'currSymbolFilter', value: input.currSymbolFilter }, { name: 'pAYEFilter', value: input.pAYEFilter }, { name: 'nHIFFilter', value: input.nHIFFilter }, { name: 'nSSFFilter', value: input.nSSFFilter }, { name: 'profileTypeFilter', value: input.profileTypeFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'displinaryActionLists'
  (function(){

    abp.services.app.displinaryActionLists = abp.services.app.displinaryActionLists || {};

    // action 'getAll'
    abp.services.app.displinaryActionLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DisplinaryActionLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'disciplinaryActionFilter', value: input.disciplinaryActionFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getDisplinaryActionListForView'
    abp.services.app.displinaryActionLists.getDisplinaryActionListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DisplinaryActionLists/GetDisplinaryActionListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getDisplinaryActionListForEdit'
    abp.services.app.displinaryActionLists.getDisplinaryActionListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DisplinaryActionLists/GetDisplinaryActionListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.displinaryActionLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DisplinaryActionLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.displinaryActionLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DisplinaryActionLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'disciplinaryCaseLists'
  (function(){

    abp.services.app.disciplinaryCaseLists = abp.services.app.disciplinaryCaseLists || {};

    // action 'getAll'
    abp.services.app.disciplinaryCaseLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DisciplinaryCaseLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'disciplinaryStatusFilter', value: input.disciplinaryStatusFilter }, { name: 'displinaryActionListDisciplinaryActionFilter', value: input.displinaryActionListDisciplinaryActionFilter }, { name: 'userNameFilter', value: input.userNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllForUser'
    abp.services.app.disciplinaryCaseLists.getAllForUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DisciplinaryCaseLists/GetAllForUser' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'disciplinaryStatusFilter', value: input.disciplinaryStatusFilter }, { name: 'displinaryActionListDisciplinaryActionFilter', value: input.displinaryActionListDisciplinaryActionFilter }, { name: 'userNameFilter', value: input.userNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getDisciplinaryCaseListForView'
    abp.services.app.disciplinaryCaseLists.getDisciplinaryCaseListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DisciplinaryCaseLists/GetDisciplinaryCaseListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getDisciplinaryCaseListForEdit'
    abp.services.app.disciplinaryCaseLists.getDisciplinaryCaseListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DisciplinaryCaseLists/GetDisciplinaryCaseListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.disciplinaryCaseLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DisciplinaryCaseLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'approveByAdmin'
    abp.services.app.disciplinaryCaseLists.approveByAdmin = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DisciplinaryCaseLists/ApproveByAdmin',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'appealByUser2'
    abp.services.app.disciplinaryCaseLists.appealByUser2 = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DisciplinaryCaseLists/AppealByUser2',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'finalseByAdmin'
    abp.services.app.disciplinaryCaseLists.finalseByAdmin = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DisciplinaryCaseLists/FinalseByAdmin',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.disciplinaryCaseLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DisciplinaryCaseLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getDisciplinaryCaseListsToExcel'
    abp.services.app.disciplinaryCaseLists.getDisciplinaryCaseListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DisciplinaryCaseLists/GetDisciplinaryCaseListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'disciplinaryStatusFilter', value: input.disciplinaryStatusFilter }, { name: 'displinaryActionListDisciplinaryActionFilter', value: input.displinaryActionListDisciplinaryActionFilter }, { name: 'userNameFilter', value: input.userNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllDisplinaryActionListForTableDropdown'
    abp.services.app.disciplinaryCaseLists.getAllDisplinaryActionListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DisciplinaryCaseLists/GetAllDisplinaryActionListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllUserForLookupTable'
    abp.services.app.disciplinaryCaseLists.getAllUserForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DisciplinaryCaseLists/GetAllUserForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'appealByUser'
    abp.services.app.disciplinaryCaseLists.appealByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DisciplinaryCaseLists/AppealByUser',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

  })();

  // controller 'edition'
  (function(){

    abp.services.app.edition = abp.services.app.edition || {};

    // action 'getEditions'
    abp.services.app.edition.getEditions = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Edition/GetEditions',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEditionForEdit'
    abp.services.app.edition.getEditionForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Edition/GetEditionForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createEdition'
    abp.services.app.edition.createEdition = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Edition/CreateEdition',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'updateEdition'
    abp.services.app.edition.updateEdition = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Edition/UpdateEdition',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'deleteEdition'
    abp.services.app.edition.deleteEdition = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Edition/DeleteEdition' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'moveTenantsToAnotherEdition'
    abp.services.app.edition.moveTenantsToAnotherEdition = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Edition/MoveTenantsToAnotherEdition',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getEditionComboboxItems'
    abp.services.app.edition.getEditionComboboxItems = function(selectedEditionId, addAllItem, onlyFreeItems, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Edition/GetEditionComboboxItems' + abp.utils.buildQueryString([{ name: 'selectedEditionId', value: selectedEditionId }, { name: 'addAllItem', value: addAllItem }, { name: 'onlyFreeItems', value: onlyFreeItems }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getTenantCount'
    abp.services.app.edition.getTenantCount = function(editionId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Edition/GetTenantCount' + abp.utils.buildQueryString([{ name: 'editionId', value: editionId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'dynamicEntityProperty'
  (function(){

    abp.services.app.dynamicEntityProperty = abp.services.app.dynamicEntityProperty || {};

    // action 'get'
    abp.services.app.dynamicEntityProperty.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityProperty/Get' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllPropertiesOfAnEntity'
    abp.services.app.dynamicEntityProperty.getAllPropertiesOfAnEntity = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityProperty/GetAllPropertiesOfAnEntity' + abp.utils.buildQueryString([{ name: 'entityFullName', value: input.entityFullName }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAll'
    abp.services.app.dynamicEntityProperty.getAll = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityProperty/GetAll',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'add'
    abp.services.app.dynamicEntityProperty.add = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityProperty/Add',
        type: 'POST',
        data: JSON.stringify(dto)
      }, ajaxParams));;
    };

    // action 'update'
    abp.services.app.dynamicEntityProperty.update = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityProperty/Update',
        type: 'PUT',
        data: JSON.stringify(dto)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.dynamicEntityProperty['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityProperty/Delete' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAllEntitiesHasDynamicProperty'
    abp.services.app.dynamicEntityProperty.getAllEntitiesHasDynamicProperty = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityProperty/GetAllEntitiesHasDynamicProperty',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'dynamicEntityPropertyDefinition'
  (function(){

    abp.services.app.dynamicEntityPropertyDefinition = abp.services.app.dynamicEntityPropertyDefinition || {};

    // action 'getAllAllowedInputTypeNames'
    abp.services.app.dynamicEntityPropertyDefinition.getAllAllowedInputTypeNames = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityPropertyDefinition/GetAllAllowedInputTypeNames',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllEntities'
    abp.services.app.dynamicEntityPropertyDefinition.getAllEntities = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityPropertyDefinition/GetAllEntities',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'dynamicEntityPropertyValue'
  (function(){

    abp.services.app.dynamicEntityPropertyValue = abp.services.app.dynamicEntityPropertyValue || {};

    // action 'get'
    abp.services.app.dynamicEntityPropertyValue.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityPropertyValue/Get' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAll'
    abp.services.app.dynamicEntityPropertyValue.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityPropertyValue/GetAll' + abp.utils.buildQueryString([{ name: 'entityId', value: input.entityId }, { name: 'propertyId', value: input.propertyId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'add'
    abp.services.app.dynamicEntityPropertyValue.add = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityPropertyValue/Add',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'update'
    abp.services.app.dynamicEntityPropertyValue.update = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityPropertyValue/Update',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.dynamicEntityPropertyValue['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityPropertyValue/Delete' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAllDynamicEntityPropertyValues'
    abp.services.app.dynamicEntityPropertyValue.getAllDynamicEntityPropertyValues = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityPropertyValue/GetAllDynamicEntityPropertyValues' + abp.utils.buildQueryString([{ name: 'entityFullName', value: input.entityFullName }, { name: 'entityId', value: input.entityId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'insertOrUpdateAllValues'
    abp.services.app.dynamicEntityPropertyValue.insertOrUpdateAllValues = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityPropertyValue/InsertOrUpdateAllValues',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'cleanValues'
    abp.services.app.dynamicEntityPropertyValue.cleanValues = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicEntityPropertyValue/CleanValues',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

  })();

  // controller 'dynamicProperty'
  (function(){

    abp.services.app.dynamicProperty = abp.services.app.dynamicProperty || {};

    // action 'get'
    abp.services.app.dynamicProperty.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicProperty/Get' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAll'
    abp.services.app.dynamicProperty.getAll = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicProperty/GetAll',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'add'
    abp.services.app.dynamicProperty.add = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicProperty/Add',
        type: 'POST',
        data: JSON.stringify(dto)
      }, ajaxParams));;
    };

    // action 'update'
    abp.services.app.dynamicProperty.update = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicProperty/Update',
        type: 'PUT',
        data: JSON.stringify(dto)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.dynamicProperty['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicProperty/Delete' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'findAllowedInputType'
    abp.services.app.dynamicProperty.findAllowedInputType = function(name, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicProperty/FindAllowedInputType' + abp.utils.buildQueryString([{ name: 'name', value: name }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'dynamicPropertyValue'
  (function(){

    abp.services.app.dynamicPropertyValue = abp.services.app.dynamicPropertyValue || {};

    // action 'get'
    abp.services.app.dynamicPropertyValue.get = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicPropertyValue/Get' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllValuesOfDynamicProperty'
    abp.services.app.dynamicPropertyValue.getAllValuesOfDynamicProperty = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicPropertyValue/GetAllValuesOfDynamicProperty' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'add'
    abp.services.app.dynamicPropertyValue.add = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicPropertyValue/Add',
        type: 'POST',
        data: JSON.stringify(dto)
      }, ajaxParams));;
    };

    // action 'update'
    abp.services.app.dynamicPropertyValue.update = function(dto, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicPropertyValue/Update',
        type: 'PUT',
        data: JSON.stringify(dto)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.dynamicPropertyValue['delete'] = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DynamicPropertyValue/Delete' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'demoUiComponents'
  (function(){

    abp.services.app.demoUiComponents = abp.services.app.demoUiComponents || {};

    // action 'sendAndGetDate'
    abp.services.app.demoUiComponents.sendAndGetDate = function(date, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DemoUiComponents/SendAndGetDate' + abp.utils.buildQueryString([{ name: 'date', value: date }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'sendAndGetDateTime'
    abp.services.app.demoUiComponents.sendAndGetDateTime = function(date, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DemoUiComponents/SendAndGetDateTime' + abp.utils.buildQueryString([{ name: 'date', value: date }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'sendAndGetDateRange'
    abp.services.app.demoUiComponents.sendAndGetDateRange = function(startDate, endDate, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DemoUiComponents/SendAndGetDateRange' + abp.utils.buildQueryString([{ name: 'startDate', value: startDate }, { name: 'endDate', value: endDate }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getCountries'
    abp.services.app.demoUiComponents.getCountries = function(searchTerm, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DemoUiComponents/GetCountries' + abp.utils.buildQueryString([{ name: 'searchTerm', value: searchTerm }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'sendAndGetSelectedCountries'
    abp.services.app.demoUiComponents.sendAndGetSelectedCountries = function(selectedCountries, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DemoUiComponents/SendAndGetSelectedCountries',
        type: 'POST',
        data: JSON.stringify(selectedCountries)
      }, ajaxParams));;
    };

    // action 'sendAndGetValue'
    abp.services.app.demoUiComponents.sendAndGetValue = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DemoUiComponents/SendAndGetValue' + abp.utils.buildQueryString([{ name: 'input', value: input }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'dashboardCustomization'
  (function(){

    abp.services.app.dashboardCustomization = abp.services.app.dashboardCustomization || {};

    // action 'getUserDashboard'
    abp.services.app.dashboardCustomization.getUserDashboard = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DashboardCustomization/GetUserDashboard' + abp.utils.buildQueryString([{ name: 'dashboardName', value: input.dashboardName }, { name: 'application', value: input.application }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'savePage'
    abp.services.app.dashboardCustomization.savePage = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DashboardCustomization/SavePage',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'renamePage'
    abp.services.app.dashboardCustomization.renamePage = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DashboardCustomization/RenamePage',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'addNewPage'
    abp.services.app.dashboardCustomization.addNewPage = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DashboardCustomization/AddNewPage',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'deletePage'
    abp.services.app.dashboardCustomization.deletePage = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DashboardCustomization/DeletePage' + abp.utils.buildQueryString([{ name: 'id', value: input.id }, { name: 'dashboardName', value: input.dashboardName }, { name: 'application', value: input.application }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'addWidget'
    abp.services.app.dashboardCustomization.addWidget = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DashboardCustomization/AddWidget',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getDashboardDefinition'
    abp.services.app.dashboardCustomization.getDashboardDefinition = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DashboardCustomization/GetDashboardDefinition' + abp.utils.buildQueryString([{ name: 'dashboardName', value: input.dashboardName }, { name: 'application', value: input.application }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllWidgetDefinitions'
    abp.services.app.dashboardCustomization.getAllWidgetDefinitions = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DashboardCustomization/GetAllWidgetDefinitions' + abp.utils.buildQueryString([{ name: 'dashboardName', value: input.dashboardName }, { name: 'application', value: input.application }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getSettingName'
    abp.services.app.dashboardCustomization.getSettingName = function(application, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DashboardCustomization/GetSettingName' + abp.utils.buildQueryString([{ name: 'application', value: application }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'uiCustomizationSettings'
  (function(){

    abp.services.app.uiCustomizationSettings = abp.services.app.uiCustomizationSettings || {};

    // action 'getUiManagementSettings'
    abp.services.app.uiCustomizationSettings.getUiManagementSettings = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UiCustomizationSettings/GetUiManagementSettings',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'changeThemeWithDefaultValues'
    abp.services.app.uiCustomizationSettings.changeThemeWithDefaultValues = function(themeName, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UiCustomizationSettings/ChangeThemeWithDefaultValues' + abp.utils.buildQueryString([{ name: 'themeName', value: themeName }]) + '',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'updateUiManagementSettings'
    abp.services.app.uiCustomizationSettings.updateUiManagementSettings = function(settings, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UiCustomizationSettings/UpdateUiManagementSettings',
        type: 'PUT',
        data: JSON.stringify(settings)
      }, ajaxParams));;
    };

    // action 'updateDefaultUiManagementSettings'
    abp.services.app.uiCustomizationSettings.updateDefaultUiManagementSettings = function(settings, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UiCustomizationSettings/UpdateDefaultUiManagementSettings',
        type: 'PUT',
        data: JSON.stringify(settings)
      }, ajaxParams));;
    };

    // action 'useSystemDefaultSettings'
    abp.services.app.uiCustomizationSettings.useSystemDefaultSettings = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UiCustomizationSettings/UseSystemDefaultSettings',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'tenantSettings'
  (function(){

    abp.services.app.tenantSettings = abp.services.app.tenantSettings || {};

    // action 'getAllSettings'
    abp.services.app.tenantSettings.getAllSettings = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantSettings/GetAllSettings',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'updateAllSettings'
    abp.services.app.tenantSettings.updateAllSettings = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantSettings/UpdateAllSettings',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'clearLogo'
    abp.services.app.tenantSettings.clearLogo = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantSettings/ClearLogo',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'clearCustomCss'
    abp.services.app.tenantSettings.clearCustomCss = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantSettings/ClearCustomCss',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'sendTestEmail'
    abp.services.app.tenantSettings.sendTestEmail = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantSettings/SendTestEmail',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getEnabledSocialLoginSettings'
    abp.services.app.tenantSettings.getEnabledSocialLoginSettings = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/TenantSettings/GetEnabledSocialLoginSettings',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'hostSettings'
  (function(){

    abp.services.app.hostSettings = abp.services.app.hostSettings || {};

    // action 'getAllSettings'
    abp.services.app.hostSettings.getAllSettings = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostSettings/GetAllSettings',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'updateAllSettings'
    abp.services.app.hostSettings.updateAllSettings = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostSettings/UpdateAllSettings',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'sendTestEmail'
    abp.services.app.hostSettings.sendTestEmail = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostSettings/SendTestEmail',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getEnabledSocialLoginSettings'
    abp.services.app.hostSettings.getEnabledSocialLoginSettings = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/HostSettings/GetEnabledSocialLoginSettings',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'kcbV1'
  (function(){

    abp.services.app.kcbV1 = abp.services.app.kcbV1 || {};

    // action 'getStudent'
    abp.services.app.kcbV1.getStudent = function(json, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/KcbV1/GetStudent',
        type: 'GET',
        data: JSON.stringify(json)
      }, ajaxParams));;
    };

    // action 'createReceiptFromBank'
    abp.services.app.kcbV1.createReceiptFromBank = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/KcbV1/CreateReceiptFromBank',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getReceiptDetails'
    abp.services.app.kcbV1.getReceiptDetails = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/KcbV1/GetReceiptDetails' + abp.utils.buildQueryString([{ name: 'refNo', value: input.refNo }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'bankComponent'
  (function(){

    abp.services.app.bankComponent = abp.services.app.bankComponent || {};

    // action 'getStudent'
    abp.services.app.bankComponent.getStudent = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BankComponent/GetStudent' + abp.utils.buildQueryString([{ name: 'admnNo', value: input.admnNo }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'processPayment'
    abp.services.app.bankComponent.processPayment = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BankComponent/ProcessPayment',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getReceipt'
    abp.services.app.bankComponent.getReceipt = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BankComponent/GetReceipt' + abp.utils.buildQueryString([{ name: 'refNo', value: input.refNo }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'commonLookup'
  (function(){

    abp.services.app.commonLookup = abp.services.app.commonLookup || {};

    // action 'getEditionsForCombobox'
    abp.services.app.commonLookup.getEditionsForCombobox = function(onlyFreeItems, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CommonLookup/GetEditionsForCombobox' + abp.utils.buildQueryString([{ name: 'onlyFreeItems', value: onlyFreeItems }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'findUsers'
    abp.services.app.commonLookup.findUsers = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CommonLookup/FindUsers',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getDefaultEditionName'
    abp.services.app.commonLookup.getDefaultEditionName = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CommonLookup/GetDefaultEditionName',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getIdleCurrentTime'
    abp.services.app.commonLookup.getIdleCurrentTime = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/CommonLookup/GetIdleCurrentTime',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'reportingLists'
  (function(){

    abp.services.app.reportingLists = abp.services.app.reportingLists || {};

    // action 'getAll'
    abp.services.app.reportingLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ReportingLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'reportTextFilter', value: input.reportTextFilter }, { name: 'isReadOnlyFilter', value: input.isReadOnlyFilter }, { name: 'reportTypeFilter', value: input.reportTypeFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getReportingListForView'
    abp.services.app.reportingLists.getReportingListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ReportingLists/GetReportingListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getReportingListForEdit'
    abp.services.app.reportingLists.getReportingListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ReportingLists/GetReportingListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.reportingLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ReportingLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.reportingLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ReportingLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getReportToExcel'
    abp.services.app.reportingLists.getReportToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ReportingLists/GetReportToExcel' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getReportingListsToExcel'
    abp.services.app.reportingLists.getReportingListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/ReportingLists/GetReportingListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'reportTextFilter', value: input.reportTextFilter }, { name: 'isReadOnlyFilter', value: input.isReadOnlyFilter }, { name: 'reportTypeFilter', value: input.reportTypeFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'jobCronLists'
  (function(){

    abp.services.app.jobCronLists = abp.services.app.jobCronLists || {};

    // action 'getAll'
    abp.services.app.jobCronLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/JobCronLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getJobCronListForEdit'
    abp.services.app.jobCronLists.getJobCronListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/JobCronLists/GetJobCronListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.jobCronLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/JobCronLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.jobCronLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/JobCronLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'financialYearLists'
  (function(){

    abp.services.app.financialYearLists = abp.services.app.financialYearLists || {};

    // action 'getAll'
    abp.services.app.financialYearLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FinancialYearLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'maxstartdateFilter', value: input.maxstartdateFilter }, { name: 'minstartdateFilter', value: input.minstartdateFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFinancialYearListForView'
    abp.services.app.financialYearLists.getFinancialYearListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FinancialYearLists/GetFinancialYearListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFinancialYearListForEdit'
    abp.services.app.financialYearLists.getFinancialYearListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FinancialYearLists/GetFinancialYearListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.financialYearLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FinancialYearLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.financialYearLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FinancialYearLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getFinancialYearListsToExcel'
    abp.services.app.financialYearLists.getFinancialYearListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FinancialYearLists/GetFinancialYearListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'maxstartdateFilter', value: input.maxstartdateFilter }, { name: 'minstartdateFilter', value: input.minstartdateFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'branchLists'
  (function(){

    abp.services.app.branchLists = abp.services.app.branchLists || {};

    // action 'getAll'
    abp.services.app.branchLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BranchLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'businessEntityFilter', value: input.businessEntityFilter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'locationFilter', value: input.locationFilter }, { name: 'emailFilter', value: input.emailFilter }, { name: 'telephoneFilter', value: input.telephoneFilter }, { name: 'addressFilter', value: input.addressFilter }, { name: 'closedFilter', value: input.closedFilter }, { name: 'defaultsFilter', value: input.defaultsFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBranchListForView'
    abp.services.app.branchLists.getBranchListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BranchLists/GetBranchListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBranchListForEdit'
    abp.services.app.branchLists.getBranchListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BranchLists/GetBranchListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.branchLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BranchLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.branchLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BranchLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getBranchListsToExcel'
    abp.services.app.branchLists.getBranchListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BranchLists/GetBranchListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'businessEntityFilter', value: input.businessEntityFilter }, { name: 'codeFilter', value: input.codeFilter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'locationFilter', value: input.locationFilter }, { name: 'emailFilter', value: input.emailFilter }, { name: 'telephoneFilter', value: input.telephoneFilter }, { name: 'addressFilter', value: input.addressFilter }, { name: 'closedFilter', value: input.closedFilter }, { name: 'defaultsFilter', value: input.defaultsFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'vitalLists'
  (function(){

    abp.services.app.vitalLists = abp.services.app.vitalLists || {};

    // action 'getAll'
    abp.services.app.vitalLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VitalLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'itemUOMListNameFilter', value: input.itemUOMListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getVitalListForView'
    abp.services.app.vitalLists.getVitalListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VitalLists/GetVitalListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getVitalListForEdit'
    abp.services.app.vitalLists.getVitalListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VitalLists/GetVitalListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.vitalLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VitalLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.vitalLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VitalLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getVitalListsToExcel'
    abp.services.app.vitalLists.getVitalListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VitalLists/GetVitalListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'itemUOMListNameFilter', value: input.itemUOMListNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllItemUOMListForLookupTable'
    abp.services.app.vitalLists.getAllItemUOMListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VitalLists/GetAllItemUOMListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'vitalRangeLists'
  (function(){

    abp.services.app.vitalRangeLists = abp.services.app.vitalRangeLists || {};

    // action 'getAll'
    abp.services.app.vitalRangeLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VitalRangeLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'genderFilter', value: input.genderFilter }, { name: 'vitalListNameFilter', value: input.vitalListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getVitalRangeListForView'
    abp.services.app.vitalRangeLists.getVitalRangeListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VitalRangeLists/GetVitalRangeListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getVitalRangeListForEdit'
    abp.services.app.vitalRangeLists.getVitalRangeListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VitalRangeLists/GetVitalRangeListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.vitalRangeLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VitalRangeLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.vitalRangeLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VitalRangeLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getVitalRangeListsToExcel'
    abp.services.app.vitalRangeLists.getVitalRangeListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VitalRangeLists/GetVitalRangeListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'genderFilter', value: input.genderFilter }, { name: 'vitalListNameFilter', value: input.vitalListNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllVitalListForTableDropdown'
    abp.services.app.vitalRangeLists.getAllVitalListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/VitalRangeLists/GetAllVitalListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'patientVitalLists'
  (function(){

    abp.services.app.patientVitalLists = abp.services.app.patientVitalLists || {};

    // action 'getAll'
    abp.services.app.patientVitalLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientVitalLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'appointmentListRefNumberFilter', value: input.appointmentListRefNumberFilter }, { name: 'patientListRefIdFilter', value: input.patientListRefIdFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByDoctor'
    abp.services.app.patientVitalLists.getAllByDoctor = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientVitalLists/GetAllByDoctor' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'appointmentListRefNumberFilter', value: input.appointmentListRefNumberFilter }, { name: 'patientListRefIdFilter', value: input.patientListRefIdFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPatientVitalListForView'
    abp.services.app.patientVitalLists.getPatientVitalListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientVitalLists/GetPatientVitalListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPatientVitalListForEdit'
    abp.services.app.patientVitalLists.getPatientVitalListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientVitalLists/GetPatientVitalListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.patientVitalLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientVitalLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.patientVitalLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientVitalLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getPatientVitalListsToExcel'
    abp.services.app.patientVitalLists.getPatientVitalListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientVitalLists/GetPatientVitalListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'appointmentListRefNumberFilter', value: input.appointmentListRefNumberFilter }, { name: 'patientListRefIdFilter', value: input.patientListRefIdFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllAppointmentListForLookupTable'
    abp.services.app.patientVitalLists.getAllAppointmentListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientVitalLists/GetAllAppointmentListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllPatientListForLookupTable'
    abp.services.app.patientVitalLists.getAllPatientListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientVitalLists/GetAllPatientListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'facilityServiceLists'
  (function(){

    abp.services.app.facilityServiceLists = abp.services.app.facilityServiceLists || {};

    // action 'getAll'
    abp.services.app.facilityServiceLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FacilityServiceLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'billiableFilter', value: input.billiableFilter }, { name: 'maxCostFilter', value: input.maxCostFilter }, { name: 'minCostFilter', value: input.minCostFilter }, { name: 'triageFilter', value: input.triageFilter }, { name: 'facilityServiceListNameFilter', value: input.facilityServiceListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFacilityServiceListForView'
    abp.services.app.facilityServiceLists.getFacilityServiceListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FacilityServiceLists/GetFacilityServiceListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFacilityServiceListForEdit'
    abp.services.app.facilityServiceLists.getFacilityServiceListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FacilityServiceLists/GetFacilityServiceListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.facilityServiceLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FacilityServiceLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.facilityServiceLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FacilityServiceLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getFacilityServiceListsToExcel'
    abp.services.app.facilityServiceLists.getFacilityServiceListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FacilityServiceLists/GetFacilityServiceListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'billiableFilter', value: input.billiableFilter }, { name: 'maxCostFilter', value: input.maxCostFilter }, { name: 'minCostFilter', value: input.minCostFilter }, { name: 'triageFilter', value: input.triageFilter }, { name: 'facilityServiceListNameFilter', value: input.facilityServiceListNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllFacilityServiceListForLookupTable'
    abp.services.app.facilityServiceLists.getAllFacilityServiceListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/FacilityServiceLists/GetAllFacilityServiceListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'prescriptionLists'
  (function(){

    abp.services.app.prescriptionLists = abp.services.app.prescriptionLists || {};

    // action 'getAll'
    abp.services.app.prescriptionLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PrescriptionLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'refIdFilter', value: input.refIdFilter }, { name: 'itemListNameFilter', value: input.itemListNameFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'patientListRefIdFilter', value: input.patientListRefIdFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPrescriptionListForView'
    abp.services.app.prescriptionLists.getPrescriptionListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PrescriptionLists/GetPrescriptionListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPrescriptionListForEdit'
    abp.services.app.prescriptionLists.getPrescriptionListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PrescriptionLists/GetPrescriptionListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.prescriptionLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PrescriptionLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'dispersePrescription'
    abp.services.app.prescriptionLists.dispersePrescription = function(prescriptionDetailsList, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PrescriptionLists/DispersePrescription',
        type: 'POST',
        data: JSON.stringify(prescriptionDetailsList)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.prescriptionLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PrescriptionLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getPrescriptionListsToExcel'
    abp.services.app.prescriptionLists.getPrescriptionListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PrescriptionLists/GetPrescriptionListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'refIdFilter', value: input.refIdFilter }, { name: 'itemListNameFilter', value: input.itemListNameFilter }, { name: 'patientListRefIdFilter', value: input.patientListRefIdFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllItemListForLookupTable'
    abp.services.app.prescriptionLists.getAllItemListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PrescriptionLists/GetAllItemListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllPatientListForLookupTable'
    abp.services.app.prescriptionLists.getAllPatientListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PrescriptionLists/GetAllPatientListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'patientLists'
  (function(){

    abp.services.app.patientLists = abp.services.app.patientLists || {};

    // action 'getAll'
    abp.services.app.patientLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'categoryIdFilter', value: input.categoryIdFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }, { name: 'employeeListNamesFilter', value: input.employeeListNamesFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPatientListForView'
    abp.services.app.patientLists.getPatientListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientLists/GetPatientListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPatientListForEdit'
    abp.services.app.patientLists.getPatientListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientLists/GetPatientListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.patientLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'updatePatientAttributes'
    abp.services.app.patientLists.updatePatientAttributes = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientLists/UpdatePatientAttributes',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.patientLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getPatientListsToExcel'
    abp.services.app.patientLists.getPatientListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientLists/GetPatientListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'categoryIdFilter', value: input.categoryIdFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'studentDetailnamesFilter', value: input.studentDetailnamesFilter }, { name: 'employeeListNamesFilter', value: input.employeeListNamesFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllStudentDetailForLookupTable'
    abp.services.app.patientLists.getAllStudentDetailForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientLists/GetAllStudentDetailForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllEmployeeListForLookupTable'
    abp.services.app.patientLists.getAllEmployeeListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientLists/GetAllEmployeeListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'patientDiagnosisList'
  (function(){

    abp.services.app.patientDiagnosisList = abp.services.app.patientDiagnosisList || {};

    // action 'getAll'
    abp.services.app.patientDiagnosisList.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientDiagnosisList/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'diagnosisListNameFilter', value: input.diagnosisListNameFilter }, { name: 'appointmentListRefNumberFilter', value: input.appointmentListRefNumberFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPatientDiagnosisForView'
    abp.services.app.patientDiagnosisList.getPatientDiagnosisForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientDiagnosisList/GetPatientDiagnosisForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPatientDiagnosisForEdit'
    abp.services.app.patientDiagnosisList.getPatientDiagnosisForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientDiagnosisList/GetPatientDiagnosisForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.patientDiagnosisList.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientDiagnosisList/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.patientDiagnosisList['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientDiagnosisList/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getPatientDiagnosisListToExcel'
    abp.services.app.patientDiagnosisList.getPatientDiagnosisListToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientDiagnosisList/GetPatientDiagnosisListToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'diagnosisListNameFilter', value: input.diagnosisListNameFilter }, { name: 'appointmentListRefNumberFilter', value: input.appointmentListRefNumberFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllDiagnosisListForTableDropdown'
    abp.services.app.patientDiagnosisList.getAllDiagnosisListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientDiagnosisList/GetAllDiagnosisListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllAppointmentListForTableDropdown'
    abp.services.app.patientDiagnosisList.getAllAppointmentListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientDiagnosisList/GetAllAppointmentListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'patientAllergyLists'
  (function(){

    abp.services.app.patientAllergyLists = abp.services.app.patientAllergyLists || {};

    // action 'getAll'
    abp.services.app.patientAllergyLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientAllergyLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'patientListRefIdFilter', value: input.patientListRefIdFilter }, { name: 'allergyListNameFilter', value: input.allergyListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPatientAllergyListForView'
    abp.services.app.patientAllergyLists.getPatientAllergyListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientAllergyLists/GetPatientAllergyListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getPatientAllergyListForEdit'
    abp.services.app.patientAllergyLists.getPatientAllergyListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientAllergyLists/GetPatientAllergyListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.patientAllergyLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientAllergyLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.patientAllergyLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientAllergyLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getPatientAllergyListsToExcel'
    abp.services.app.patientAllergyLists.getPatientAllergyListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientAllergyLists/GetPatientAllergyListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'patientListRefIdFilter', value: input.patientListRefIdFilter }, { name: 'allergyListNameFilter', value: input.allergyListNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllPatientListForLookupTable'
    abp.services.app.patientAllergyLists.getAllPatientListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientAllergyLists/GetAllPatientListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllAllergyListForLookupTable'
    abp.services.app.patientAllergyLists.getAllAllergyListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/PatientAllergyLists/GetAllAllergyListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'labTestLists'
  (function(){

    abp.services.app.labTestLists = abp.services.app.labTestLists || {};

    // action 'getAll'
    abp.services.app.labTestLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabTestLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'billableFilter', value: input.billableFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLabTestListForView'
    abp.services.app.labTestLists.getLabTestListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabTestLists/GetLabTestListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLabTestListForEdit'
    abp.services.app.labTestLists.getLabTestListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabTestLists/GetLabTestListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.labTestLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabTestLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.labTestLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabTestLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getLabTestListsToExcel'
    abp.services.app.labTestLists.getLabTestListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabTestLists/GetLabTestListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'billableFilter', value: input.billableFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'labTestSampleLists'
  (function(){

    abp.services.app.labTestSampleLists = abp.services.app.labTestSampleLists || {};

    // action 'getAll'
    abp.services.app.labTestSampleLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabTestSampleLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'labTestListNameFilter', value: input.labTestListNameFilter }, { name: 'labSampleListNameFilter', value: input.labSampleListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLabTestSampleListForView'
    abp.services.app.labTestSampleLists.getLabTestSampleListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabTestSampleLists/GetLabTestSampleListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLabTestSampleListForEdit'
    abp.services.app.labTestSampleLists.getLabTestSampleListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabTestSampleLists/GetLabTestSampleListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.labTestSampleLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabTestSampleLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.labTestSampleLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabTestSampleLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAllLabTestListForLookupTable'
    abp.services.app.labTestSampleLists.getAllLabTestListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabTestSampleLists/GetAllLabTestListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllLabSampleListForLookupTable'
    abp.services.app.labTestSampleLists.getAllLabSampleListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabTestSampleLists/GetAllLabSampleListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'labSampleLists'
  (function(){

    abp.services.app.labSampleLists = abp.services.app.labSampleLists || {};

    // action 'getAll'
    abp.services.app.labSampleLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabSampleLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLabSampleListForView'
    abp.services.app.labSampleLists.getLabSampleListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabSampleLists/GetLabSampleListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLabSampleListForEdit'
    abp.services.app.labSampleLists.getLabSampleListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabSampleLists/GetLabSampleListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.labSampleLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabSampleLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.labSampleLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabSampleLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getLabSampleListsToExcel'
    abp.services.app.labSampleLists.getLabSampleListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabSampleLists/GetLabSampleListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'labSampleComponentLists'
  (function(){

    abp.services.app.labSampleComponentLists = abp.services.app.labSampleComponentLists || {};

    // action 'getAll'
    abp.services.app.labSampleComponentLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabSampleComponentLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'itemUOMListNameFilter', value: input.itemUOMListNameFilter }, { name: 'labSampleListNameFilter', value: input.labSampleListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLabSampleComponentListForView'
    abp.services.app.labSampleComponentLists.getLabSampleComponentListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabSampleComponentLists/GetLabSampleComponentListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLabSampleComponentListForEdit'
    abp.services.app.labSampleComponentLists.getLabSampleComponentListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabSampleComponentLists/GetLabSampleComponentListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.labSampleComponentLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabSampleComponentLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.labSampleComponentLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabSampleComponentLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getLabSampleComponentListsToExcel'
    abp.services.app.labSampleComponentLists.getLabSampleComponentListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabSampleComponentLists/GetLabSampleComponentListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'itemUOMListNameFilter', value: input.itemUOMListNameFilter }, { name: 'labSampleListNameFilter', value: input.labSampleListNameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllItemUOMListForTableDropdown'
    abp.services.app.labSampleComponentLists.getAllItemUOMListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabSampleComponentLists/GetAllItemUOMListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllLabSampleListForLookupTable'
    abp.services.app.labSampleComponentLists.getAllLabSampleListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabSampleComponentLists/GetAllLabSampleListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'labRequestLists'
  (function(){

    abp.services.app.labRequestLists = abp.services.app.labRequestLists || {};

    // action 'getAll'
    abp.services.app.labRequestLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabRequestLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'verifiedFilter', value: input.verifiedFilter }, { name: 'submittedFilter', value: input.submittedFilter }, { name: 'labTestListNameFilter', value: input.labTestListNameFilter }, { name: 'patientListRefIdFilter', value: input.patientListRefIdFilter }, { name: 'appointmentListRefNumberFilter', value: input.appointmentListRefNumberFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByDoctor'
    abp.services.app.labRequestLists.getAllByDoctor = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabRequestLists/GetAllByDoctor' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'verifiedFilter', value: input.verifiedFilter }, { name: 'submittedFilter', value: input.submittedFilter }, { name: 'labTestListNameFilter', value: input.labTestListNameFilter }, { name: 'patientListRefIdFilter', value: input.patientListRefIdFilter }, { name: 'appointmentListRefNumberFilter', value: input.appointmentListRefNumberFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLabRequestListForView'
    abp.services.app.labRequestLists.getLabRequestListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabRequestLists/GetLabRequestListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLabRequestListForEdit'
    abp.services.app.labRequestLists.getLabRequestListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabRequestLists/GetLabRequestListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.labRequestLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabRequestLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'submitLabRequest'
    abp.services.app.labRequestLists.submitLabRequest = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabRequestLists/SubmitLabRequest',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'verifyLabRequest'
    abp.services.app.labRequestLists.verifyLabRequest = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabRequestLists/VerifyLabRequest',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.labRequestLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabRequestLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getLabRequestListsToExcel'
    abp.services.app.labRequestLists.getLabRequestListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabRequestLists/GetLabRequestListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'verifiedFilter', value: input.verifiedFilter }, { name: 'submittedFilter', value: input.submittedFilter }, { name: 'labTestListNameFilter', value: input.labTestListNameFilter }, { name: 'patientListRefIdFilter', value: input.patientListRefIdFilter }, { name: 'appointmentListRefNumberFilter', value: input.appointmentListRefNumberFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllLabTestListForLookupTable'
    abp.services.app.labRequestLists.getAllLabTestListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabRequestLists/GetAllLabTestListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllPatientListForLookupTable'
    abp.services.app.labRequestLists.getAllPatientListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabRequestLists/GetAllPatientListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllAppointmentListForTableDropdown'
    abp.services.app.labRequestLists.getAllAppointmentListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabRequestLists/GetAllAppointmentListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'labRequestStatisticsLists'
  (function(){

    abp.services.app.labRequestStatisticsLists = abp.services.app.labRequestStatisticsLists || {};

    // action 'getAll'
    abp.services.app.labRequestStatisticsLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabRequestStatisticsLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'resultFilter', value: input.resultFilter }, { name: 'labRequestListStatusFilter', value: input.labRequestListStatusFilter }, { name: 'labSampleComponentListNameFilter', value: input.labSampleComponentListNameFilter }, { name: 'labSampleListNameFilter', value: input.labSampleListNameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getLabRequestStatisticsListForEdit'
    abp.services.app.labRequestStatisticsLists.getLabRequestStatisticsListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabRequestStatisticsLists/GetLabRequestStatisticsListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.labRequestStatisticsLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabRequestStatisticsLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.labRequestStatisticsLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabRequestStatisticsLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAllLabRequestListForLookupTable'
    abp.services.app.labRequestStatisticsLists.getAllLabRequestListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabRequestStatisticsLists/GetAllLabRequestListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllLabSampleComponentListForLookupTable'
    abp.services.app.labRequestStatisticsLists.getAllLabSampleComponentListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabRequestStatisticsLists/GetAllLabSampleComponentListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllLabSampleListForLookupTable'
    abp.services.app.labRequestStatisticsLists.getAllLabSampleListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/LabRequestStatisticsLists/GetAllLabSampleListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'doctorLists'
  (function(){

    abp.services.app.doctorLists = abp.services.app.doctorLists || {};

    // action 'getAll'
    abp.services.app.doctorLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DoctorLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'employeeListNamesFilter', value: input.employeeListNamesFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getDoctorListForView'
    abp.services.app.doctorLists.getDoctorListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DoctorLists/GetDoctorListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getDoctorListForEdit'
    abp.services.app.doctorLists.getDoctorListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DoctorLists/GetDoctorListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.doctorLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DoctorLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.doctorLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DoctorLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getDoctorListsToExcel'
    abp.services.app.doctorLists.getDoctorListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DoctorLists/GetDoctorListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'employeeListNamesFilter', value: input.employeeListNamesFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllEmployeeListForLookupTable'
    abp.services.app.doctorLists.getAllEmployeeListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DoctorLists/GetAllEmployeeListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'diagnosisLists'
  (function(){

    abp.services.app.diagnosisLists = abp.services.app.diagnosisLists || {};

    // action 'getAll'
    abp.services.app.diagnosisLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DiagnosisLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getDiagnosisListForView'
    abp.services.app.diagnosisLists.getDiagnosisListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DiagnosisLists/GetDiagnosisListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getDiagnosisListForEdit'
    abp.services.app.diagnosisLists.getDiagnosisListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DiagnosisLists/GetDiagnosisListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.diagnosisLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DiagnosisLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.diagnosisLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/DiagnosisLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'bloodGroupLists'
  (function(){

    abp.services.app.bloodGroupLists = abp.services.app.bloodGroupLists || {};

    // action 'getAll'
    abp.services.app.bloodGroupLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BloodGroupLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBloodGroupListForView'
    abp.services.app.bloodGroupLists.getBloodGroupListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BloodGroupLists/GetBloodGroupListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getBloodGroupListForEdit'
    abp.services.app.bloodGroupLists.getBloodGroupListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BloodGroupLists/GetBloodGroupListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.bloodGroupLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BloodGroupLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.bloodGroupLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BloodGroupLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getBloodGroupListsToExcel'
    abp.services.app.bloodGroupLists.getBloodGroupListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/BloodGroupLists/GetBloodGroupListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'appointmentLists'
  (function(){

    abp.services.app.appointmentLists = abp.services.app.appointmentLists || {};

    // action 'getAll'
    abp.services.app.appointmentLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AppointmentLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'refNumberFilter', value: input.refNumberFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'categoryFilter', value: input.categoryFilter }, { name: 'triageFilter', value: input.triageFilter }, { name: 'patientListRefIdFilter', value: input.patientListRefIdFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByTriage'
    abp.services.app.appointmentLists.getAllByTriage = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AppointmentLists/GetAllByTriage' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'refNumberFilter', value: input.refNumberFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'categoryFilter', value: input.categoryFilter }, { name: 'triageFilter', value: input.triageFilter }, { name: 'patientListRefIdFilter', value: input.patientListRefIdFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByDoctor'
    abp.services.app.appointmentLists.getAllByDoctor = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AppointmentLists/GetAllByDoctor' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'refNumberFilter', value: input.refNumberFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'categoryFilter', value: input.categoryFilter }, { name: 'triageFilter', value: input.triageFilter }, { name: 'patientListRefIdFilter', value: input.patientListRefIdFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAppointmentListForView'
    abp.services.app.appointmentLists.getAppointmentListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AppointmentLists/GetAppointmentListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAppointmentListForEdit'
    abp.services.app.appointmentLists.getAppointmentListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AppointmentLists/GetAppointmentListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.appointmentLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AppointmentLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'updateAppointmentAttributes'
    abp.services.app.appointmentLists.updateAppointmentAttributes = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AppointmentLists/UpdateAppointmentAttributes',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'closeAppointment'
    abp.services.app.appointmentLists.closeAppointment = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AppointmentLists/CloseAppointment',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.appointmentLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AppointmentLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'triageToDoctor'
    abp.services.app.appointmentLists.triageToDoctor = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AppointmentLists/TriageToDoctor',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getAppointmentListsToExcel'
    abp.services.app.appointmentLists.getAppointmentListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AppointmentLists/GetAppointmentListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'refNumberFilter', value: input.refNumberFilter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'patientListRefIdFilter', value: input.patientListRefIdFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllPatientListForLookupTable'
    abp.services.app.appointmentLists.getAllPatientListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AppointmentLists/GetAllPatientListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'allergyLists'
  (function(){

    abp.services.app.allergyLists = abp.services.app.allergyLists || {};

    // action 'getAll'
    abp.services.app.allergyLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AllergyLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllergyListForView'
    abp.services.app.allergyLists.getAllergyListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AllergyLists/GetAllergyListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllergyListForEdit'
    abp.services.app.allergyLists.getAllergyListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AllergyLists/GetAllergyListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.allergyLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AllergyLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.allergyLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AllergyLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAllergyListsToExcel'
    abp.services.app.allergyLists.getAllergyListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AllergyLists/GetAllergyListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'nameFilter', value: input.nameFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'chat'
  (function(){

    abp.services.app.chat = abp.services.app.chat || {};

    // action 'getUserChatFriendsWithSettings'
    abp.services.app.chat.getUserChatFriendsWithSettings = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Chat/GetUserChatFriendsWithSettings',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getUserChatMessages'
    abp.services.app.chat.getUserChatMessages = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Chat/GetUserChatMessages' + abp.utils.buildQueryString([{ name: 'tenantId', value: input.tenantId }, { name: 'userId', value: input.userId }, { name: 'minMessageId', value: input.minMessageId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'trashConversation'
    abp.services.app.chat.trashConversation = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Chat/TrashConversation',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'markAllUnreadMessagesOfUserAsRead'
    abp.services.app.chat.markAllUnreadMessagesOfUserAsRead = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Chat/MarkAllUnreadMessagesOfUserAsRead',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

  })();

  // controller 'caching'
  (function(){

    abp.services.app.caching = abp.services.app.caching || {};

    // action 'getAllCaches'
    abp.services.app.caching.getAllCaches = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Caching/GetAllCaches',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'clearCache'
    abp.services.app.caching.clearCache = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Caching/ClearCache',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'clearAllCaches'
    abp.services.app.caching.clearAllCaches = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Caching/ClearAllCaches',
        type: 'POST'
      }, ajaxParams));;
    };

  })();

  // controller 'user'
  (function(){

    abp.services.app.user = abp.services.app.user || {};

    // action 'getUsers'
    abp.services.app.user.getUsers = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/GetUsers' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'permissions', value: input.permissions }, { name: 'role', value: input.role }, { name: 'onlyLockedUsers', value: input.onlyLockedUsers }, { name: 'onlyOnlineUsers', value: input.onlyOnlineUsers }, { name: 'sorting', value: input.sorting }, { name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'userSynchronization'
    abp.services.app.user.userSynchronization = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/UserSynchronization',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getUsersToExcel'
    abp.services.app.user.getUsersToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/GetUsersToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'permissions', value: input.permissions }, { name: 'role', value: input.role }, { name: 'onlyLockedUsers', value: input.onlyLockedUsers }, { name: 'onlyOnlineUsers', value: input.onlyOnlineUsers }, { name: 'sorting', value: input.sorting }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getUserForEdit'
    abp.services.app.user.getUserForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/GetUserForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getUserPermissionsForEdit'
    abp.services.app.user.getUserPermissionsForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/GetUserPermissionsForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'resetUserSpecificPermissions'
    abp.services.app.user.resetUserSpecificPermissions = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/ResetUserSpecificPermissions',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'updateUserPermissions'
    abp.services.app.user.updateUserPermissions = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/UpdateUserPermissions',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'createOrUpdateUser'
    abp.services.app.user.createOrUpdateUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/CreateOrUpdateUser',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'deleteUser'
    abp.services.app.user.deleteUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/DeleteUser' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'unlockUser'
    abp.services.app.user.unlockUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/User/UnlockUser',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

  })();

  // controller 'userLink'
  (function(){

    abp.services.app.userLink = abp.services.app.userLink || {};

    // action 'linkToUser'
    abp.services.app.userLink.linkToUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserLink/LinkToUser',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getLinkedUsers'
    abp.services.app.userLink.getLinkedUsers = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserLink/GetLinkedUsers' + abp.utils.buildQueryString([{ name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }, { name: 'sorting', value: input.sorting }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getRecentlyUsedLinkedUsers'
    abp.services.app.userLink.getRecentlyUsedLinkedUsers = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserLink/GetRecentlyUsedLinkedUsers',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'unlinkUser'
    abp.services.app.userLink.unlinkUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserLink/UnlinkUser',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

  })();

  // controller 'userLogin'
  (function(){

    abp.services.app.userLogin = abp.services.app.userLogin || {};

    // action 'getRecentUserLoginAttempts'
    abp.services.app.userLogin.getRecentUserLoginAttempts = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserLogin/GetRecentUserLoginAttempts',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'profile'
  (function(){

    abp.services.app.profile = abp.services.app.profile || {};

    // action 'getCurrentUserProfileForEdit'
    abp.services.app.profile.getCurrentUserProfileForEdit = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/GetCurrentUserProfileForEdit',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'disableGoogleAuthenticator'
    abp.services.app.profile.disableGoogleAuthenticator = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/DisableGoogleAuthenticator',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'updateGoogleAuthenticatorKey'
    abp.services.app.profile.updateGoogleAuthenticatorKey = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/UpdateGoogleAuthenticatorKey',
        type: 'PUT'
      }, ajaxParams));;
    };

    // action 'sendVerificationSms'
    abp.services.app.profile.sendVerificationSms = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/SendVerificationSms',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'verifySmsCode'
    abp.services.app.profile.verifySmsCode = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/VerifySmsCode',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'prepareCollectedData'
    abp.services.app.profile.prepareCollectedData = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/PrepareCollectedData',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'updateCurrentUserProfile'
    abp.services.app.profile.updateCurrentUserProfile = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/UpdateCurrentUserProfile',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'changePassword'
    abp.services.app.profile.changePassword = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/ChangePassword',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'updateProfilePicture'
    abp.services.app.profile.updateProfilePicture = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/UpdateProfilePicture',
        type: 'PUT',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getPasswordComplexitySetting'
    abp.services.app.profile.getPasswordComplexitySetting = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/GetPasswordComplexitySetting',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getProfilePicture'
    abp.services.app.profile.getProfilePicture = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/GetProfilePicture',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getProfilePictureByUserName'
    abp.services.app.profile.getProfilePictureByUserName = function(username, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/GetProfilePictureByUserName' + abp.utils.buildQueryString([{ name: 'username', value: username }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getFriendProfilePicture'
    abp.services.app.profile.getFriendProfilePicture = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/GetFriendProfilePicture' + abp.utils.buildQueryString([{ name: 'userId', value: input.userId }, { name: 'tenantId', value: input.tenantId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getProfilePictureByUser'
    abp.services.app.profile.getProfilePictureByUser = function(userId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/GetProfilePictureByUser' + abp.utils.buildQueryString([{ name: 'userId', value: userId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'changeLanguage'
    abp.services.app.profile.changeLanguage = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Profile/ChangeLanguage',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

  })();

  // controller 'userDelegation'
  (function(){

    abp.services.app.userDelegation = abp.services.app.userDelegation || {};

    // action 'getDelegatedUsers'
    abp.services.app.userDelegation.getDelegatedUsers = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserDelegation/GetDelegatedUsers' + abp.utils.buildQueryString([{ name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }, { name: 'sorting', value: input.sorting }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'delegateNewUser'
    abp.services.app.userDelegation.delegateNewUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserDelegation/DelegateNewUser',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'removeDelegation'
    abp.services.app.userDelegation.removeDelegation = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserDelegation/RemoveDelegation' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getActiveUserDelegations'
    abp.services.app.userDelegation.getActiveUserDelegations = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/UserDelegation/GetActiveUserDelegations',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'role'
  (function(){

    abp.services.app.role = abp.services.app.role || {};

    // action 'getRoles'
    abp.services.app.role.getRoles = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/GetRoles' + abp.utils.buildQueryString([{ name: 'permissions', value: input.permissions }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getRoleForEdit'
    abp.services.app.role.getRoleForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/GetRoleForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrUpdateRole'
    abp.services.app.role.createOrUpdateRole = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/CreateOrUpdateRole',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'deleteRole'
    abp.services.app.role.deleteRole = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Role/DeleteRole' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'permission'
  (function(){

    abp.services.app.permission = abp.services.app.permission || {};

    // action 'getAllPermissions'
    abp.services.app.permission.getAllPermissions = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Permission/GetAllPermissions',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'account'
  (function(){

    abp.services.app.account = abp.services.app.account || {};

    // action 'isTenantAvailable'
    abp.services.app.account.isTenantAvailable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Account/IsTenantAvailable',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'resolveTenantId'
    abp.services.app.account.resolveTenantId = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Account/ResolveTenantId',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'register'
    abp.services.app.account.register = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Account/Register',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'sendPasswordResetCode'
    abp.services.app.account.sendPasswordResetCode = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Account/SendPasswordResetCode',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'resetPassword'
    abp.services.app.account.resetPassword = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Account/ResetPassword',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'sendEmailActivationLink'
    abp.services.app.account.sendEmailActivationLink = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Account/SendEmailActivationLink',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'activateEmail'
    abp.services.app.account.activateEmail = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Account/ActivateEmail',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'impersonate'
    abp.services.app.account.impersonate = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Account/Impersonate',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delegatedImpersonate'
    abp.services.app.account.delegatedImpersonate = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Account/DelegatedImpersonate',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'backToImpersonator'
    abp.services.app.account.backToImpersonator = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Account/BackToImpersonator',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'switchToLinkedAccount'
    abp.services.app.account.switchToLinkedAccount = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/Account/SwitchToLinkedAccount',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

  })();

  // controller 'auditLog'
  (function(){

    abp.services.app.auditLog = abp.services.app.auditLog || {};

    // action 'getAuditLogs'
    abp.services.app.auditLog.getAuditLogs = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AuditLog/GetAuditLogs' + abp.utils.buildQueryString([{ name: 'startDate', value: input.startDate }, { name: 'endDate', value: input.endDate }, { name: 'userName', value: input.userName }, { name: 'serviceName', value: input.serviceName }, { name: 'methodName', value: input.methodName }, { name: 'browserInfo', value: input.browserInfo }, { name: 'hasException', value: input.hasException }, { name: 'minExecutionDuration', value: input.minExecutionDuration }, { name: 'maxExecutionDuration', value: input.maxExecutionDuration }, { name: 'sorting', value: input.sorting }, { name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteAuditLogs'
    abp.services.app.auditLog.deleteAuditLogs = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AuditLog/DeleteAuditLogs',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAuditLogsToExcel'
    abp.services.app.auditLog.getAuditLogsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AuditLog/GetAuditLogsToExcel' + abp.utils.buildQueryString([{ name: 'startDate', value: input.startDate }, { name: 'endDate', value: input.endDate }, { name: 'userName', value: input.userName }, { name: 'serviceName', value: input.serviceName }, { name: 'methodName', value: input.methodName }, { name: 'browserInfo', value: input.browserInfo }, { name: 'hasException', value: input.hasException }, { name: 'minExecutionDuration', value: input.minExecutionDuration }, { name: 'maxExecutionDuration', value: input.maxExecutionDuration }, { name: 'sorting', value: input.sorting }, { name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEntityHistoryObjectTypes'
    abp.services.app.auditLog.getEntityHistoryObjectTypes = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AuditLog/GetEntityHistoryObjectTypes',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEntityChanges'
    abp.services.app.auditLog.getEntityChanges = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AuditLog/GetEntityChanges' + abp.utils.buildQueryString([{ name: 'startDate', value: input.startDate }, { name: 'endDate', value: input.endDate }, { name: 'userName', value: input.userName }, { name: 'entityTypeFullName', value: input.entityTypeFullName }, { name: 'sorting', value: input.sorting }, { name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEntityTypeChanges'
    abp.services.app.auditLog.getEntityTypeChanges = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AuditLog/GetEntityTypeChanges' + abp.utils.buildQueryString([{ name: 'entityTypeFullName', value: input.entityTypeFullName }, { name: 'entityId', value: input.entityId }, { name: 'sorting', value: input.sorting }, { name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEntityChangesToExcel'
    abp.services.app.auditLog.getEntityChangesToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AuditLog/GetEntityChangesToExcel' + abp.utils.buildQueryString([{ name: 'startDate', value: input.startDate }, { name: 'endDate', value: input.endDate }, { name: 'userName', value: input.userName }, { name: 'entityTypeFullName', value: input.entityTypeFullName }, { name: 'sorting', value: input.sorting }, { name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getEntityPropertyChanges'
    abp.services.app.auditLog.getEntityPropertyChanges = function(entityChangeId, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AuditLog/GetEntityPropertyChanges' + abp.utils.buildQueryString([{ name: 'entityChangeId', value: entityChangeId }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'studentAttachmentLists'
  (function(){

    abp.services.app.studentAttachmentLists = abp.services.app.studentAttachmentLists || {};

    // action 'getAll'
    abp.services.app.studentAttachmentLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAttachmentLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'institutionFilter', value: input.institutionFilter }, { name: 'locationFilter', value: input.locationFilter }, { name: 'studentDetailIdFilter', value: input.studentDetailIdFilter }, { name: 'employeeListIdFilter', value: input.employeeListIdFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentAttachmentListForView'
    abp.services.app.studentAttachmentLists.getStudentAttachmentListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAttachmentLists/GetStudentAttachmentListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentAttachmentListForEdit'
    abp.services.app.studentAttachmentLists.getStudentAttachmentListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAttachmentLists/GetStudentAttachmentListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.studentAttachmentLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAttachmentLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'approveMuiltipleStudentAttachment'
    abp.services.app.studentAttachmentLists.approveMuiltipleStudentAttachment = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAttachmentLists/ApproveMuiltipleStudentAttachment',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'assignSupervisorMuiltipleStudentAttachment'
    abp.services.app.studentAttachmentLists.assignSupervisorMuiltipleStudentAttachment = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAttachmentLists/AssignSupervisorMuiltipleStudentAttachment',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'approveStudentAttachment'
    abp.services.app.studentAttachmentLists.approveStudentAttachment = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAttachmentLists/ApproveStudentAttachment',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'completeStudentAttachment'
    abp.services.app.studentAttachmentLists.completeStudentAttachment = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAttachmentLists/CompleteStudentAttachment',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.studentAttachmentLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAttachmentLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getStudentAttachmentListsToExcel'
    abp.services.app.studentAttachmentLists.getStudentAttachmentListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAttachmentLists/GetStudentAttachmentListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'institutionFilter', value: input.institutionFilter }, { name: 'locationFilter', value: input.locationFilter }, { name: 'studentDetailIdFilter', value: input.studentDetailIdFilter }, { name: 'employeeListIdFilter', value: input.employeeListIdFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllStudentDetailForLookupTable'
    abp.services.app.studentAttachmentLists.getAllStudentDetailForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAttachmentLists/GetAllStudentDetailForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllEmployeeListForLookupTable'
    abp.services.app.studentAttachmentLists.getAllEmployeeListForLookupTable = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAttachmentLists/GetAllEmployeeListForLookupTable' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByLecturer'
    abp.services.app.studentAttachmentLists.getAllByLecturer = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAttachmentLists/GetAllByLecturer' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'institutionFilter', value: input.institutionFilter }, { name: 'locationFilter', value: input.locationFilter }, { name: 'studentDetailIdFilter', value: input.studentDetailIdFilter }, { name: 'employeeListIdFilter', value: input.employeeListIdFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentAttachmentListForViewByLecturer'
    abp.services.app.studentAttachmentLists.getStudentAttachmentListForViewByLecturer = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAttachmentLists/GetStudentAttachmentListForViewByLecturer' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'submitStudentAttachment'
    abp.services.app.studentAttachmentLists.submitStudentAttachment = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAttachmentLists/SubmitStudentAttachment',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getStudentAttachmentListForEditByLecturer'
    abp.services.app.studentAttachmentLists.getStudentAttachmentListForEditByLecturer = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAttachmentLists/GetStudentAttachmentListForEditByLecturer' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentAttachmentListsToExcelByLecturer'
    abp.services.app.studentAttachmentLists.getStudentAttachmentListsToExcelByLecturer = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAttachmentLists/GetStudentAttachmentListsToExcelByLecturer' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'institutionFilter', value: input.institutionFilter }, { name: 'locationFilter', value: input.locationFilter }, { name: 'studentDetailIdFilter', value: input.studentDetailIdFilter }, { name: 'employeeListIdFilter', value: input.employeeListIdFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByUser'
    abp.services.app.studentAttachmentLists.getAllByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAttachmentLists/GetAllByUser' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'institutionFilter', value: input.institutionFilter }, { name: 'locationFilter', value: input.locationFilter }, { name: 'studentDetailIdFilter', value: input.studentDetailIdFilter }, { name: 'employeeListIdFilter', value: input.employeeListIdFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentAttachmentListForViewByUser'
    abp.services.app.studentAttachmentLists.getStudentAttachmentListForViewByUser = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAttachmentLists/GetStudentAttachmentListForViewByUser' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getStudentAttachmentListForEditByUser'
    abp.services.app.studentAttachmentLists.getStudentAttachmentListForEditByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAttachmentLists/GetStudentAttachmentListForEditByUser' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEditByUser'
    abp.services.app.studentAttachmentLists.createOrEditByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAttachmentLists/CreateOrEditByUser',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'checkingStudentAttachmentByUser'
    abp.services.app.studentAttachmentLists.checkingStudentAttachmentByUser = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAttachmentLists/CheckingStudentAttachmentByUser',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'getStudentAttachmentListsToExcelByUser'
    abp.services.app.studentAttachmentLists.getStudentAttachmentListsToExcelByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAttachmentLists/GetStudentAttachmentListsToExcelByUser' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'institutionFilter', value: input.institutionFilter }, { name: 'locationFilter', value: input.locationFilter }, { name: 'studentDetailIdFilter', value: input.studentDetailIdFilter }, { name: 'employeeListIdFilter', value: input.employeeListIdFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'deleteByUser'
    abp.services.app.studentAttachmentLists.deleteByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/StudentAttachmentLists/DeleteByUser' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

  })();

  // controller 'attachmentAssessmentLists'
  (function(){

    abp.services.app.attachmentAssessmentLists = abp.services.app.attachmentAssessmentLists || {};

    // action 'getAll'
    abp.services.app.attachmentAssessmentLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AttachmentAssessmentLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'studentAttachmentListStudentDetailIdFilter', value: input.studentAttachmentListStudentDetailIdFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAttachmentAssessmentListForView'
    abp.services.app.attachmentAssessmentLists.getAttachmentAssessmentListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AttachmentAssessmentLists/GetAttachmentAssessmentListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAttachmentAssessmentListForEdit'
    abp.services.app.attachmentAssessmentLists.getAttachmentAssessmentListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AttachmentAssessmentLists/GetAttachmentAssessmentListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.attachmentAssessmentLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AttachmentAssessmentLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.attachmentAssessmentLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AttachmentAssessmentLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'completeAttachmentAssessement'
    abp.services.app.attachmentAssessmentLists.completeAttachmentAssessement = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AttachmentAssessmentLists/CompleteAttachmentAssessement',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'getAttachmentAssessmentListsToExcel'
    abp.services.app.attachmentAssessmentLists.getAttachmentAssessmentListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AttachmentAssessmentLists/GetAttachmentAssessmentListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'studentAttachmentListStudentDetailIdFilter', value: input.studentAttachmentListStudentDetailIdFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllStudentAttachmentListForTableDropdown'
    abp.services.app.attachmentAssessmentLists.getAllStudentAttachmentListForTableDropdown = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AttachmentAssessmentLists/GetAllStudentAttachmentListForTableDropdown',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByLecturer'
    abp.services.app.attachmentAssessmentLists.getAllByLecturer = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AttachmentAssessmentLists/GetAllByLecturer' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'studentAttachmentListStudentDetailIdFilter', value: input.studentAttachmentListStudentDetailIdFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAttachmentAssessmentListForViewByLecturer'
    abp.services.app.attachmentAssessmentLists.getAttachmentAssessmentListForViewByLecturer = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AttachmentAssessmentLists/GetAttachmentAssessmentListForViewByLecturer' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAttachmentAssessmentListForEditByLecturer'
    abp.services.app.attachmentAssessmentLists.getAttachmentAssessmentListForEditByLecturer = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AttachmentAssessmentLists/GetAttachmentAssessmentListForEditByLecturer' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEditByLecturer'
    abp.services.app.attachmentAssessmentLists.createOrEditByLecturer = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AttachmentAssessmentLists/CreateOrEditByLecturer',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'deleteByLecturer'
    abp.services.app.attachmentAssessmentLists.deleteByLecturer = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AttachmentAssessmentLists/DeleteByLecturer' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAttachmentAssessmentListsToExcelByLecturer'
    abp.services.app.attachmentAssessmentLists.getAttachmentAssessmentListsToExcelByLecturer = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AttachmentAssessmentLists/GetAttachmentAssessmentListsToExcelByLecturer' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'studentAttachmentListStudentDetailIdFilter', value: input.studentAttachmentListStudentDetailIdFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

  // controller 'announcementLists'
  (function(){

    abp.services.app.announcementLists = abp.services.app.announcementLists || {};

    // action 'getAll'
    abp.services.app.announcementLists.getAll = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AnnouncementLists/GetAll' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'titleFilter', value: input.titleFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAllByUser'
    abp.services.app.announcementLists.getAllByUser = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AnnouncementLists/getAllByUser' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'titleFilter', value: input.titleFilter }, { name: 'sorting', value: input.sorting }, { name: 'skipCount', value: input.skipCount }, { name: 'maxResultCount', value: input.maxResultCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getUserAnnouncements'
    abp.services.app.announcementLists.getUserAnnouncements = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AnnouncementLists/GetUserAnnouncements' + abp.utils.buildQueryString([{ name: 'state', value: input.state }, { name: 'startDate', value: input.startDate }, { name: 'endDate', value: input.endDate }, { name: 'maxResultCount', value: input.maxResultCount }, { name: 'skipCount', value: input.skipCount }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'setAllAnnouncementsAsRead'
    abp.services.app.announcementLists.setAllAnnouncementsAsRead = function(ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AnnouncementLists/SetAllAnnouncementsAsRead',
        type: 'POST'
      }, ajaxParams));;
    };

    // action 'setAnnouncementAsRead'
    abp.services.app.announcementLists.setAnnouncementAsRead = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AnnouncementLists/SetAnnouncementAsRead',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'deleteAnnouncement'
    abp.services.app.announcementLists.deleteAnnouncement = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AnnouncementLists/deleteAnnouncement' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAnnouncementListForView'
    abp.services.app.announcementLists.getAnnouncementListForView = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AnnouncementLists/GetAnnouncementListForView' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAnnouncementListForViewByUser'
    abp.services.app.announcementLists.getAnnouncementListForViewByUser = function(id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AnnouncementLists/GetAnnouncementListForViewByUser' + abp.utils.buildQueryString([{ name: 'id', value: id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'getAnnouncementListForEdit'
    abp.services.app.announcementLists.getAnnouncementListForEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AnnouncementLists/GetAnnouncementListForEdit' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

    // action 'createOrEdit'
    abp.services.app.announcementLists.createOrEdit = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AnnouncementLists/CreateOrEdit',
        type: 'POST',
        data: JSON.stringify(input)
      }, ajaxParams));;
    };

    // action 'updateFile'
    abp.services.app.announcementLists.updateFile = function(pathName, id, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AnnouncementLists/UpdateFile' + abp.utils.buildQueryString([{ name: 'pathName', value: pathName }, { name: 'id', value: id }]) + '',
        type: 'PUT'
      }, ajaxParams));;
    };

    // action 'delete'
    abp.services.app.announcementLists['delete'] = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AnnouncementLists/Delete' + abp.utils.buildQueryString([{ name: 'id', value: input.id }]) + '',
        type: 'DELETE'
      }, ajaxParams));;
    };

    // action 'getAnnouncementListsToExcel'
    abp.services.app.announcementLists.getAnnouncementListsToExcel = function(input, ajaxParams) {
      return abp.ajax($.extend(true, {
        url: abp.appPath + 'api/services/app/AnnouncementLists/GetAnnouncementListsToExcel' + abp.utils.buildQueryString([{ name: 'filter', value: input.filter }, { name: 'statusFilter', value: input.statusFilter }, { name: 'titleFilter', value: input.titleFilter }]) + '',
        type: 'GET'
      }, ajaxParams));;
    };

  })();

})();
